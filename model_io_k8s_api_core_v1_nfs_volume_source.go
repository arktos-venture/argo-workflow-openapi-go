/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IoK8sApiCoreV1NFSVolumeSource Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.
type IoK8sApiCoreV1NFSVolumeSource struct {
	// Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Path string `json:"path"`
	// ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	ReadOnly *bool `json:"readOnly,omitempty"`
	// Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Server string `json:"server"`
}

// NewIoK8sApiCoreV1NFSVolumeSource instantiates a new IoK8sApiCoreV1NFSVolumeSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoK8sApiCoreV1NFSVolumeSource(path string, server string) *IoK8sApiCoreV1NFSVolumeSource {
	this := IoK8sApiCoreV1NFSVolumeSource{}
	this.Path = path
	this.Server = server
	return &this
}

// NewIoK8sApiCoreV1NFSVolumeSourceWithDefaults instantiates a new IoK8sApiCoreV1NFSVolumeSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoK8sApiCoreV1NFSVolumeSourceWithDefaults() *IoK8sApiCoreV1NFSVolumeSource {
	this := IoK8sApiCoreV1NFSVolumeSource{}
	return &this
}

// GetPath returns the Path field value
func (o *IoK8sApiCoreV1NFSVolumeSource) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1NFSVolumeSource) GetPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *IoK8sApiCoreV1NFSVolumeSource) SetPath(v string) {
	o.Path = v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1NFSVolumeSource) GetReadOnly() bool {
	if o == nil || o.ReadOnly == nil {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1NFSVolumeSource) GetReadOnlyOk() (*bool, bool) {
	if o == nil || o.ReadOnly == nil {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1NFSVolumeSource) HasReadOnly() bool {
	if o != nil && o.ReadOnly != nil {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *IoK8sApiCoreV1NFSVolumeSource) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

// GetServer returns the Server field value
func (o *IoK8sApiCoreV1NFSVolumeSource) GetServer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Server
}

// GetServerOk returns a tuple with the Server field value
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1NFSVolumeSource) GetServerOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Server, true
}

// SetServer sets field value
func (o *IoK8sApiCoreV1NFSVolumeSource) SetServer(v string) {
	o.Server = v
}

func (o IoK8sApiCoreV1NFSVolumeSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["path"] = o.Path
	}
	if o.ReadOnly != nil {
		toSerialize["readOnly"] = o.ReadOnly
	}
	if true {
		toSerialize["server"] = o.Server
	}
	return json.Marshal(toSerialize)
}

type NullableIoK8sApiCoreV1NFSVolumeSource struct {
	value *IoK8sApiCoreV1NFSVolumeSource
	isSet bool
}

func (v NullableIoK8sApiCoreV1NFSVolumeSource) Get() *IoK8sApiCoreV1NFSVolumeSource {
	return v.value
}

func (v *NullableIoK8sApiCoreV1NFSVolumeSource) Set(val *IoK8sApiCoreV1NFSVolumeSource) {
	v.value = val
	v.isSet = true
}

func (v NullableIoK8sApiCoreV1NFSVolumeSource) IsSet() bool {
	return v.isSet
}

func (v *NullableIoK8sApiCoreV1NFSVolumeSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoK8sApiCoreV1NFSVolumeSource(val *IoK8sApiCoreV1NFSVolumeSource) *NullableIoK8sApiCoreV1NFSVolumeSource {
	return &NullableIoK8sApiCoreV1NFSVolumeSource{value: val, isSet: true}
}

func (v NullableIoK8sApiCoreV1NFSVolumeSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoK8sApiCoreV1NFSVolumeSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


