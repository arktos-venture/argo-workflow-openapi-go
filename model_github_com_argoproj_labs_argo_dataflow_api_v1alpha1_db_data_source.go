/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSource struct for GithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSource
type GithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSource struct {
	Value *string `json:"value,omitempty"`
	ValueFrom *GithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSourceFrom `json:"valueFrom,omitempty"`
}

// NewGithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSource instantiates a new GithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSource() *GithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSource {
	this := GithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSource{}
	return &this
}

// NewGithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSourceWithDefaults instantiates a new GithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSourceWithDefaults() *GithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSource {
	this := GithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSource{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSource) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSource) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSource) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSource) SetValue(v string) {
	o.Value = &v
}

// GetValueFrom returns the ValueFrom field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSource) GetValueFrom() GithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSourceFrom {
	if o == nil || o.ValueFrom == nil {
		var ret GithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSourceFrom
		return ret
	}
	return *o.ValueFrom
}

// GetValueFromOk returns a tuple with the ValueFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSource) GetValueFromOk() (*GithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSourceFrom, bool) {
	if o == nil || o.ValueFrom == nil {
		return nil, false
	}
	return o.ValueFrom, true
}

// HasValueFrom returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSource) HasValueFrom() bool {
	if o != nil && o.ValueFrom != nil {
		return true
	}

	return false
}

// SetValueFrom gets a reference to the given GithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSourceFrom and assigns it to the ValueFrom field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSource) SetValueFrom(v GithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSourceFrom) {
	o.ValueFrom = &v
}

func (o GithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.ValueFrom != nil {
		toSerialize["valueFrom"] = o.ValueFrom
	}
	return json.Marshal(toSerialize)
}

type NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSource struct {
	value *GithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSource
	isSet bool
}

func (v NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSource) Get() *GithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSource {
	return v.value
}

func (v *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSource) Set(val *GithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSource) {
	v.value = val
	v.isSet = true
}

func (v NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSource) IsSet() bool {
	return v.isSet
}

func (v *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSource(val *GithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSource) *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSource {
	return &NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSource{value: val, isSet: true}
}

func (v NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


