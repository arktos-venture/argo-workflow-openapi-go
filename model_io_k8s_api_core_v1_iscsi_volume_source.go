/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IoK8sApiCoreV1ISCSIVolumeSource Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
type IoK8sApiCoreV1ISCSIVolumeSource struct {
	// whether support iSCSI Discovery CHAP authentication
	ChapAuthDiscovery *bool `json:"chapAuthDiscovery,omitempty"`
	// whether support iSCSI Session CHAP authentication
	ChapAuthSession *bool `json:"chapAuthSession,omitempty"`
	// Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
	FsType *string `json:"fsType,omitempty"`
	// Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
	InitiatorName *string `json:"initiatorName,omitempty"`
	// Target iSCSI Qualified Name.
	Iqn string `json:"iqn"`
	// iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
	IscsiInterface *string `json:"iscsiInterface,omitempty"`
	// iSCSI Target Lun number.
	Lun int32 `json:"lun"`
	// iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
	Portals *[]string `json:"portals,omitempty"`
	// ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
	ReadOnly *bool `json:"readOnly,omitempty"`
	SecretRef *IoK8sApiCoreV1LocalObjectReference `json:"secretRef,omitempty"`
	// iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
	TargetPortal string `json:"targetPortal"`
}

// NewIoK8sApiCoreV1ISCSIVolumeSource instantiates a new IoK8sApiCoreV1ISCSIVolumeSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoK8sApiCoreV1ISCSIVolumeSource(iqn string, lun int32, targetPortal string) *IoK8sApiCoreV1ISCSIVolumeSource {
	this := IoK8sApiCoreV1ISCSIVolumeSource{}
	this.Iqn = iqn
	this.Lun = lun
	this.TargetPortal = targetPortal
	return &this
}

// NewIoK8sApiCoreV1ISCSIVolumeSourceWithDefaults instantiates a new IoK8sApiCoreV1ISCSIVolumeSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoK8sApiCoreV1ISCSIVolumeSourceWithDefaults() *IoK8sApiCoreV1ISCSIVolumeSource {
	this := IoK8sApiCoreV1ISCSIVolumeSource{}
	return &this
}

// GetChapAuthDiscovery returns the ChapAuthDiscovery field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1ISCSIVolumeSource) GetChapAuthDiscovery() bool {
	if o == nil || o.ChapAuthDiscovery == nil {
		var ret bool
		return ret
	}
	return *o.ChapAuthDiscovery
}

// GetChapAuthDiscoveryOk returns a tuple with the ChapAuthDiscovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1ISCSIVolumeSource) GetChapAuthDiscoveryOk() (*bool, bool) {
	if o == nil || o.ChapAuthDiscovery == nil {
		return nil, false
	}
	return o.ChapAuthDiscovery, true
}

// HasChapAuthDiscovery returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1ISCSIVolumeSource) HasChapAuthDiscovery() bool {
	if o != nil && o.ChapAuthDiscovery != nil {
		return true
	}

	return false
}

// SetChapAuthDiscovery gets a reference to the given bool and assigns it to the ChapAuthDiscovery field.
func (o *IoK8sApiCoreV1ISCSIVolumeSource) SetChapAuthDiscovery(v bool) {
	o.ChapAuthDiscovery = &v
}

// GetChapAuthSession returns the ChapAuthSession field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1ISCSIVolumeSource) GetChapAuthSession() bool {
	if o == nil || o.ChapAuthSession == nil {
		var ret bool
		return ret
	}
	return *o.ChapAuthSession
}

// GetChapAuthSessionOk returns a tuple with the ChapAuthSession field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1ISCSIVolumeSource) GetChapAuthSessionOk() (*bool, bool) {
	if o == nil || o.ChapAuthSession == nil {
		return nil, false
	}
	return o.ChapAuthSession, true
}

// HasChapAuthSession returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1ISCSIVolumeSource) HasChapAuthSession() bool {
	if o != nil && o.ChapAuthSession != nil {
		return true
	}

	return false
}

// SetChapAuthSession gets a reference to the given bool and assigns it to the ChapAuthSession field.
func (o *IoK8sApiCoreV1ISCSIVolumeSource) SetChapAuthSession(v bool) {
	o.ChapAuthSession = &v
}

// GetFsType returns the FsType field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1ISCSIVolumeSource) GetFsType() string {
	if o == nil || o.FsType == nil {
		var ret string
		return ret
	}
	return *o.FsType
}

// GetFsTypeOk returns a tuple with the FsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1ISCSIVolumeSource) GetFsTypeOk() (*string, bool) {
	if o == nil || o.FsType == nil {
		return nil, false
	}
	return o.FsType, true
}

// HasFsType returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1ISCSIVolumeSource) HasFsType() bool {
	if o != nil && o.FsType != nil {
		return true
	}

	return false
}

// SetFsType gets a reference to the given string and assigns it to the FsType field.
func (o *IoK8sApiCoreV1ISCSIVolumeSource) SetFsType(v string) {
	o.FsType = &v
}

// GetInitiatorName returns the InitiatorName field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1ISCSIVolumeSource) GetInitiatorName() string {
	if o == nil || o.InitiatorName == nil {
		var ret string
		return ret
	}
	return *o.InitiatorName
}

// GetInitiatorNameOk returns a tuple with the InitiatorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1ISCSIVolumeSource) GetInitiatorNameOk() (*string, bool) {
	if o == nil || o.InitiatorName == nil {
		return nil, false
	}
	return o.InitiatorName, true
}

// HasInitiatorName returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1ISCSIVolumeSource) HasInitiatorName() bool {
	if o != nil && o.InitiatorName != nil {
		return true
	}

	return false
}

// SetInitiatorName gets a reference to the given string and assigns it to the InitiatorName field.
func (o *IoK8sApiCoreV1ISCSIVolumeSource) SetInitiatorName(v string) {
	o.InitiatorName = &v
}

// GetIqn returns the Iqn field value
func (o *IoK8sApiCoreV1ISCSIVolumeSource) GetIqn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Iqn
}

// GetIqnOk returns a tuple with the Iqn field value
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1ISCSIVolumeSource) GetIqnOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Iqn, true
}

// SetIqn sets field value
func (o *IoK8sApiCoreV1ISCSIVolumeSource) SetIqn(v string) {
	o.Iqn = v
}

// GetIscsiInterface returns the IscsiInterface field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1ISCSIVolumeSource) GetIscsiInterface() string {
	if o == nil || o.IscsiInterface == nil {
		var ret string
		return ret
	}
	return *o.IscsiInterface
}

// GetIscsiInterfaceOk returns a tuple with the IscsiInterface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1ISCSIVolumeSource) GetIscsiInterfaceOk() (*string, bool) {
	if o == nil || o.IscsiInterface == nil {
		return nil, false
	}
	return o.IscsiInterface, true
}

// HasIscsiInterface returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1ISCSIVolumeSource) HasIscsiInterface() bool {
	if o != nil && o.IscsiInterface != nil {
		return true
	}

	return false
}

// SetIscsiInterface gets a reference to the given string and assigns it to the IscsiInterface field.
func (o *IoK8sApiCoreV1ISCSIVolumeSource) SetIscsiInterface(v string) {
	o.IscsiInterface = &v
}

// GetLun returns the Lun field value
func (o *IoK8sApiCoreV1ISCSIVolumeSource) GetLun() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Lun
}

// GetLunOk returns a tuple with the Lun field value
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1ISCSIVolumeSource) GetLunOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Lun, true
}

// SetLun sets field value
func (o *IoK8sApiCoreV1ISCSIVolumeSource) SetLun(v int32) {
	o.Lun = v
}

// GetPortals returns the Portals field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1ISCSIVolumeSource) GetPortals() []string {
	if o == nil || o.Portals == nil {
		var ret []string
		return ret
	}
	return *o.Portals
}

// GetPortalsOk returns a tuple with the Portals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1ISCSIVolumeSource) GetPortalsOk() (*[]string, bool) {
	if o == nil || o.Portals == nil {
		return nil, false
	}
	return o.Portals, true
}

// HasPortals returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1ISCSIVolumeSource) HasPortals() bool {
	if o != nil && o.Portals != nil {
		return true
	}

	return false
}

// SetPortals gets a reference to the given []string and assigns it to the Portals field.
func (o *IoK8sApiCoreV1ISCSIVolumeSource) SetPortals(v []string) {
	o.Portals = &v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1ISCSIVolumeSource) GetReadOnly() bool {
	if o == nil || o.ReadOnly == nil {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1ISCSIVolumeSource) GetReadOnlyOk() (*bool, bool) {
	if o == nil || o.ReadOnly == nil {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1ISCSIVolumeSource) HasReadOnly() bool {
	if o != nil && o.ReadOnly != nil {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *IoK8sApiCoreV1ISCSIVolumeSource) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

// GetSecretRef returns the SecretRef field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1ISCSIVolumeSource) GetSecretRef() IoK8sApiCoreV1LocalObjectReference {
	if o == nil || o.SecretRef == nil {
		var ret IoK8sApiCoreV1LocalObjectReference
		return ret
	}
	return *o.SecretRef
}

// GetSecretRefOk returns a tuple with the SecretRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1ISCSIVolumeSource) GetSecretRefOk() (*IoK8sApiCoreV1LocalObjectReference, bool) {
	if o == nil || o.SecretRef == nil {
		return nil, false
	}
	return o.SecretRef, true
}

// HasSecretRef returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1ISCSIVolumeSource) HasSecretRef() bool {
	if o != nil && o.SecretRef != nil {
		return true
	}

	return false
}

// SetSecretRef gets a reference to the given IoK8sApiCoreV1LocalObjectReference and assigns it to the SecretRef field.
func (o *IoK8sApiCoreV1ISCSIVolumeSource) SetSecretRef(v IoK8sApiCoreV1LocalObjectReference) {
	o.SecretRef = &v
}

// GetTargetPortal returns the TargetPortal field value
func (o *IoK8sApiCoreV1ISCSIVolumeSource) GetTargetPortal() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetPortal
}

// GetTargetPortalOk returns a tuple with the TargetPortal field value
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1ISCSIVolumeSource) GetTargetPortalOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TargetPortal, true
}

// SetTargetPortal sets field value
func (o *IoK8sApiCoreV1ISCSIVolumeSource) SetTargetPortal(v string) {
	o.TargetPortal = v
}

func (o IoK8sApiCoreV1ISCSIVolumeSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ChapAuthDiscovery != nil {
		toSerialize["chapAuthDiscovery"] = o.ChapAuthDiscovery
	}
	if o.ChapAuthSession != nil {
		toSerialize["chapAuthSession"] = o.ChapAuthSession
	}
	if o.FsType != nil {
		toSerialize["fsType"] = o.FsType
	}
	if o.InitiatorName != nil {
		toSerialize["initiatorName"] = o.InitiatorName
	}
	if true {
		toSerialize["iqn"] = o.Iqn
	}
	if o.IscsiInterface != nil {
		toSerialize["iscsiInterface"] = o.IscsiInterface
	}
	if true {
		toSerialize["lun"] = o.Lun
	}
	if o.Portals != nil {
		toSerialize["portals"] = o.Portals
	}
	if o.ReadOnly != nil {
		toSerialize["readOnly"] = o.ReadOnly
	}
	if o.SecretRef != nil {
		toSerialize["secretRef"] = o.SecretRef
	}
	if true {
		toSerialize["targetPortal"] = o.TargetPortal
	}
	return json.Marshal(toSerialize)
}

type NullableIoK8sApiCoreV1ISCSIVolumeSource struct {
	value *IoK8sApiCoreV1ISCSIVolumeSource
	isSet bool
}

func (v NullableIoK8sApiCoreV1ISCSIVolumeSource) Get() *IoK8sApiCoreV1ISCSIVolumeSource {
	return v.value
}

func (v *NullableIoK8sApiCoreV1ISCSIVolumeSource) Set(val *IoK8sApiCoreV1ISCSIVolumeSource) {
	v.value = val
	v.isSet = true
}

func (v NullableIoK8sApiCoreV1ISCSIVolumeSource) IsSet() bool {
	return v.isSet
}

func (v *NullableIoK8sApiCoreV1ISCSIVolumeSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoK8sApiCoreV1ISCSIVolumeSource(val *IoK8sApiCoreV1ISCSIVolumeSource) *NullableIoK8sApiCoreV1ISCSIVolumeSource {
	return &NullableIoK8sApiCoreV1ISCSIVolumeSource{value: val, isSet: true}
}

func (v NullableIoK8sApiCoreV1ISCSIVolumeSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoK8sApiCoreV1ISCSIVolumeSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


