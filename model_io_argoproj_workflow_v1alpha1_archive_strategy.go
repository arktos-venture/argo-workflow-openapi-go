/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IoArgoprojWorkflowV1alpha1ArchiveStrategy ArchiveStrategy describes how to archive files/directory when saving artifacts
type IoArgoprojWorkflowV1alpha1ArchiveStrategy struct {
	// NoneStrategy indicates to skip tar process and upload the files or directory tree as independent files. Note that if the artifact is a directory, the artifact driver must support the ability to save/load the directory appropriately.
	None *map[string]interface{} `json:"none,omitempty"`
	Tar *IoArgoprojWorkflowV1alpha1TarStrategy `json:"tar,omitempty"`
	// ZipStrategy will unzip zipped input artifacts
	Zip *map[string]interface{} `json:"zip,omitempty"`
}

// NewIoArgoprojWorkflowV1alpha1ArchiveStrategy instantiates a new IoArgoprojWorkflowV1alpha1ArchiveStrategy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoArgoprojWorkflowV1alpha1ArchiveStrategy() *IoArgoprojWorkflowV1alpha1ArchiveStrategy {
	this := IoArgoprojWorkflowV1alpha1ArchiveStrategy{}
	return &this
}

// NewIoArgoprojWorkflowV1alpha1ArchiveStrategyWithDefaults instantiates a new IoArgoprojWorkflowV1alpha1ArchiveStrategy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoArgoprojWorkflowV1alpha1ArchiveStrategyWithDefaults() *IoArgoprojWorkflowV1alpha1ArchiveStrategy {
	this := IoArgoprojWorkflowV1alpha1ArchiveStrategy{}
	return &this
}

// GetNone returns the None field value if set, zero value otherwise.
func (o *IoArgoprojWorkflowV1alpha1ArchiveStrategy) GetNone() map[string]interface{} {
	if o == nil || o.None == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.None
}

// GetNoneOk returns a tuple with the None field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojWorkflowV1alpha1ArchiveStrategy) GetNoneOk() (*map[string]interface{}, bool) {
	if o == nil || o.None == nil {
		return nil, false
	}
	return o.None, true
}

// HasNone returns a boolean if a field has been set.
func (o *IoArgoprojWorkflowV1alpha1ArchiveStrategy) HasNone() bool {
	if o != nil && o.None != nil {
		return true
	}

	return false
}

// SetNone gets a reference to the given map[string]interface{} and assigns it to the None field.
func (o *IoArgoprojWorkflowV1alpha1ArchiveStrategy) SetNone(v map[string]interface{}) {
	o.None = &v
}

// GetTar returns the Tar field value if set, zero value otherwise.
func (o *IoArgoprojWorkflowV1alpha1ArchiveStrategy) GetTar() IoArgoprojWorkflowV1alpha1TarStrategy {
	if o == nil || o.Tar == nil {
		var ret IoArgoprojWorkflowV1alpha1TarStrategy
		return ret
	}
	return *o.Tar
}

// GetTarOk returns a tuple with the Tar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojWorkflowV1alpha1ArchiveStrategy) GetTarOk() (*IoArgoprojWorkflowV1alpha1TarStrategy, bool) {
	if o == nil || o.Tar == nil {
		return nil, false
	}
	return o.Tar, true
}

// HasTar returns a boolean if a field has been set.
func (o *IoArgoprojWorkflowV1alpha1ArchiveStrategy) HasTar() bool {
	if o != nil && o.Tar != nil {
		return true
	}

	return false
}

// SetTar gets a reference to the given IoArgoprojWorkflowV1alpha1TarStrategy and assigns it to the Tar field.
func (o *IoArgoprojWorkflowV1alpha1ArchiveStrategy) SetTar(v IoArgoprojWorkflowV1alpha1TarStrategy) {
	o.Tar = &v
}

// GetZip returns the Zip field value if set, zero value otherwise.
func (o *IoArgoprojWorkflowV1alpha1ArchiveStrategy) GetZip() map[string]interface{} {
	if o == nil || o.Zip == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Zip
}

// GetZipOk returns a tuple with the Zip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojWorkflowV1alpha1ArchiveStrategy) GetZipOk() (*map[string]interface{}, bool) {
	if o == nil || o.Zip == nil {
		return nil, false
	}
	return o.Zip, true
}

// HasZip returns a boolean if a field has been set.
func (o *IoArgoprojWorkflowV1alpha1ArchiveStrategy) HasZip() bool {
	if o != nil && o.Zip != nil {
		return true
	}

	return false
}

// SetZip gets a reference to the given map[string]interface{} and assigns it to the Zip field.
func (o *IoArgoprojWorkflowV1alpha1ArchiveStrategy) SetZip(v map[string]interface{}) {
	o.Zip = &v
}

func (o IoArgoprojWorkflowV1alpha1ArchiveStrategy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.None != nil {
		toSerialize["none"] = o.None
	}
	if o.Tar != nil {
		toSerialize["tar"] = o.Tar
	}
	if o.Zip != nil {
		toSerialize["zip"] = o.Zip
	}
	return json.Marshal(toSerialize)
}

type NullableIoArgoprojWorkflowV1alpha1ArchiveStrategy struct {
	value *IoArgoprojWorkflowV1alpha1ArchiveStrategy
	isSet bool
}

func (v NullableIoArgoprojWorkflowV1alpha1ArchiveStrategy) Get() *IoArgoprojWorkflowV1alpha1ArchiveStrategy {
	return v.value
}

func (v *NullableIoArgoprojWorkflowV1alpha1ArchiveStrategy) Set(val *IoArgoprojWorkflowV1alpha1ArchiveStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableIoArgoprojWorkflowV1alpha1ArchiveStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableIoArgoprojWorkflowV1alpha1ArchiveStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoArgoprojWorkflowV1alpha1ArchiveStrategy(val *IoArgoprojWorkflowV1alpha1ArchiveStrategy) *NullableIoArgoprojWorkflowV1alpha1ArchiveStrategy {
	return &NullableIoArgoprojWorkflowV1alpha1ArchiveStrategy{value: val, isSet: true}
}

func (v NullableIoArgoprojWorkflowV1alpha1ArchiveStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoArgoprojWorkflowV1alpha1ArchiveStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


