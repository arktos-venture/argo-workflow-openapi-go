/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IoK8sApiCoreV1CSIVolumeSource Represents a source location of a volume to mount, managed by an external CSI driver
type IoK8sApiCoreV1CSIVolumeSource struct {
	// Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
	Driver string `json:"driver"`
	// Filesystem type to mount. Ex. \"ext4\", \"xfs\", \"ntfs\". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
	FsType *string `json:"fsType,omitempty"`
	NodePublishSecretRef *IoK8sApiCoreV1LocalObjectReference `json:"nodePublishSecretRef,omitempty"`
	// Specifies a read-only configuration for the volume. Defaults to false (read/write).
	ReadOnly *bool `json:"readOnly,omitempty"`
	// VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
	VolumeAttributes *map[string]string `json:"volumeAttributes,omitempty"`
}

// NewIoK8sApiCoreV1CSIVolumeSource instantiates a new IoK8sApiCoreV1CSIVolumeSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoK8sApiCoreV1CSIVolumeSource(driver string) *IoK8sApiCoreV1CSIVolumeSource {
	this := IoK8sApiCoreV1CSIVolumeSource{}
	this.Driver = driver
	return &this
}

// NewIoK8sApiCoreV1CSIVolumeSourceWithDefaults instantiates a new IoK8sApiCoreV1CSIVolumeSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoK8sApiCoreV1CSIVolumeSourceWithDefaults() *IoK8sApiCoreV1CSIVolumeSource {
	this := IoK8sApiCoreV1CSIVolumeSource{}
	return &this
}

// GetDriver returns the Driver field value
func (o *IoK8sApiCoreV1CSIVolumeSource) GetDriver() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Driver
}

// GetDriverOk returns a tuple with the Driver field value
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1CSIVolumeSource) GetDriverOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Driver, true
}

// SetDriver sets field value
func (o *IoK8sApiCoreV1CSIVolumeSource) SetDriver(v string) {
	o.Driver = v
}

// GetFsType returns the FsType field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1CSIVolumeSource) GetFsType() string {
	if o == nil || o.FsType == nil {
		var ret string
		return ret
	}
	return *o.FsType
}

// GetFsTypeOk returns a tuple with the FsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1CSIVolumeSource) GetFsTypeOk() (*string, bool) {
	if o == nil || o.FsType == nil {
		return nil, false
	}
	return o.FsType, true
}

// HasFsType returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1CSIVolumeSource) HasFsType() bool {
	if o != nil && o.FsType != nil {
		return true
	}

	return false
}

// SetFsType gets a reference to the given string and assigns it to the FsType field.
func (o *IoK8sApiCoreV1CSIVolumeSource) SetFsType(v string) {
	o.FsType = &v
}

// GetNodePublishSecretRef returns the NodePublishSecretRef field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1CSIVolumeSource) GetNodePublishSecretRef() IoK8sApiCoreV1LocalObjectReference {
	if o == nil || o.NodePublishSecretRef == nil {
		var ret IoK8sApiCoreV1LocalObjectReference
		return ret
	}
	return *o.NodePublishSecretRef
}

// GetNodePublishSecretRefOk returns a tuple with the NodePublishSecretRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1CSIVolumeSource) GetNodePublishSecretRefOk() (*IoK8sApiCoreV1LocalObjectReference, bool) {
	if o == nil || o.NodePublishSecretRef == nil {
		return nil, false
	}
	return o.NodePublishSecretRef, true
}

// HasNodePublishSecretRef returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1CSIVolumeSource) HasNodePublishSecretRef() bool {
	if o != nil && o.NodePublishSecretRef != nil {
		return true
	}

	return false
}

// SetNodePublishSecretRef gets a reference to the given IoK8sApiCoreV1LocalObjectReference and assigns it to the NodePublishSecretRef field.
func (o *IoK8sApiCoreV1CSIVolumeSource) SetNodePublishSecretRef(v IoK8sApiCoreV1LocalObjectReference) {
	o.NodePublishSecretRef = &v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1CSIVolumeSource) GetReadOnly() bool {
	if o == nil || o.ReadOnly == nil {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1CSIVolumeSource) GetReadOnlyOk() (*bool, bool) {
	if o == nil || o.ReadOnly == nil {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1CSIVolumeSource) HasReadOnly() bool {
	if o != nil && o.ReadOnly != nil {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *IoK8sApiCoreV1CSIVolumeSource) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

// GetVolumeAttributes returns the VolumeAttributes field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1CSIVolumeSource) GetVolumeAttributes() map[string]string {
	if o == nil || o.VolumeAttributes == nil {
		var ret map[string]string
		return ret
	}
	return *o.VolumeAttributes
}

// GetVolumeAttributesOk returns a tuple with the VolumeAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1CSIVolumeSource) GetVolumeAttributesOk() (*map[string]string, bool) {
	if o == nil || o.VolumeAttributes == nil {
		return nil, false
	}
	return o.VolumeAttributes, true
}

// HasVolumeAttributes returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1CSIVolumeSource) HasVolumeAttributes() bool {
	if o != nil && o.VolumeAttributes != nil {
		return true
	}

	return false
}

// SetVolumeAttributes gets a reference to the given map[string]string and assigns it to the VolumeAttributes field.
func (o *IoK8sApiCoreV1CSIVolumeSource) SetVolumeAttributes(v map[string]string) {
	o.VolumeAttributes = &v
}

func (o IoK8sApiCoreV1CSIVolumeSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["driver"] = o.Driver
	}
	if o.FsType != nil {
		toSerialize["fsType"] = o.FsType
	}
	if o.NodePublishSecretRef != nil {
		toSerialize["nodePublishSecretRef"] = o.NodePublishSecretRef
	}
	if o.ReadOnly != nil {
		toSerialize["readOnly"] = o.ReadOnly
	}
	if o.VolumeAttributes != nil {
		toSerialize["volumeAttributes"] = o.VolumeAttributes
	}
	return json.Marshal(toSerialize)
}

type NullableIoK8sApiCoreV1CSIVolumeSource struct {
	value *IoK8sApiCoreV1CSIVolumeSource
	isSet bool
}

func (v NullableIoK8sApiCoreV1CSIVolumeSource) Get() *IoK8sApiCoreV1CSIVolumeSource {
	return v.value
}

func (v *NullableIoK8sApiCoreV1CSIVolumeSource) Set(val *IoK8sApiCoreV1CSIVolumeSource) {
	v.value = val
	v.isSet = true
}

func (v NullableIoK8sApiCoreV1CSIVolumeSource) IsSet() bool {
	return v.isSet
}

func (v *NullableIoK8sApiCoreV1CSIVolumeSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoK8sApiCoreV1CSIVolumeSource(val *IoK8sApiCoreV1CSIVolumeSource) *NullableIoK8sApiCoreV1CSIVolumeSource {
	return &NullableIoK8sApiCoreV1CSIVolumeSource{value: val, isSet: true}
}

func (v NullableIoK8sApiCoreV1CSIVolumeSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoK8sApiCoreV1CSIVolumeSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


