/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IoK8sApiCoreV1GitRepoVolumeSource Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.  DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
type IoK8sApiCoreV1GitRepoVolumeSource struct {
	// Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
	Directory *string `json:"directory,omitempty"`
	// Repository URL
	Repository string `json:"repository"`
	// Commit hash for the specified revision.
	Revision *string `json:"revision,omitempty"`
}

// NewIoK8sApiCoreV1GitRepoVolumeSource instantiates a new IoK8sApiCoreV1GitRepoVolumeSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoK8sApiCoreV1GitRepoVolumeSource(repository string) *IoK8sApiCoreV1GitRepoVolumeSource {
	this := IoK8sApiCoreV1GitRepoVolumeSource{}
	this.Repository = repository
	return &this
}

// NewIoK8sApiCoreV1GitRepoVolumeSourceWithDefaults instantiates a new IoK8sApiCoreV1GitRepoVolumeSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoK8sApiCoreV1GitRepoVolumeSourceWithDefaults() *IoK8sApiCoreV1GitRepoVolumeSource {
	this := IoK8sApiCoreV1GitRepoVolumeSource{}
	return &this
}

// GetDirectory returns the Directory field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1GitRepoVolumeSource) GetDirectory() string {
	if o == nil || o.Directory == nil {
		var ret string
		return ret
	}
	return *o.Directory
}

// GetDirectoryOk returns a tuple with the Directory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1GitRepoVolumeSource) GetDirectoryOk() (*string, bool) {
	if o == nil || o.Directory == nil {
		return nil, false
	}
	return o.Directory, true
}

// HasDirectory returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1GitRepoVolumeSource) HasDirectory() bool {
	if o != nil && o.Directory != nil {
		return true
	}

	return false
}

// SetDirectory gets a reference to the given string and assigns it to the Directory field.
func (o *IoK8sApiCoreV1GitRepoVolumeSource) SetDirectory(v string) {
	o.Directory = &v
}

// GetRepository returns the Repository field value
func (o *IoK8sApiCoreV1GitRepoVolumeSource) GetRepository() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1GitRepoVolumeSource) GetRepositoryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Repository, true
}

// SetRepository sets field value
func (o *IoK8sApiCoreV1GitRepoVolumeSource) SetRepository(v string) {
	o.Repository = v
}

// GetRevision returns the Revision field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1GitRepoVolumeSource) GetRevision() string {
	if o == nil || o.Revision == nil {
		var ret string
		return ret
	}
	return *o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1GitRepoVolumeSource) GetRevisionOk() (*string, bool) {
	if o == nil || o.Revision == nil {
		return nil, false
	}
	return o.Revision, true
}

// HasRevision returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1GitRepoVolumeSource) HasRevision() bool {
	if o != nil && o.Revision != nil {
		return true
	}

	return false
}

// SetRevision gets a reference to the given string and assigns it to the Revision field.
func (o *IoK8sApiCoreV1GitRepoVolumeSource) SetRevision(v string) {
	o.Revision = &v
}

func (o IoK8sApiCoreV1GitRepoVolumeSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Directory != nil {
		toSerialize["directory"] = o.Directory
	}
	if true {
		toSerialize["repository"] = o.Repository
	}
	if o.Revision != nil {
		toSerialize["revision"] = o.Revision
	}
	return json.Marshal(toSerialize)
}

type NullableIoK8sApiCoreV1GitRepoVolumeSource struct {
	value *IoK8sApiCoreV1GitRepoVolumeSource
	isSet bool
}

func (v NullableIoK8sApiCoreV1GitRepoVolumeSource) Get() *IoK8sApiCoreV1GitRepoVolumeSource {
	return v.value
}

func (v *NullableIoK8sApiCoreV1GitRepoVolumeSource) Set(val *IoK8sApiCoreV1GitRepoVolumeSource) {
	v.value = val
	v.isSet = true
}

func (v NullableIoK8sApiCoreV1GitRepoVolumeSource) IsSet() bool {
	return v.isSet
}

func (v *NullableIoK8sApiCoreV1GitRepoVolumeSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoK8sApiCoreV1GitRepoVolumeSource(val *IoK8sApiCoreV1GitRepoVolumeSource) *NullableIoK8sApiCoreV1GitRepoVolumeSource {
	return &NullableIoK8sApiCoreV1GitRepoVolumeSource{value: val, isSet: true}
}

func (v NullableIoK8sApiCoreV1GitRepoVolumeSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoK8sApiCoreV1GitRepoVolumeSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


