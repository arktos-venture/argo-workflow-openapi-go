/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IoArgoprojWorkflowV1alpha1RetryAffinity RetryAffinity prevents running steps on the same host.
type IoArgoprojWorkflowV1alpha1RetryAffinity struct {
	// RetryNodeAntiAffinity is a placeholder for future expansion, only empty nodeAntiAffinity is allowed. In order to prevent running steps on the same host, it uses \"kubernetes.io/hostname\".
	NodeAntiAffinity *map[string]interface{} `json:"nodeAntiAffinity,omitempty"`
}

// NewIoArgoprojWorkflowV1alpha1RetryAffinity instantiates a new IoArgoprojWorkflowV1alpha1RetryAffinity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoArgoprojWorkflowV1alpha1RetryAffinity() *IoArgoprojWorkflowV1alpha1RetryAffinity {
	this := IoArgoprojWorkflowV1alpha1RetryAffinity{}
	return &this
}

// NewIoArgoprojWorkflowV1alpha1RetryAffinityWithDefaults instantiates a new IoArgoprojWorkflowV1alpha1RetryAffinity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoArgoprojWorkflowV1alpha1RetryAffinityWithDefaults() *IoArgoprojWorkflowV1alpha1RetryAffinity {
	this := IoArgoprojWorkflowV1alpha1RetryAffinity{}
	return &this
}

// GetNodeAntiAffinity returns the NodeAntiAffinity field value if set, zero value otherwise.
func (o *IoArgoprojWorkflowV1alpha1RetryAffinity) GetNodeAntiAffinity() map[string]interface{} {
	if o == nil || o.NodeAntiAffinity == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.NodeAntiAffinity
}

// GetNodeAntiAffinityOk returns a tuple with the NodeAntiAffinity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojWorkflowV1alpha1RetryAffinity) GetNodeAntiAffinityOk() (*map[string]interface{}, bool) {
	if o == nil || o.NodeAntiAffinity == nil {
		return nil, false
	}
	return o.NodeAntiAffinity, true
}

// HasNodeAntiAffinity returns a boolean if a field has been set.
func (o *IoArgoprojWorkflowV1alpha1RetryAffinity) HasNodeAntiAffinity() bool {
	if o != nil && o.NodeAntiAffinity != nil {
		return true
	}

	return false
}

// SetNodeAntiAffinity gets a reference to the given map[string]interface{} and assigns it to the NodeAntiAffinity field.
func (o *IoArgoprojWorkflowV1alpha1RetryAffinity) SetNodeAntiAffinity(v map[string]interface{}) {
	o.NodeAntiAffinity = &v
}

func (o IoArgoprojWorkflowV1alpha1RetryAffinity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NodeAntiAffinity != nil {
		toSerialize["nodeAntiAffinity"] = o.NodeAntiAffinity
	}
	return json.Marshal(toSerialize)
}

type NullableIoArgoprojWorkflowV1alpha1RetryAffinity struct {
	value *IoArgoprojWorkflowV1alpha1RetryAffinity
	isSet bool
}

func (v NullableIoArgoprojWorkflowV1alpha1RetryAffinity) Get() *IoArgoprojWorkflowV1alpha1RetryAffinity {
	return v.value
}

func (v *NullableIoArgoprojWorkflowV1alpha1RetryAffinity) Set(val *IoArgoprojWorkflowV1alpha1RetryAffinity) {
	v.value = val
	v.isSet = true
}

func (v NullableIoArgoprojWorkflowV1alpha1RetryAffinity) IsSet() bool {
	return v.isSet
}

func (v *NullableIoArgoprojWorkflowV1alpha1RetryAffinity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoArgoprojWorkflowV1alpha1RetryAffinity(val *IoArgoprojWorkflowV1alpha1RetryAffinity) *NullableIoArgoprojWorkflowV1alpha1RetryAffinity {
	return &NullableIoArgoprojWorkflowV1alpha1RetryAffinity{value: val, isSet: true}
}

func (v NullableIoArgoprojWorkflowV1alpha1RetryAffinity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoArgoprojWorkflowV1alpha1RetryAffinity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


