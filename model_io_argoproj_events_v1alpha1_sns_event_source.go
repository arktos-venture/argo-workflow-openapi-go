/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IoArgoprojEventsV1alpha1SNSEventSource struct for IoArgoprojEventsV1alpha1SNSEventSource
type IoArgoprojEventsV1alpha1SNSEventSource struct {
	AccessKey *IoK8sApiCoreV1SecretKeySelector `json:"accessKey,omitempty"`
	Metadata *map[string]string `json:"metadata,omitempty"`
	Region *string `json:"region,omitempty"`
	RoleARN *string `json:"roleARN,omitempty"`
	SecretKey *IoK8sApiCoreV1SecretKeySelector `json:"secretKey,omitempty"`
	TopicArn *string `json:"topicArn,omitempty"`
	ValidateSignature *bool `json:"validateSignature,omitempty"`
	Webhook *IoArgoprojEventsV1alpha1WebhookContext `json:"webhook,omitempty"`
}

// NewIoArgoprojEventsV1alpha1SNSEventSource instantiates a new IoArgoprojEventsV1alpha1SNSEventSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoArgoprojEventsV1alpha1SNSEventSource() *IoArgoprojEventsV1alpha1SNSEventSource {
	this := IoArgoprojEventsV1alpha1SNSEventSource{}
	return &this
}

// NewIoArgoprojEventsV1alpha1SNSEventSourceWithDefaults instantiates a new IoArgoprojEventsV1alpha1SNSEventSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoArgoprojEventsV1alpha1SNSEventSourceWithDefaults() *IoArgoprojEventsV1alpha1SNSEventSource {
	this := IoArgoprojEventsV1alpha1SNSEventSource{}
	return &this
}

// GetAccessKey returns the AccessKey field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1SNSEventSource) GetAccessKey() IoK8sApiCoreV1SecretKeySelector {
	if o == nil || o.AccessKey == nil {
		var ret IoK8sApiCoreV1SecretKeySelector
		return ret
	}
	return *o.AccessKey
}

// GetAccessKeyOk returns a tuple with the AccessKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1SNSEventSource) GetAccessKeyOk() (*IoK8sApiCoreV1SecretKeySelector, bool) {
	if o == nil || o.AccessKey == nil {
		return nil, false
	}
	return o.AccessKey, true
}

// HasAccessKey returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1SNSEventSource) HasAccessKey() bool {
	if o != nil && o.AccessKey != nil {
		return true
	}

	return false
}

// SetAccessKey gets a reference to the given IoK8sApiCoreV1SecretKeySelector and assigns it to the AccessKey field.
func (o *IoArgoprojEventsV1alpha1SNSEventSource) SetAccessKey(v IoK8sApiCoreV1SecretKeySelector) {
	o.AccessKey = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1SNSEventSource) GetMetadata() map[string]string {
	if o == nil || o.Metadata == nil {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1SNSEventSource) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1SNSEventSource) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *IoArgoprojEventsV1alpha1SNSEventSource) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1SNSEventSource) GetRegion() string {
	if o == nil || o.Region == nil {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1SNSEventSource) GetRegionOk() (*string, bool) {
	if o == nil || o.Region == nil {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1SNSEventSource) HasRegion() bool {
	if o != nil && o.Region != nil {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *IoArgoprojEventsV1alpha1SNSEventSource) SetRegion(v string) {
	o.Region = &v
}

// GetRoleARN returns the RoleARN field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1SNSEventSource) GetRoleARN() string {
	if o == nil || o.RoleARN == nil {
		var ret string
		return ret
	}
	return *o.RoleARN
}

// GetRoleARNOk returns a tuple with the RoleARN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1SNSEventSource) GetRoleARNOk() (*string, bool) {
	if o == nil || o.RoleARN == nil {
		return nil, false
	}
	return o.RoleARN, true
}

// HasRoleARN returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1SNSEventSource) HasRoleARN() bool {
	if o != nil && o.RoleARN != nil {
		return true
	}

	return false
}

// SetRoleARN gets a reference to the given string and assigns it to the RoleARN field.
func (o *IoArgoprojEventsV1alpha1SNSEventSource) SetRoleARN(v string) {
	o.RoleARN = &v
}

// GetSecretKey returns the SecretKey field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1SNSEventSource) GetSecretKey() IoK8sApiCoreV1SecretKeySelector {
	if o == nil || o.SecretKey == nil {
		var ret IoK8sApiCoreV1SecretKeySelector
		return ret
	}
	return *o.SecretKey
}

// GetSecretKeyOk returns a tuple with the SecretKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1SNSEventSource) GetSecretKeyOk() (*IoK8sApiCoreV1SecretKeySelector, bool) {
	if o == nil || o.SecretKey == nil {
		return nil, false
	}
	return o.SecretKey, true
}

// HasSecretKey returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1SNSEventSource) HasSecretKey() bool {
	if o != nil && o.SecretKey != nil {
		return true
	}

	return false
}

// SetSecretKey gets a reference to the given IoK8sApiCoreV1SecretKeySelector and assigns it to the SecretKey field.
func (o *IoArgoprojEventsV1alpha1SNSEventSource) SetSecretKey(v IoK8sApiCoreV1SecretKeySelector) {
	o.SecretKey = &v
}

// GetTopicArn returns the TopicArn field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1SNSEventSource) GetTopicArn() string {
	if o == nil || o.TopicArn == nil {
		var ret string
		return ret
	}
	return *o.TopicArn
}

// GetTopicArnOk returns a tuple with the TopicArn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1SNSEventSource) GetTopicArnOk() (*string, bool) {
	if o == nil || o.TopicArn == nil {
		return nil, false
	}
	return o.TopicArn, true
}

// HasTopicArn returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1SNSEventSource) HasTopicArn() bool {
	if o != nil && o.TopicArn != nil {
		return true
	}

	return false
}

// SetTopicArn gets a reference to the given string and assigns it to the TopicArn field.
func (o *IoArgoprojEventsV1alpha1SNSEventSource) SetTopicArn(v string) {
	o.TopicArn = &v
}

// GetValidateSignature returns the ValidateSignature field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1SNSEventSource) GetValidateSignature() bool {
	if o == nil || o.ValidateSignature == nil {
		var ret bool
		return ret
	}
	return *o.ValidateSignature
}

// GetValidateSignatureOk returns a tuple with the ValidateSignature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1SNSEventSource) GetValidateSignatureOk() (*bool, bool) {
	if o == nil || o.ValidateSignature == nil {
		return nil, false
	}
	return o.ValidateSignature, true
}

// HasValidateSignature returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1SNSEventSource) HasValidateSignature() bool {
	if o != nil && o.ValidateSignature != nil {
		return true
	}

	return false
}

// SetValidateSignature gets a reference to the given bool and assigns it to the ValidateSignature field.
func (o *IoArgoprojEventsV1alpha1SNSEventSource) SetValidateSignature(v bool) {
	o.ValidateSignature = &v
}

// GetWebhook returns the Webhook field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1SNSEventSource) GetWebhook() IoArgoprojEventsV1alpha1WebhookContext {
	if o == nil || o.Webhook == nil {
		var ret IoArgoprojEventsV1alpha1WebhookContext
		return ret
	}
	return *o.Webhook
}

// GetWebhookOk returns a tuple with the Webhook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1SNSEventSource) GetWebhookOk() (*IoArgoprojEventsV1alpha1WebhookContext, bool) {
	if o == nil || o.Webhook == nil {
		return nil, false
	}
	return o.Webhook, true
}

// HasWebhook returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1SNSEventSource) HasWebhook() bool {
	if o != nil && o.Webhook != nil {
		return true
	}

	return false
}

// SetWebhook gets a reference to the given IoArgoprojEventsV1alpha1WebhookContext and assigns it to the Webhook field.
func (o *IoArgoprojEventsV1alpha1SNSEventSource) SetWebhook(v IoArgoprojEventsV1alpha1WebhookContext) {
	o.Webhook = &v
}

func (o IoArgoprojEventsV1alpha1SNSEventSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccessKey != nil {
		toSerialize["accessKey"] = o.AccessKey
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Region != nil {
		toSerialize["region"] = o.Region
	}
	if o.RoleARN != nil {
		toSerialize["roleARN"] = o.RoleARN
	}
	if o.SecretKey != nil {
		toSerialize["secretKey"] = o.SecretKey
	}
	if o.TopicArn != nil {
		toSerialize["topicArn"] = o.TopicArn
	}
	if o.ValidateSignature != nil {
		toSerialize["validateSignature"] = o.ValidateSignature
	}
	if o.Webhook != nil {
		toSerialize["webhook"] = o.Webhook
	}
	return json.Marshal(toSerialize)
}

type NullableIoArgoprojEventsV1alpha1SNSEventSource struct {
	value *IoArgoprojEventsV1alpha1SNSEventSource
	isSet bool
}

func (v NullableIoArgoprojEventsV1alpha1SNSEventSource) Get() *IoArgoprojEventsV1alpha1SNSEventSource {
	return v.value
}

func (v *NullableIoArgoprojEventsV1alpha1SNSEventSource) Set(val *IoArgoprojEventsV1alpha1SNSEventSource) {
	v.value = val
	v.isSet = true
}

func (v NullableIoArgoprojEventsV1alpha1SNSEventSource) IsSet() bool {
	return v.isSet
}

func (v *NullableIoArgoprojEventsV1alpha1SNSEventSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoArgoprojEventsV1alpha1SNSEventSource(val *IoArgoprojEventsV1alpha1SNSEventSource) *NullableIoArgoprojEventsV1alpha1SNSEventSource {
	return &NullableIoArgoprojEventsV1alpha1SNSEventSource{value: val, isSet: true}
}

func (v NullableIoArgoprojEventsV1alpha1SNSEventSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoArgoprojEventsV1alpha1SNSEventSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


