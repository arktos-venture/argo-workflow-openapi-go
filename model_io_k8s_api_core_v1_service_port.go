/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IoK8sApiCoreV1ServicePort ServicePort contains information on service's port.
type IoK8sApiCoreV1ServicePort struct {
	// The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
	Name *string `json:"name,omitempty"`
	// The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort *int32 `json:"nodePort,omitempty"`
	// The port that will be exposed by this service.
	Port int32 `json:"port"`
	// The IP protocol for this port. Supports \"TCP\", \"UDP\", and \"SCTP\". Default is TCP.
	Protocol *string `json:"protocol,omitempty"`
	TargetPort *string `json:"targetPort,omitempty"`
}

// NewIoK8sApiCoreV1ServicePort instantiates a new IoK8sApiCoreV1ServicePort object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoK8sApiCoreV1ServicePort(port int32) *IoK8sApiCoreV1ServicePort {
	this := IoK8sApiCoreV1ServicePort{}
	this.Port = port
	return &this
}

// NewIoK8sApiCoreV1ServicePortWithDefaults instantiates a new IoK8sApiCoreV1ServicePort object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoK8sApiCoreV1ServicePortWithDefaults() *IoK8sApiCoreV1ServicePort {
	this := IoK8sApiCoreV1ServicePort{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1ServicePort) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1ServicePort) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1ServicePort) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IoK8sApiCoreV1ServicePort) SetName(v string) {
	o.Name = &v
}

// GetNodePort returns the NodePort field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1ServicePort) GetNodePort() int32 {
	if o == nil || o.NodePort == nil {
		var ret int32
		return ret
	}
	return *o.NodePort
}

// GetNodePortOk returns a tuple with the NodePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1ServicePort) GetNodePortOk() (*int32, bool) {
	if o == nil || o.NodePort == nil {
		return nil, false
	}
	return o.NodePort, true
}

// HasNodePort returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1ServicePort) HasNodePort() bool {
	if o != nil && o.NodePort != nil {
		return true
	}

	return false
}

// SetNodePort gets a reference to the given int32 and assigns it to the NodePort field.
func (o *IoK8sApiCoreV1ServicePort) SetNodePort(v int32) {
	o.NodePort = &v
}

// GetPort returns the Port field value
func (o *IoK8sApiCoreV1ServicePort) GetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1ServicePort) GetPortOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *IoK8sApiCoreV1ServicePort) SetPort(v int32) {
	o.Port = v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1ServicePort) GetProtocol() string {
	if o == nil || o.Protocol == nil {
		var ret string
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1ServicePort) GetProtocolOk() (*string, bool) {
	if o == nil || o.Protocol == nil {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1ServicePort) HasProtocol() bool {
	if o != nil && o.Protocol != nil {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given string and assigns it to the Protocol field.
func (o *IoK8sApiCoreV1ServicePort) SetProtocol(v string) {
	o.Protocol = &v
}

// GetTargetPort returns the TargetPort field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1ServicePort) GetTargetPort() string {
	if o == nil || o.TargetPort == nil {
		var ret string
		return ret
	}
	return *o.TargetPort
}

// GetTargetPortOk returns a tuple with the TargetPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1ServicePort) GetTargetPortOk() (*string, bool) {
	if o == nil || o.TargetPort == nil {
		return nil, false
	}
	return o.TargetPort, true
}

// HasTargetPort returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1ServicePort) HasTargetPort() bool {
	if o != nil && o.TargetPort != nil {
		return true
	}

	return false
}

// SetTargetPort gets a reference to the given string and assigns it to the TargetPort field.
func (o *IoK8sApiCoreV1ServicePort) SetTargetPort(v string) {
	o.TargetPort = &v
}

func (o IoK8sApiCoreV1ServicePort) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.NodePort != nil {
		toSerialize["nodePort"] = o.NodePort
	}
	if true {
		toSerialize["port"] = o.Port
	}
	if o.Protocol != nil {
		toSerialize["protocol"] = o.Protocol
	}
	if o.TargetPort != nil {
		toSerialize["targetPort"] = o.TargetPort
	}
	return json.Marshal(toSerialize)
}

type NullableIoK8sApiCoreV1ServicePort struct {
	value *IoK8sApiCoreV1ServicePort
	isSet bool
}

func (v NullableIoK8sApiCoreV1ServicePort) Get() *IoK8sApiCoreV1ServicePort {
	return v.value
}

func (v *NullableIoK8sApiCoreV1ServicePort) Set(val *IoK8sApiCoreV1ServicePort) {
	v.value = val
	v.isSet = true
}

func (v NullableIoK8sApiCoreV1ServicePort) IsSet() bool {
	return v.isSet
}

func (v *NullableIoK8sApiCoreV1ServicePort) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoK8sApiCoreV1ServicePort(val *IoK8sApiCoreV1ServicePort) *NullableIoK8sApiCoreV1ServicePort {
	return &NullableIoK8sApiCoreV1ServicePort{value: val, isSet: true}
}

func (v NullableIoK8sApiCoreV1ServicePort) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoK8sApiCoreV1ServicePort) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


