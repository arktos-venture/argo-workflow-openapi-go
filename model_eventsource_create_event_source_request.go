/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EventsourceCreateEventSourceRequest struct for EventsourceCreateEventSourceRequest
type EventsourceCreateEventSourceRequest struct {
	EventSource *IoArgoprojEventsV1alpha1EventSource `json:"eventSource,omitempty"`
	Namespace *string `json:"namespace,omitempty"`
}

// NewEventsourceCreateEventSourceRequest instantiates a new EventsourceCreateEventSourceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventsourceCreateEventSourceRequest() *EventsourceCreateEventSourceRequest {
	this := EventsourceCreateEventSourceRequest{}
	return &this
}

// NewEventsourceCreateEventSourceRequestWithDefaults instantiates a new EventsourceCreateEventSourceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventsourceCreateEventSourceRequestWithDefaults() *EventsourceCreateEventSourceRequest {
	this := EventsourceCreateEventSourceRequest{}
	return &this
}

// GetEventSource returns the EventSource field value if set, zero value otherwise.
func (o *EventsourceCreateEventSourceRequest) GetEventSource() IoArgoprojEventsV1alpha1EventSource {
	if o == nil || o.EventSource == nil {
		var ret IoArgoprojEventsV1alpha1EventSource
		return ret
	}
	return *o.EventSource
}

// GetEventSourceOk returns a tuple with the EventSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsourceCreateEventSourceRequest) GetEventSourceOk() (*IoArgoprojEventsV1alpha1EventSource, bool) {
	if o == nil || o.EventSource == nil {
		return nil, false
	}
	return o.EventSource, true
}

// HasEventSource returns a boolean if a field has been set.
func (o *EventsourceCreateEventSourceRequest) HasEventSource() bool {
	if o != nil && o.EventSource != nil {
		return true
	}

	return false
}

// SetEventSource gets a reference to the given IoArgoprojEventsV1alpha1EventSource and assigns it to the EventSource field.
func (o *EventsourceCreateEventSourceRequest) SetEventSource(v IoArgoprojEventsV1alpha1EventSource) {
	o.EventSource = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *EventsourceCreateEventSourceRequest) GetNamespace() string {
	if o == nil || o.Namespace == nil {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsourceCreateEventSourceRequest) GetNamespaceOk() (*string, bool) {
	if o == nil || o.Namespace == nil {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *EventsourceCreateEventSourceRequest) HasNamespace() bool {
	if o != nil && o.Namespace != nil {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *EventsourceCreateEventSourceRequest) SetNamespace(v string) {
	o.Namespace = &v
}

func (o EventsourceCreateEventSourceRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EventSource != nil {
		toSerialize["eventSource"] = o.EventSource
	}
	if o.Namespace != nil {
		toSerialize["namespace"] = o.Namespace
	}
	return json.Marshal(toSerialize)
}

type NullableEventsourceCreateEventSourceRequest struct {
	value *EventsourceCreateEventSourceRequest
	isSet bool
}

func (v NullableEventsourceCreateEventSourceRequest) Get() *EventsourceCreateEventSourceRequest {
	return v.value
}

func (v *NullableEventsourceCreateEventSourceRequest) Set(val *EventsourceCreateEventSourceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEventsourceCreateEventSourceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEventsourceCreateEventSourceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventsourceCreateEventSourceRequest(val *EventsourceCreateEventSourceRequest) *NullableEventsourceCreateEventSourceRequest {
	return &NullableEventsourceCreateEventSourceRequest{value: val, isSet: true}
}

func (v NullableEventsourceCreateEventSourceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventsourceCreateEventSourceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


