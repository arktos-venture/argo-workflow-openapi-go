/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// SensorLogEntry struct for SensorLogEntry
type SensorLogEntry struct {
	DependencyName *string `json:"dependencyName,omitempty"`
	EventContext *string `json:"eventContext,omitempty"`
	Level *string `json:"level,omitempty"`
	Msg *string `json:"msg,omitempty"`
	Namespace *string `json:"namespace,omitempty"`
	SensorName *string `json:"sensorName,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	Time *time.Time `json:"time,omitempty"`
	TriggerName *string `json:"triggerName,omitempty"`
}

// NewSensorLogEntry instantiates a new SensorLogEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSensorLogEntry() *SensorLogEntry {
	this := SensorLogEntry{}
	return &this
}

// NewSensorLogEntryWithDefaults instantiates a new SensorLogEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSensorLogEntryWithDefaults() *SensorLogEntry {
	this := SensorLogEntry{}
	return &this
}

// GetDependencyName returns the DependencyName field value if set, zero value otherwise.
func (o *SensorLogEntry) GetDependencyName() string {
	if o == nil || o.DependencyName == nil {
		var ret string
		return ret
	}
	return *o.DependencyName
}

// GetDependencyNameOk returns a tuple with the DependencyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SensorLogEntry) GetDependencyNameOk() (*string, bool) {
	if o == nil || o.DependencyName == nil {
		return nil, false
	}
	return o.DependencyName, true
}

// HasDependencyName returns a boolean if a field has been set.
func (o *SensorLogEntry) HasDependencyName() bool {
	if o != nil && o.DependencyName != nil {
		return true
	}

	return false
}

// SetDependencyName gets a reference to the given string and assigns it to the DependencyName field.
func (o *SensorLogEntry) SetDependencyName(v string) {
	o.DependencyName = &v
}

// GetEventContext returns the EventContext field value if set, zero value otherwise.
func (o *SensorLogEntry) GetEventContext() string {
	if o == nil || o.EventContext == nil {
		var ret string
		return ret
	}
	return *o.EventContext
}

// GetEventContextOk returns a tuple with the EventContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SensorLogEntry) GetEventContextOk() (*string, bool) {
	if o == nil || o.EventContext == nil {
		return nil, false
	}
	return o.EventContext, true
}

// HasEventContext returns a boolean if a field has been set.
func (o *SensorLogEntry) HasEventContext() bool {
	if o != nil && o.EventContext != nil {
		return true
	}

	return false
}

// SetEventContext gets a reference to the given string and assigns it to the EventContext field.
func (o *SensorLogEntry) SetEventContext(v string) {
	o.EventContext = &v
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *SensorLogEntry) GetLevel() string {
	if o == nil || o.Level == nil {
		var ret string
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SensorLogEntry) GetLevelOk() (*string, bool) {
	if o == nil || o.Level == nil {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *SensorLogEntry) HasLevel() bool {
	if o != nil && o.Level != nil {
		return true
	}

	return false
}

// SetLevel gets a reference to the given string and assigns it to the Level field.
func (o *SensorLogEntry) SetLevel(v string) {
	o.Level = &v
}

// GetMsg returns the Msg field value if set, zero value otherwise.
func (o *SensorLogEntry) GetMsg() string {
	if o == nil || o.Msg == nil {
		var ret string
		return ret
	}
	return *o.Msg
}

// GetMsgOk returns a tuple with the Msg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SensorLogEntry) GetMsgOk() (*string, bool) {
	if o == nil || o.Msg == nil {
		return nil, false
	}
	return o.Msg, true
}

// HasMsg returns a boolean if a field has been set.
func (o *SensorLogEntry) HasMsg() bool {
	if o != nil && o.Msg != nil {
		return true
	}

	return false
}

// SetMsg gets a reference to the given string and assigns it to the Msg field.
func (o *SensorLogEntry) SetMsg(v string) {
	o.Msg = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *SensorLogEntry) GetNamespace() string {
	if o == nil || o.Namespace == nil {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SensorLogEntry) GetNamespaceOk() (*string, bool) {
	if o == nil || o.Namespace == nil {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *SensorLogEntry) HasNamespace() bool {
	if o != nil && o.Namespace != nil {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *SensorLogEntry) SetNamespace(v string) {
	o.Namespace = &v
}

// GetSensorName returns the SensorName field value if set, zero value otherwise.
func (o *SensorLogEntry) GetSensorName() string {
	if o == nil || o.SensorName == nil {
		var ret string
		return ret
	}
	return *o.SensorName
}

// GetSensorNameOk returns a tuple with the SensorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SensorLogEntry) GetSensorNameOk() (*string, bool) {
	if o == nil || o.SensorName == nil {
		return nil, false
	}
	return o.SensorName, true
}

// HasSensorName returns a boolean if a field has been set.
func (o *SensorLogEntry) HasSensorName() bool {
	if o != nil && o.SensorName != nil {
		return true
	}

	return false
}

// SetSensorName gets a reference to the given string and assigns it to the SensorName field.
func (o *SensorLogEntry) SetSensorName(v string) {
	o.SensorName = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *SensorLogEntry) GetTime() time.Time {
	if o == nil || o.Time == nil {
		var ret time.Time
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SensorLogEntry) GetTimeOk() (*time.Time, bool) {
	if o == nil || o.Time == nil {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *SensorLogEntry) HasTime() bool {
	if o != nil && o.Time != nil {
		return true
	}

	return false
}

// SetTime gets a reference to the given time.Time and assigns it to the Time field.
func (o *SensorLogEntry) SetTime(v time.Time) {
	o.Time = &v
}

// GetTriggerName returns the TriggerName field value if set, zero value otherwise.
func (o *SensorLogEntry) GetTriggerName() string {
	if o == nil || o.TriggerName == nil {
		var ret string
		return ret
	}
	return *o.TriggerName
}

// GetTriggerNameOk returns a tuple with the TriggerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SensorLogEntry) GetTriggerNameOk() (*string, bool) {
	if o == nil || o.TriggerName == nil {
		return nil, false
	}
	return o.TriggerName, true
}

// HasTriggerName returns a boolean if a field has been set.
func (o *SensorLogEntry) HasTriggerName() bool {
	if o != nil && o.TriggerName != nil {
		return true
	}

	return false
}

// SetTriggerName gets a reference to the given string and assigns it to the TriggerName field.
func (o *SensorLogEntry) SetTriggerName(v string) {
	o.TriggerName = &v
}

func (o SensorLogEntry) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DependencyName != nil {
		toSerialize["dependencyName"] = o.DependencyName
	}
	if o.EventContext != nil {
		toSerialize["eventContext"] = o.EventContext
	}
	if o.Level != nil {
		toSerialize["level"] = o.Level
	}
	if o.Msg != nil {
		toSerialize["msg"] = o.Msg
	}
	if o.Namespace != nil {
		toSerialize["namespace"] = o.Namespace
	}
	if o.SensorName != nil {
		toSerialize["sensorName"] = o.SensorName
	}
	if o.Time != nil {
		toSerialize["time"] = o.Time
	}
	if o.TriggerName != nil {
		toSerialize["triggerName"] = o.TriggerName
	}
	return json.Marshal(toSerialize)
}

type NullableSensorLogEntry struct {
	value *SensorLogEntry
	isSet bool
}

func (v NullableSensorLogEntry) Get() *SensorLogEntry {
	return v.value
}

func (v *NullableSensorLogEntry) Set(val *SensorLogEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableSensorLogEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableSensorLogEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSensorLogEntry(val *SensorLogEntry) *NullableSensorLogEntry {
	return &NullableSensorLogEntry{value: val, isSet: true}
}

func (v NullableSensorLogEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSensorLogEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


