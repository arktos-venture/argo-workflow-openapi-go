/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IoArgoprojEventsV1alpha1SlackEventSource struct for IoArgoprojEventsV1alpha1SlackEventSource
type IoArgoprojEventsV1alpha1SlackEventSource struct {
	Metadata *map[string]string `json:"metadata,omitempty"`
	SigningSecret *IoK8sApiCoreV1SecretKeySelector `json:"signingSecret,omitempty"`
	Token *IoK8sApiCoreV1SecretKeySelector `json:"token,omitempty"`
	Webhook *IoArgoprojEventsV1alpha1WebhookContext `json:"webhook,omitempty"`
}

// NewIoArgoprojEventsV1alpha1SlackEventSource instantiates a new IoArgoprojEventsV1alpha1SlackEventSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoArgoprojEventsV1alpha1SlackEventSource() *IoArgoprojEventsV1alpha1SlackEventSource {
	this := IoArgoprojEventsV1alpha1SlackEventSource{}
	return &this
}

// NewIoArgoprojEventsV1alpha1SlackEventSourceWithDefaults instantiates a new IoArgoprojEventsV1alpha1SlackEventSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoArgoprojEventsV1alpha1SlackEventSourceWithDefaults() *IoArgoprojEventsV1alpha1SlackEventSource {
	this := IoArgoprojEventsV1alpha1SlackEventSource{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1SlackEventSource) GetMetadata() map[string]string {
	if o == nil || o.Metadata == nil {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1SlackEventSource) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1SlackEventSource) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *IoArgoprojEventsV1alpha1SlackEventSource) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

// GetSigningSecret returns the SigningSecret field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1SlackEventSource) GetSigningSecret() IoK8sApiCoreV1SecretKeySelector {
	if o == nil || o.SigningSecret == nil {
		var ret IoK8sApiCoreV1SecretKeySelector
		return ret
	}
	return *o.SigningSecret
}

// GetSigningSecretOk returns a tuple with the SigningSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1SlackEventSource) GetSigningSecretOk() (*IoK8sApiCoreV1SecretKeySelector, bool) {
	if o == nil || o.SigningSecret == nil {
		return nil, false
	}
	return o.SigningSecret, true
}

// HasSigningSecret returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1SlackEventSource) HasSigningSecret() bool {
	if o != nil && o.SigningSecret != nil {
		return true
	}

	return false
}

// SetSigningSecret gets a reference to the given IoK8sApiCoreV1SecretKeySelector and assigns it to the SigningSecret field.
func (o *IoArgoprojEventsV1alpha1SlackEventSource) SetSigningSecret(v IoK8sApiCoreV1SecretKeySelector) {
	o.SigningSecret = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1SlackEventSource) GetToken() IoK8sApiCoreV1SecretKeySelector {
	if o == nil || o.Token == nil {
		var ret IoK8sApiCoreV1SecretKeySelector
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1SlackEventSource) GetTokenOk() (*IoK8sApiCoreV1SecretKeySelector, bool) {
	if o == nil || o.Token == nil {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1SlackEventSource) HasToken() bool {
	if o != nil && o.Token != nil {
		return true
	}

	return false
}

// SetToken gets a reference to the given IoK8sApiCoreV1SecretKeySelector and assigns it to the Token field.
func (o *IoArgoprojEventsV1alpha1SlackEventSource) SetToken(v IoK8sApiCoreV1SecretKeySelector) {
	o.Token = &v
}

// GetWebhook returns the Webhook field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1SlackEventSource) GetWebhook() IoArgoprojEventsV1alpha1WebhookContext {
	if o == nil || o.Webhook == nil {
		var ret IoArgoprojEventsV1alpha1WebhookContext
		return ret
	}
	return *o.Webhook
}

// GetWebhookOk returns a tuple with the Webhook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1SlackEventSource) GetWebhookOk() (*IoArgoprojEventsV1alpha1WebhookContext, bool) {
	if o == nil || o.Webhook == nil {
		return nil, false
	}
	return o.Webhook, true
}

// HasWebhook returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1SlackEventSource) HasWebhook() bool {
	if o != nil && o.Webhook != nil {
		return true
	}

	return false
}

// SetWebhook gets a reference to the given IoArgoprojEventsV1alpha1WebhookContext and assigns it to the Webhook field.
func (o *IoArgoprojEventsV1alpha1SlackEventSource) SetWebhook(v IoArgoprojEventsV1alpha1WebhookContext) {
	o.Webhook = &v
}

func (o IoArgoprojEventsV1alpha1SlackEventSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.SigningSecret != nil {
		toSerialize["signingSecret"] = o.SigningSecret
	}
	if o.Token != nil {
		toSerialize["token"] = o.Token
	}
	if o.Webhook != nil {
		toSerialize["webhook"] = o.Webhook
	}
	return json.Marshal(toSerialize)
}

type NullableIoArgoprojEventsV1alpha1SlackEventSource struct {
	value *IoArgoprojEventsV1alpha1SlackEventSource
	isSet bool
}

func (v NullableIoArgoprojEventsV1alpha1SlackEventSource) Get() *IoArgoprojEventsV1alpha1SlackEventSource {
	return v.value
}

func (v *NullableIoArgoprojEventsV1alpha1SlackEventSource) Set(val *IoArgoprojEventsV1alpha1SlackEventSource) {
	v.value = val
	v.isSet = true
}

func (v NullableIoArgoprojEventsV1alpha1SlackEventSource) IsSet() bool {
	return v.isSet
}

func (v *NullableIoArgoprojEventsV1alpha1SlackEventSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoArgoprojEventsV1alpha1SlackEventSource(val *IoArgoprojEventsV1alpha1SlackEventSource) *NullableIoArgoprojEventsV1alpha1SlackEventSource {
	return &NullableIoArgoprojEventsV1alpha1SlackEventSource{value: val, isSet: true}
}

func (v NullableIoArgoprojEventsV1alpha1SlackEventSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoArgoprojEventsV1alpha1SlackEventSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


