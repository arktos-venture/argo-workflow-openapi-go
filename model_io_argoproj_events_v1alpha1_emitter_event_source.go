/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IoArgoprojEventsV1alpha1EmitterEventSource struct for IoArgoprojEventsV1alpha1EmitterEventSource
type IoArgoprojEventsV1alpha1EmitterEventSource struct {
	// Broker URI to connect to.
	Broker *string `json:"broker,omitempty"`
	ChannelKey *string `json:"channelKey,omitempty"`
	ChannelName *string `json:"channelName,omitempty"`
	ConnectionBackoff *IoArgoprojEventsV1alpha1Backoff `json:"connectionBackoff,omitempty"`
	JsonBody *bool `json:"jsonBody,omitempty"`
	Metadata *map[string]string `json:"metadata,omitempty"`
	Password *IoK8sApiCoreV1SecretKeySelector `json:"password,omitempty"`
	Tls *IoArgoprojEventsV1alpha1TLSConfig `json:"tls,omitempty"`
	Username *IoK8sApiCoreV1SecretKeySelector `json:"username,omitempty"`
}

// NewIoArgoprojEventsV1alpha1EmitterEventSource instantiates a new IoArgoprojEventsV1alpha1EmitterEventSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoArgoprojEventsV1alpha1EmitterEventSource() *IoArgoprojEventsV1alpha1EmitterEventSource {
	this := IoArgoprojEventsV1alpha1EmitterEventSource{}
	return &this
}

// NewIoArgoprojEventsV1alpha1EmitterEventSourceWithDefaults instantiates a new IoArgoprojEventsV1alpha1EmitterEventSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoArgoprojEventsV1alpha1EmitterEventSourceWithDefaults() *IoArgoprojEventsV1alpha1EmitterEventSource {
	this := IoArgoprojEventsV1alpha1EmitterEventSource{}
	return &this
}

// GetBroker returns the Broker field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1EmitterEventSource) GetBroker() string {
	if o == nil || o.Broker == nil {
		var ret string
		return ret
	}
	return *o.Broker
}

// GetBrokerOk returns a tuple with the Broker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1EmitterEventSource) GetBrokerOk() (*string, bool) {
	if o == nil || o.Broker == nil {
		return nil, false
	}
	return o.Broker, true
}

// HasBroker returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1EmitterEventSource) HasBroker() bool {
	if o != nil && o.Broker != nil {
		return true
	}

	return false
}

// SetBroker gets a reference to the given string and assigns it to the Broker field.
func (o *IoArgoprojEventsV1alpha1EmitterEventSource) SetBroker(v string) {
	o.Broker = &v
}

// GetChannelKey returns the ChannelKey field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1EmitterEventSource) GetChannelKey() string {
	if o == nil || o.ChannelKey == nil {
		var ret string
		return ret
	}
	return *o.ChannelKey
}

// GetChannelKeyOk returns a tuple with the ChannelKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1EmitterEventSource) GetChannelKeyOk() (*string, bool) {
	if o == nil || o.ChannelKey == nil {
		return nil, false
	}
	return o.ChannelKey, true
}

// HasChannelKey returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1EmitterEventSource) HasChannelKey() bool {
	if o != nil && o.ChannelKey != nil {
		return true
	}

	return false
}

// SetChannelKey gets a reference to the given string and assigns it to the ChannelKey field.
func (o *IoArgoprojEventsV1alpha1EmitterEventSource) SetChannelKey(v string) {
	o.ChannelKey = &v
}

// GetChannelName returns the ChannelName field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1EmitterEventSource) GetChannelName() string {
	if o == nil || o.ChannelName == nil {
		var ret string
		return ret
	}
	return *o.ChannelName
}

// GetChannelNameOk returns a tuple with the ChannelName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1EmitterEventSource) GetChannelNameOk() (*string, bool) {
	if o == nil || o.ChannelName == nil {
		return nil, false
	}
	return o.ChannelName, true
}

// HasChannelName returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1EmitterEventSource) HasChannelName() bool {
	if o != nil && o.ChannelName != nil {
		return true
	}

	return false
}

// SetChannelName gets a reference to the given string and assigns it to the ChannelName field.
func (o *IoArgoprojEventsV1alpha1EmitterEventSource) SetChannelName(v string) {
	o.ChannelName = &v
}

// GetConnectionBackoff returns the ConnectionBackoff field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1EmitterEventSource) GetConnectionBackoff() IoArgoprojEventsV1alpha1Backoff {
	if o == nil || o.ConnectionBackoff == nil {
		var ret IoArgoprojEventsV1alpha1Backoff
		return ret
	}
	return *o.ConnectionBackoff
}

// GetConnectionBackoffOk returns a tuple with the ConnectionBackoff field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1EmitterEventSource) GetConnectionBackoffOk() (*IoArgoprojEventsV1alpha1Backoff, bool) {
	if o == nil || o.ConnectionBackoff == nil {
		return nil, false
	}
	return o.ConnectionBackoff, true
}

// HasConnectionBackoff returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1EmitterEventSource) HasConnectionBackoff() bool {
	if o != nil && o.ConnectionBackoff != nil {
		return true
	}

	return false
}

// SetConnectionBackoff gets a reference to the given IoArgoprojEventsV1alpha1Backoff and assigns it to the ConnectionBackoff field.
func (o *IoArgoprojEventsV1alpha1EmitterEventSource) SetConnectionBackoff(v IoArgoprojEventsV1alpha1Backoff) {
	o.ConnectionBackoff = &v
}

// GetJsonBody returns the JsonBody field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1EmitterEventSource) GetJsonBody() bool {
	if o == nil || o.JsonBody == nil {
		var ret bool
		return ret
	}
	return *o.JsonBody
}

// GetJsonBodyOk returns a tuple with the JsonBody field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1EmitterEventSource) GetJsonBodyOk() (*bool, bool) {
	if o == nil || o.JsonBody == nil {
		return nil, false
	}
	return o.JsonBody, true
}

// HasJsonBody returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1EmitterEventSource) HasJsonBody() bool {
	if o != nil && o.JsonBody != nil {
		return true
	}

	return false
}

// SetJsonBody gets a reference to the given bool and assigns it to the JsonBody field.
func (o *IoArgoprojEventsV1alpha1EmitterEventSource) SetJsonBody(v bool) {
	o.JsonBody = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1EmitterEventSource) GetMetadata() map[string]string {
	if o == nil || o.Metadata == nil {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1EmitterEventSource) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1EmitterEventSource) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *IoArgoprojEventsV1alpha1EmitterEventSource) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1EmitterEventSource) GetPassword() IoK8sApiCoreV1SecretKeySelector {
	if o == nil || o.Password == nil {
		var ret IoK8sApiCoreV1SecretKeySelector
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1EmitterEventSource) GetPasswordOk() (*IoK8sApiCoreV1SecretKeySelector, bool) {
	if o == nil || o.Password == nil {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1EmitterEventSource) HasPassword() bool {
	if o != nil && o.Password != nil {
		return true
	}

	return false
}

// SetPassword gets a reference to the given IoK8sApiCoreV1SecretKeySelector and assigns it to the Password field.
func (o *IoArgoprojEventsV1alpha1EmitterEventSource) SetPassword(v IoK8sApiCoreV1SecretKeySelector) {
	o.Password = &v
}

// GetTls returns the Tls field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1EmitterEventSource) GetTls() IoArgoprojEventsV1alpha1TLSConfig {
	if o == nil || o.Tls == nil {
		var ret IoArgoprojEventsV1alpha1TLSConfig
		return ret
	}
	return *o.Tls
}

// GetTlsOk returns a tuple with the Tls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1EmitterEventSource) GetTlsOk() (*IoArgoprojEventsV1alpha1TLSConfig, bool) {
	if o == nil || o.Tls == nil {
		return nil, false
	}
	return o.Tls, true
}

// HasTls returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1EmitterEventSource) HasTls() bool {
	if o != nil && o.Tls != nil {
		return true
	}

	return false
}

// SetTls gets a reference to the given IoArgoprojEventsV1alpha1TLSConfig and assigns it to the Tls field.
func (o *IoArgoprojEventsV1alpha1EmitterEventSource) SetTls(v IoArgoprojEventsV1alpha1TLSConfig) {
	o.Tls = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1EmitterEventSource) GetUsername() IoK8sApiCoreV1SecretKeySelector {
	if o == nil || o.Username == nil {
		var ret IoK8sApiCoreV1SecretKeySelector
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1EmitterEventSource) GetUsernameOk() (*IoK8sApiCoreV1SecretKeySelector, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1EmitterEventSource) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given IoK8sApiCoreV1SecretKeySelector and assigns it to the Username field.
func (o *IoArgoprojEventsV1alpha1EmitterEventSource) SetUsername(v IoK8sApiCoreV1SecretKeySelector) {
	o.Username = &v
}

func (o IoArgoprojEventsV1alpha1EmitterEventSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Broker != nil {
		toSerialize["broker"] = o.Broker
	}
	if o.ChannelKey != nil {
		toSerialize["channelKey"] = o.ChannelKey
	}
	if o.ChannelName != nil {
		toSerialize["channelName"] = o.ChannelName
	}
	if o.ConnectionBackoff != nil {
		toSerialize["connectionBackoff"] = o.ConnectionBackoff
	}
	if o.JsonBody != nil {
		toSerialize["jsonBody"] = o.JsonBody
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Password != nil {
		toSerialize["password"] = o.Password
	}
	if o.Tls != nil {
		toSerialize["tls"] = o.Tls
	}
	if o.Username != nil {
		toSerialize["username"] = o.Username
	}
	return json.Marshal(toSerialize)
}

type NullableIoArgoprojEventsV1alpha1EmitterEventSource struct {
	value *IoArgoprojEventsV1alpha1EmitterEventSource
	isSet bool
}

func (v NullableIoArgoprojEventsV1alpha1EmitterEventSource) Get() *IoArgoprojEventsV1alpha1EmitterEventSource {
	return v.value
}

func (v *NullableIoArgoprojEventsV1alpha1EmitterEventSource) Set(val *IoArgoprojEventsV1alpha1EmitterEventSource) {
	v.value = val
	v.isSet = true
}

func (v NullableIoArgoprojEventsV1alpha1EmitterEventSource) IsSet() bool {
	return v.isSet
}

func (v *NullableIoArgoprojEventsV1alpha1EmitterEventSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoArgoprojEventsV1alpha1EmitterEventSource(val *IoArgoprojEventsV1alpha1EmitterEventSource) *NullableIoArgoprojEventsV1alpha1EmitterEventSource {
	return &NullableIoArgoprojEventsV1alpha1EmitterEventSource{value: val, isSet: true}
}

func (v NullableIoArgoprojEventsV1alpha1EmitterEventSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoArgoprojEventsV1alpha1EmitterEventSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


