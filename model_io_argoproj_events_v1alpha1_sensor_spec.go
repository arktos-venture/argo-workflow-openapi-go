/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IoArgoprojEventsV1alpha1SensorSpec struct for IoArgoprojEventsV1alpha1SensorSpec
type IoArgoprojEventsV1alpha1SensorSpec struct {
	// Circuit is a boolean expression of dependency groups Deprecated: will be removed in v1.5, use Switch in triggers instead.
	Circuit *string `json:"circuit,omitempty"`
	// Dependencies is a list of the events that this sensor is dependent on.
	Dependencies *[]IoArgoprojEventsV1alpha1EventDependency `json:"dependencies,omitempty"`
	// DependencyGroups is a list of the groups of events.
	DependencyGroups *[]IoArgoprojEventsV1alpha1DependencyGroup `json:"dependencyGroups,omitempty"`
	// ErrorOnFailedRound if set to true, marks sensor state as `error` if the previous trigger round fails. Once sensor state is set to `error`, no further triggers will be processed.
	ErrorOnFailedRound *bool `json:"errorOnFailedRound,omitempty"`
	EventBusName *string `json:"eventBusName,omitempty"`
	Replicas *int32 `json:"replicas,omitempty"`
	Template *IoArgoprojEventsV1alpha1Template `json:"template,omitempty"`
	// Triggers is a list of the things that this sensor evokes. These are the outputs from this sensor.
	Triggers *[]IoArgoprojEventsV1alpha1Trigger `json:"triggers,omitempty"`
}

// NewIoArgoprojEventsV1alpha1SensorSpec instantiates a new IoArgoprojEventsV1alpha1SensorSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoArgoprojEventsV1alpha1SensorSpec() *IoArgoprojEventsV1alpha1SensorSpec {
	this := IoArgoprojEventsV1alpha1SensorSpec{}
	return &this
}

// NewIoArgoprojEventsV1alpha1SensorSpecWithDefaults instantiates a new IoArgoprojEventsV1alpha1SensorSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoArgoprojEventsV1alpha1SensorSpecWithDefaults() *IoArgoprojEventsV1alpha1SensorSpec {
	this := IoArgoprojEventsV1alpha1SensorSpec{}
	return &this
}

// GetCircuit returns the Circuit field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1SensorSpec) GetCircuit() string {
	if o == nil || o.Circuit == nil {
		var ret string
		return ret
	}
	return *o.Circuit
}

// GetCircuitOk returns a tuple with the Circuit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1SensorSpec) GetCircuitOk() (*string, bool) {
	if o == nil || o.Circuit == nil {
		return nil, false
	}
	return o.Circuit, true
}

// HasCircuit returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1SensorSpec) HasCircuit() bool {
	if o != nil && o.Circuit != nil {
		return true
	}

	return false
}

// SetCircuit gets a reference to the given string and assigns it to the Circuit field.
func (o *IoArgoprojEventsV1alpha1SensorSpec) SetCircuit(v string) {
	o.Circuit = &v
}

// GetDependencies returns the Dependencies field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1SensorSpec) GetDependencies() []IoArgoprojEventsV1alpha1EventDependency {
	if o == nil || o.Dependencies == nil {
		var ret []IoArgoprojEventsV1alpha1EventDependency
		return ret
	}
	return *o.Dependencies
}

// GetDependenciesOk returns a tuple with the Dependencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1SensorSpec) GetDependenciesOk() (*[]IoArgoprojEventsV1alpha1EventDependency, bool) {
	if o == nil || o.Dependencies == nil {
		return nil, false
	}
	return o.Dependencies, true
}

// HasDependencies returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1SensorSpec) HasDependencies() bool {
	if o != nil && o.Dependencies != nil {
		return true
	}

	return false
}

// SetDependencies gets a reference to the given []IoArgoprojEventsV1alpha1EventDependency and assigns it to the Dependencies field.
func (o *IoArgoprojEventsV1alpha1SensorSpec) SetDependencies(v []IoArgoprojEventsV1alpha1EventDependency) {
	o.Dependencies = &v
}

// GetDependencyGroups returns the DependencyGroups field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1SensorSpec) GetDependencyGroups() []IoArgoprojEventsV1alpha1DependencyGroup {
	if o == nil || o.DependencyGroups == nil {
		var ret []IoArgoprojEventsV1alpha1DependencyGroup
		return ret
	}
	return *o.DependencyGroups
}

// GetDependencyGroupsOk returns a tuple with the DependencyGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1SensorSpec) GetDependencyGroupsOk() (*[]IoArgoprojEventsV1alpha1DependencyGroup, bool) {
	if o == nil || o.DependencyGroups == nil {
		return nil, false
	}
	return o.DependencyGroups, true
}

// HasDependencyGroups returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1SensorSpec) HasDependencyGroups() bool {
	if o != nil && o.DependencyGroups != nil {
		return true
	}

	return false
}

// SetDependencyGroups gets a reference to the given []IoArgoprojEventsV1alpha1DependencyGroup and assigns it to the DependencyGroups field.
func (o *IoArgoprojEventsV1alpha1SensorSpec) SetDependencyGroups(v []IoArgoprojEventsV1alpha1DependencyGroup) {
	o.DependencyGroups = &v
}

// GetErrorOnFailedRound returns the ErrorOnFailedRound field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1SensorSpec) GetErrorOnFailedRound() bool {
	if o == nil || o.ErrorOnFailedRound == nil {
		var ret bool
		return ret
	}
	return *o.ErrorOnFailedRound
}

// GetErrorOnFailedRoundOk returns a tuple with the ErrorOnFailedRound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1SensorSpec) GetErrorOnFailedRoundOk() (*bool, bool) {
	if o == nil || o.ErrorOnFailedRound == nil {
		return nil, false
	}
	return o.ErrorOnFailedRound, true
}

// HasErrorOnFailedRound returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1SensorSpec) HasErrorOnFailedRound() bool {
	if o != nil && o.ErrorOnFailedRound != nil {
		return true
	}

	return false
}

// SetErrorOnFailedRound gets a reference to the given bool and assigns it to the ErrorOnFailedRound field.
func (o *IoArgoprojEventsV1alpha1SensorSpec) SetErrorOnFailedRound(v bool) {
	o.ErrorOnFailedRound = &v
}

// GetEventBusName returns the EventBusName field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1SensorSpec) GetEventBusName() string {
	if o == nil || o.EventBusName == nil {
		var ret string
		return ret
	}
	return *o.EventBusName
}

// GetEventBusNameOk returns a tuple with the EventBusName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1SensorSpec) GetEventBusNameOk() (*string, bool) {
	if o == nil || o.EventBusName == nil {
		return nil, false
	}
	return o.EventBusName, true
}

// HasEventBusName returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1SensorSpec) HasEventBusName() bool {
	if o != nil && o.EventBusName != nil {
		return true
	}

	return false
}

// SetEventBusName gets a reference to the given string and assigns it to the EventBusName field.
func (o *IoArgoprojEventsV1alpha1SensorSpec) SetEventBusName(v string) {
	o.EventBusName = &v
}

// GetReplicas returns the Replicas field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1SensorSpec) GetReplicas() int32 {
	if o == nil || o.Replicas == nil {
		var ret int32
		return ret
	}
	return *o.Replicas
}

// GetReplicasOk returns a tuple with the Replicas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1SensorSpec) GetReplicasOk() (*int32, bool) {
	if o == nil || o.Replicas == nil {
		return nil, false
	}
	return o.Replicas, true
}

// HasReplicas returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1SensorSpec) HasReplicas() bool {
	if o != nil && o.Replicas != nil {
		return true
	}

	return false
}

// SetReplicas gets a reference to the given int32 and assigns it to the Replicas field.
func (o *IoArgoprojEventsV1alpha1SensorSpec) SetReplicas(v int32) {
	o.Replicas = &v
}

// GetTemplate returns the Template field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1SensorSpec) GetTemplate() IoArgoprojEventsV1alpha1Template {
	if o == nil || o.Template == nil {
		var ret IoArgoprojEventsV1alpha1Template
		return ret
	}
	return *o.Template
}

// GetTemplateOk returns a tuple with the Template field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1SensorSpec) GetTemplateOk() (*IoArgoprojEventsV1alpha1Template, bool) {
	if o == nil || o.Template == nil {
		return nil, false
	}
	return o.Template, true
}

// HasTemplate returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1SensorSpec) HasTemplate() bool {
	if o != nil && o.Template != nil {
		return true
	}

	return false
}

// SetTemplate gets a reference to the given IoArgoprojEventsV1alpha1Template and assigns it to the Template field.
func (o *IoArgoprojEventsV1alpha1SensorSpec) SetTemplate(v IoArgoprojEventsV1alpha1Template) {
	o.Template = &v
}

// GetTriggers returns the Triggers field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1SensorSpec) GetTriggers() []IoArgoprojEventsV1alpha1Trigger {
	if o == nil || o.Triggers == nil {
		var ret []IoArgoprojEventsV1alpha1Trigger
		return ret
	}
	return *o.Triggers
}

// GetTriggersOk returns a tuple with the Triggers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1SensorSpec) GetTriggersOk() (*[]IoArgoprojEventsV1alpha1Trigger, bool) {
	if o == nil || o.Triggers == nil {
		return nil, false
	}
	return o.Triggers, true
}

// HasTriggers returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1SensorSpec) HasTriggers() bool {
	if o != nil && o.Triggers != nil {
		return true
	}

	return false
}

// SetTriggers gets a reference to the given []IoArgoprojEventsV1alpha1Trigger and assigns it to the Triggers field.
func (o *IoArgoprojEventsV1alpha1SensorSpec) SetTriggers(v []IoArgoprojEventsV1alpha1Trigger) {
	o.Triggers = &v
}

func (o IoArgoprojEventsV1alpha1SensorSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Circuit != nil {
		toSerialize["circuit"] = o.Circuit
	}
	if o.Dependencies != nil {
		toSerialize["dependencies"] = o.Dependencies
	}
	if o.DependencyGroups != nil {
		toSerialize["dependencyGroups"] = o.DependencyGroups
	}
	if o.ErrorOnFailedRound != nil {
		toSerialize["errorOnFailedRound"] = o.ErrorOnFailedRound
	}
	if o.EventBusName != nil {
		toSerialize["eventBusName"] = o.EventBusName
	}
	if o.Replicas != nil {
		toSerialize["replicas"] = o.Replicas
	}
	if o.Template != nil {
		toSerialize["template"] = o.Template
	}
	if o.Triggers != nil {
		toSerialize["triggers"] = o.Triggers
	}
	return json.Marshal(toSerialize)
}

type NullableIoArgoprojEventsV1alpha1SensorSpec struct {
	value *IoArgoprojEventsV1alpha1SensorSpec
	isSet bool
}

func (v NullableIoArgoprojEventsV1alpha1SensorSpec) Get() *IoArgoprojEventsV1alpha1SensorSpec {
	return v.value
}

func (v *NullableIoArgoprojEventsV1alpha1SensorSpec) Set(val *IoArgoprojEventsV1alpha1SensorSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableIoArgoprojEventsV1alpha1SensorSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableIoArgoprojEventsV1alpha1SensorSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoArgoprojEventsV1alpha1SensorSpec(val *IoArgoprojEventsV1alpha1SensorSpec) *NullableIoArgoprojEventsV1alpha1SensorSpec {
	return &NullableIoArgoprojEventsV1alpha1SensorSpec{value: val, isSet: true}
}

func (v NullableIoArgoprojEventsV1alpha1SensorSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoArgoprojEventsV1alpha1SensorSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


