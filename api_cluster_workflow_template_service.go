/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"reflect"
)

// Linger please
var (
	_ _context.Context
)

// ClusterWorkflowTemplateServiceApiService ClusterWorkflowTemplateServiceApi service
type ClusterWorkflowTemplateServiceApiService service

type ApiClusterWorkflowTemplateServiceCreateClusterWorkflowTemplateRequest struct {
	ctx _context.Context
	ApiService *ClusterWorkflowTemplateServiceApiService
	body *IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateCreateRequest
}

func (r ApiClusterWorkflowTemplateServiceCreateClusterWorkflowTemplateRequest) Body(body IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateCreateRequest) ApiClusterWorkflowTemplateServiceCreateClusterWorkflowTemplateRequest {
	r.body = &body
	return r
}

func (r ApiClusterWorkflowTemplateServiceCreateClusterWorkflowTemplateRequest) Execute() (IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplate, *_nethttp.Response, error) {
	return r.ApiService.ClusterWorkflowTemplateServiceCreateClusterWorkflowTemplateExecute(r)
}

/*
ClusterWorkflowTemplateServiceCreateClusterWorkflowTemplate Method for ClusterWorkflowTemplateServiceCreateClusterWorkflowTemplate

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiClusterWorkflowTemplateServiceCreateClusterWorkflowTemplateRequest
*/
func (a *ClusterWorkflowTemplateServiceApiService) ClusterWorkflowTemplateServiceCreateClusterWorkflowTemplate(ctx _context.Context) ApiClusterWorkflowTemplateServiceCreateClusterWorkflowTemplateRequest {
	return ApiClusterWorkflowTemplateServiceCreateClusterWorkflowTemplateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplate
func (a *ClusterWorkflowTemplateServiceApiService) ClusterWorkflowTemplateServiceCreateClusterWorkflowTemplateExecute(r ApiClusterWorkflowTemplateServiceCreateClusterWorkflowTemplateRequest) (IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplate, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClusterWorkflowTemplateServiceApiService.ClusterWorkflowTemplateServiceCreateClusterWorkflowTemplate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workflow/argo/api/v1/cluster-workflow-templates"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GrpcGatewayRuntimeError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiClusterWorkflowTemplateServiceDeleteClusterWorkflowTemplateRequest struct {
	ctx _context.Context
	ApiService *ClusterWorkflowTemplateServiceApiService
	name string
	deleteOptionsGracePeriodSeconds *string
	deleteOptionsPreconditionsUid *string
	deleteOptionsPreconditionsResourceVersion *string
	deleteOptionsOrphanDependents *bool
	deleteOptionsPropagationPolicy *string
	deleteOptionsDryRun *[]string
}

// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. +optional.
func (r ApiClusterWorkflowTemplateServiceDeleteClusterWorkflowTemplateRequest) DeleteOptionsGracePeriodSeconds(deleteOptionsGracePeriodSeconds string) ApiClusterWorkflowTemplateServiceDeleteClusterWorkflowTemplateRequest {
	r.deleteOptionsGracePeriodSeconds = &deleteOptionsGracePeriodSeconds
	return r
}
// Specifies the target UID. +optional.
func (r ApiClusterWorkflowTemplateServiceDeleteClusterWorkflowTemplateRequest) DeleteOptionsPreconditionsUid(deleteOptionsPreconditionsUid string) ApiClusterWorkflowTemplateServiceDeleteClusterWorkflowTemplateRequest {
	r.deleteOptionsPreconditionsUid = &deleteOptionsPreconditionsUid
	return r
}
// Specifies the target ResourceVersion +optional.
func (r ApiClusterWorkflowTemplateServiceDeleteClusterWorkflowTemplateRequest) DeleteOptionsPreconditionsResourceVersion(deleteOptionsPreconditionsResourceVersion string) ApiClusterWorkflowTemplateServiceDeleteClusterWorkflowTemplateRequest {
	r.deleteOptionsPreconditionsResourceVersion = &deleteOptionsPreconditionsResourceVersion
	return r
}
// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. +optional.
func (r ApiClusterWorkflowTemplateServiceDeleteClusterWorkflowTemplateRequest) DeleteOptionsOrphanDependents(deleteOptionsOrphanDependents bool) ApiClusterWorkflowTemplateServiceDeleteClusterWorkflowTemplateRequest {
	r.deleteOptionsOrphanDependents = &deleteOptionsOrphanDependents
	return r
}
// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. +optional.
func (r ApiClusterWorkflowTemplateServiceDeleteClusterWorkflowTemplateRequest) DeleteOptionsPropagationPolicy(deleteOptionsPropagationPolicy string) ApiClusterWorkflowTemplateServiceDeleteClusterWorkflowTemplateRequest {
	r.deleteOptionsPropagationPolicy = &deleteOptionsPropagationPolicy
	return r
}
// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed +optional.
func (r ApiClusterWorkflowTemplateServiceDeleteClusterWorkflowTemplateRequest) DeleteOptionsDryRun(deleteOptionsDryRun []string) ApiClusterWorkflowTemplateServiceDeleteClusterWorkflowTemplateRequest {
	r.deleteOptionsDryRun = &deleteOptionsDryRun
	return r
}

func (r ApiClusterWorkflowTemplateServiceDeleteClusterWorkflowTemplateRequest) Execute() (map[string]interface{}, *_nethttp.Response, error) {
	return r.ApiService.ClusterWorkflowTemplateServiceDeleteClusterWorkflowTemplateExecute(r)
}

/*
ClusterWorkflowTemplateServiceDeleteClusterWorkflowTemplate Method for ClusterWorkflowTemplateServiceDeleteClusterWorkflowTemplate

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name
 @return ApiClusterWorkflowTemplateServiceDeleteClusterWorkflowTemplateRequest
*/
func (a *ClusterWorkflowTemplateServiceApiService) ClusterWorkflowTemplateServiceDeleteClusterWorkflowTemplate(ctx _context.Context, name string) ApiClusterWorkflowTemplateServiceDeleteClusterWorkflowTemplateRequest {
	return ApiClusterWorkflowTemplateServiceDeleteClusterWorkflowTemplateRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ClusterWorkflowTemplateServiceApiService) ClusterWorkflowTemplateServiceDeleteClusterWorkflowTemplateExecute(r ApiClusterWorkflowTemplateServiceDeleteClusterWorkflowTemplateRequest) (map[string]interface{}, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClusterWorkflowTemplateServiceApiService.ClusterWorkflowTemplateServiceDeleteClusterWorkflowTemplate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workflow/argo/api/v1/cluster-workflow-templates/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", _neturl.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.deleteOptionsGracePeriodSeconds != nil {
		localVarQueryParams.Add("deleteOptions.gracePeriodSeconds", parameterToString(*r.deleteOptionsGracePeriodSeconds, ""))
	}
	if r.deleteOptionsPreconditionsUid != nil {
		localVarQueryParams.Add("deleteOptions.preconditions.uid", parameterToString(*r.deleteOptionsPreconditionsUid, ""))
	}
	if r.deleteOptionsPreconditionsResourceVersion != nil {
		localVarQueryParams.Add("deleteOptions.preconditions.resourceVersion", parameterToString(*r.deleteOptionsPreconditionsResourceVersion, ""))
	}
	if r.deleteOptionsOrphanDependents != nil {
		localVarQueryParams.Add("deleteOptions.orphanDependents", parameterToString(*r.deleteOptionsOrphanDependents, ""))
	}
	if r.deleteOptionsPropagationPolicy != nil {
		localVarQueryParams.Add("deleteOptions.propagationPolicy", parameterToString(*r.deleteOptionsPropagationPolicy, ""))
	}
	if r.deleteOptionsDryRun != nil {
		t := *r.deleteOptionsDryRun
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("deleteOptions.dryRun", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("deleteOptions.dryRun", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GrpcGatewayRuntimeError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiClusterWorkflowTemplateServiceGetClusterWorkflowTemplateRequest struct {
	ctx _context.Context
	ApiService *ClusterWorkflowTemplateServiceApiService
	name string
	getOptionsResourceVersion *string
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
func (r ApiClusterWorkflowTemplateServiceGetClusterWorkflowTemplateRequest) GetOptionsResourceVersion(getOptionsResourceVersion string) ApiClusterWorkflowTemplateServiceGetClusterWorkflowTemplateRequest {
	r.getOptionsResourceVersion = &getOptionsResourceVersion
	return r
}

func (r ApiClusterWorkflowTemplateServiceGetClusterWorkflowTemplateRequest) Execute() (IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplate, *_nethttp.Response, error) {
	return r.ApiService.ClusterWorkflowTemplateServiceGetClusterWorkflowTemplateExecute(r)
}

/*
ClusterWorkflowTemplateServiceGetClusterWorkflowTemplate Method for ClusterWorkflowTemplateServiceGetClusterWorkflowTemplate

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name
 @return ApiClusterWorkflowTemplateServiceGetClusterWorkflowTemplateRequest
*/
func (a *ClusterWorkflowTemplateServiceApiService) ClusterWorkflowTemplateServiceGetClusterWorkflowTemplate(ctx _context.Context, name string) ApiClusterWorkflowTemplateServiceGetClusterWorkflowTemplateRequest {
	return ApiClusterWorkflowTemplateServiceGetClusterWorkflowTemplateRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplate
func (a *ClusterWorkflowTemplateServiceApiService) ClusterWorkflowTemplateServiceGetClusterWorkflowTemplateExecute(r ApiClusterWorkflowTemplateServiceGetClusterWorkflowTemplateRequest) (IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplate, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClusterWorkflowTemplateServiceApiService.ClusterWorkflowTemplateServiceGetClusterWorkflowTemplate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workflow/argo/api/v1/cluster-workflow-templates/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", _neturl.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.getOptionsResourceVersion != nil {
		localVarQueryParams.Add("getOptions.resourceVersion", parameterToString(*r.getOptionsResourceVersion, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GrpcGatewayRuntimeError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiClusterWorkflowTemplateServiceLintClusterWorkflowTemplateRequest struct {
	ctx _context.Context
	ApiService *ClusterWorkflowTemplateServiceApiService
	body *IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateLintRequest
}

func (r ApiClusterWorkflowTemplateServiceLintClusterWorkflowTemplateRequest) Body(body IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateLintRequest) ApiClusterWorkflowTemplateServiceLintClusterWorkflowTemplateRequest {
	r.body = &body
	return r
}

func (r ApiClusterWorkflowTemplateServiceLintClusterWorkflowTemplateRequest) Execute() (IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplate, *_nethttp.Response, error) {
	return r.ApiService.ClusterWorkflowTemplateServiceLintClusterWorkflowTemplateExecute(r)
}

/*
ClusterWorkflowTemplateServiceLintClusterWorkflowTemplate Method for ClusterWorkflowTemplateServiceLintClusterWorkflowTemplate

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiClusterWorkflowTemplateServiceLintClusterWorkflowTemplateRequest
*/
func (a *ClusterWorkflowTemplateServiceApiService) ClusterWorkflowTemplateServiceLintClusterWorkflowTemplate(ctx _context.Context) ApiClusterWorkflowTemplateServiceLintClusterWorkflowTemplateRequest {
	return ApiClusterWorkflowTemplateServiceLintClusterWorkflowTemplateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplate
func (a *ClusterWorkflowTemplateServiceApiService) ClusterWorkflowTemplateServiceLintClusterWorkflowTemplateExecute(r ApiClusterWorkflowTemplateServiceLintClusterWorkflowTemplateRequest) (IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplate, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClusterWorkflowTemplateServiceApiService.ClusterWorkflowTemplateServiceLintClusterWorkflowTemplate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workflow/argo/api/v1/cluster-workflow-templates/lint"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GrpcGatewayRuntimeError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiClusterWorkflowTemplateServiceListClusterWorkflowTemplatesRequest struct {
	ctx _context.Context
	ApiService *ClusterWorkflowTemplateServiceApiService
	listOptionsLabelSelector *string
	listOptionsFieldSelector *string
	listOptionsWatch *bool
	listOptionsAllowWatchBookmarks *bool
	listOptionsResourceVersion *string
	listOptionsResourceVersionMatch *string
	listOptionsTimeoutSeconds *string
	listOptionsLimit *string
	listOptionsContinue *string
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
func (r ApiClusterWorkflowTemplateServiceListClusterWorkflowTemplatesRequest) ListOptionsLabelSelector(listOptionsLabelSelector string) ApiClusterWorkflowTemplateServiceListClusterWorkflowTemplatesRequest {
	r.listOptionsLabelSelector = &listOptionsLabelSelector
	return r
}
// A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
func (r ApiClusterWorkflowTemplateServiceListClusterWorkflowTemplatesRequest) ListOptionsFieldSelector(listOptionsFieldSelector string) ApiClusterWorkflowTemplateServiceListClusterWorkflowTemplatesRequest {
	r.listOptionsFieldSelector = &listOptionsFieldSelector
	return r
}
// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
func (r ApiClusterWorkflowTemplateServiceListClusterWorkflowTemplatesRequest) ListOptionsWatch(listOptionsWatch bool) ApiClusterWorkflowTemplateServiceListClusterWorkflowTemplatesRequest {
	r.listOptionsWatch = &listOptionsWatch
	return r
}
// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored. +optional.
func (r ApiClusterWorkflowTemplateServiceListClusterWorkflowTemplatesRequest) ListOptionsAllowWatchBookmarks(listOptionsAllowWatchBookmarks bool) ApiClusterWorkflowTemplateServiceListClusterWorkflowTemplatesRequest {
	r.listOptionsAllowWatchBookmarks = &listOptionsAllowWatchBookmarks
	return r
}
// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
func (r ApiClusterWorkflowTemplateServiceListClusterWorkflowTemplatesRequest) ListOptionsResourceVersion(listOptionsResourceVersion string) ApiClusterWorkflowTemplateServiceListClusterWorkflowTemplatesRequest {
	r.listOptionsResourceVersion = &listOptionsResourceVersion
	return r
}
// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
func (r ApiClusterWorkflowTemplateServiceListClusterWorkflowTemplatesRequest) ListOptionsResourceVersionMatch(listOptionsResourceVersionMatch string) ApiClusterWorkflowTemplateServiceListClusterWorkflowTemplatesRequest {
	r.listOptionsResourceVersionMatch = &listOptionsResourceVersionMatch
	return r
}
// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
func (r ApiClusterWorkflowTemplateServiceListClusterWorkflowTemplatesRequest) ListOptionsTimeoutSeconds(listOptionsTimeoutSeconds string) ApiClusterWorkflowTemplateServiceListClusterWorkflowTemplatesRequest {
	r.listOptionsTimeoutSeconds = &listOptionsTimeoutSeconds
	return r
}
// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiClusterWorkflowTemplateServiceListClusterWorkflowTemplatesRequest) ListOptionsLimit(listOptionsLimit string) ApiClusterWorkflowTemplateServiceListClusterWorkflowTemplatesRequest {
	r.listOptionsLimit = &listOptionsLimit
	return r
}
// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiClusterWorkflowTemplateServiceListClusterWorkflowTemplatesRequest) ListOptionsContinue(listOptionsContinue string) ApiClusterWorkflowTemplateServiceListClusterWorkflowTemplatesRequest {
	r.listOptionsContinue = &listOptionsContinue
	return r
}

func (r ApiClusterWorkflowTemplateServiceListClusterWorkflowTemplatesRequest) Execute() (IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateList, *_nethttp.Response, error) {
	return r.ApiService.ClusterWorkflowTemplateServiceListClusterWorkflowTemplatesExecute(r)
}

/*
ClusterWorkflowTemplateServiceListClusterWorkflowTemplates Method for ClusterWorkflowTemplateServiceListClusterWorkflowTemplates

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiClusterWorkflowTemplateServiceListClusterWorkflowTemplatesRequest
*/
func (a *ClusterWorkflowTemplateServiceApiService) ClusterWorkflowTemplateServiceListClusterWorkflowTemplates(ctx _context.Context) ApiClusterWorkflowTemplateServiceListClusterWorkflowTemplatesRequest {
	return ApiClusterWorkflowTemplateServiceListClusterWorkflowTemplatesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateList
func (a *ClusterWorkflowTemplateServiceApiService) ClusterWorkflowTemplateServiceListClusterWorkflowTemplatesExecute(r ApiClusterWorkflowTemplateServiceListClusterWorkflowTemplatesRequest) (IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClusterWorkflowTemplateServiceApiService.ClusterWorkflowTemplateServiceListClusterWorkflowTemplates")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workflow/argo/api/v1/cluster-workflow-templates"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.listOptionsLabelSelector != nil {
		localVarQueryParams.Add("listOptions.labelSelector", parameterToString(*r.listOptionsLabelSelector, ""))
	}
	if r.listOptionsFieldSelector != nil {
		localVarQueryParams.Add("listOptions.fieldSelector", parameterToString(*r.listOptionsFieldSelector, ""))
	}
	if r.listOptionsWatch != nil {
		localVarQueryParams.Add("listOptions.watch", parameterToString(*r.listOptionsWatch, ""))
	}
	if r.listOptionsAllowWatchBookmarks != nil {
		localVarQueryParams.Add("listOptions.allowWatchBookmarks", parameterToString(*r.listOptionsAllowWatchBookmarks, ""))
	}
	if r.listOptionsResourceVersion != nil {
		localVarQueryParams.Add("listOptions.resourceVersion", parameterToString(*r.listOptionsResourceVersion, ""))
	}
	if r.listOptionsResourceVersionMatch != nil {
		localVarQueryParams.Add("listOptions.resourceVersionMatch", parameterToString(*r.listOptionsResourceVersionMatch, ""))
	}
	if r.listOptionsTimeoutSeconds != nil {
		localVarQueryParams.Add("listOptions.timeoutSeconds", parameterToString(*r.listOptionsTimeoutSeconds, ""))
	}
	if r.listOptionsLimit != nil {
		localVarQueryParams.Add("listOptions.limit", parameterToString(*r.listOptionsLimit, ""))
	}
	if r.listOptionsContinue != nil {
		localVarQueryParams.Add("listOptions.continue", parameterToString(*r.listOptionsContinue, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GrpcGatewayRuntimeError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiClusterWorkflowTemplateServiceUpdateClusterWorkflowTemplateRequest struct {
	ctx _context.Context
	ApiService *ClusterWorkflowTemplateServiceApiService
	name string
	body *IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateUpdateRequest
}

func (r ApiClusterWorkflowTemplateServiceUpdateClusterWorkflowTemplateRequest) Body(body IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplateUpdateRequest) ApiClusterWorkflowTemplateServiceUpdateClusterWorkflowTemplateRequest {
	r.body = &body
	return r
}

func (r ApiClusterWorkflowTemplateServiceUpdateClusterWorkflowTemplateRequest) Execute() (IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplate, *_nethttp.Response, error) {
	return r.ApiService.ClusterWorkflowTemplateServiceUpdateClusterWorkflowTemplateExecute(r)
}

/*
ClusterWorkflowTemplateServiceUpdateClusterWorkflowTemplate Method for ClusterWorkflowTemplateServiceUpdateClusterWorkflowTemplate

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name DEPRECATED: This field is ignored.
 @return ApiClusterWorkflowTemplateServiceUpdateClusterWorkflowTemplateRequest
*/
func (a *ClusterWorkflowTemplateServiceApiService) ClusterWorkflowTemplateServiceUpdateClusterWorkflowTemplate(ctx _context.Context, name string) ApiClusterWorkflowTemplateServiceUpdateClusterWorkflowTemplateRequest {
	return ApiClusterWorkflowTemplateServiceUpdateClusterWorkflowTemplateRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplate
func (a *ClusterWorkflowTemplateServiceApiService) ClusterWorkflowTemplateServiceUpdateClusterWorkflowTemplateExecute(r ApiClusterWorkflowTemplateServiceUpdateClusterWorkflowTemplateRequest) (IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplate, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  IoArgoprojWorkflowV1alpha1ClusterWorkflowTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClusterWorkflowTemplateServiceApiService.ClusterWorkflowTemplateServiceUpdateClusterWorkflowTemplate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workflow/argo/api/v1/cluster-workflow-templates/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", _neturl.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GrpcGatewayRuntimeError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
