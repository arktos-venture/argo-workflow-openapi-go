/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IoK8sApiCoreV1EnvVarSource EnvVarSource represents a source for the value of an EnvVar.
type IoK8sApiCoreV1EnvVarSource struct {
	ConfigMapKeyRef *IoK8sApiCoreV1ConfigMapKeySelector `json:"configMapKeyRef,omitempty"`
	FieldRef *IoK8sApiCoreV1ObjectFieldSelector `json:"fieldRef,omitempty"`
	ResourceFieldRef *IoK8sApiCoreV1ResourceFieldSelector `json:"resourceFieldRef,omitempty"`
	SecretKeyRef *IoK8sApiCoreV1SecretKeySelector `json:"secretKeyRef,omitempty"`
}

// NewIoK8sApiCoreV1EnvVarSource instantiates a new IoK8sApiCoreV1EnvVarSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoK8sApiCoreV1EnvVarSource() *IoK8sApiCoreV1EnvVarSource {
	this := IoK8sApiCoreV1EnvVarSource{}
	return &this
}

// NewIoK8sApiCoreV1EnvVarSourceWithDefaults instantiates a new IoK8sApiCoreV1EnvVarSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoK8sApiCoreV1EnvVarSourceWithDefaults() *IoK8sApiCoreV1EnvVarSource {
	this := IoK8sApiCoreV1EnvVarSource{}
	return &this
}

// GetConfigMapKeyRef returns the ConfigMapKeyRef field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1EnvVarSource) GetConfigMapKeyRef() IoK8sApiCoreV1ConfigMapKeySelector {
	if o == nil || o.ConfigMapKeyRef == nil {
		var ret IoK8sApiCoreV1ConfigMapKeySelector
		return ret
	}
	return *o.ConfigMapKeyRef
}

// GetConfigMapKeyRefOk returns a tuple with the ConfigMapKeyRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1EnvVarSource) GetConfigMapKeyRefOk() (*IoK8sApiCoreV1ConfigMapKeySelector, bool) {
	if o == nil || o.ConfigMapKeyRef == nil {
		return nil, false
	}
	return o.ConfigMapKeyRef, true
}

// HasConfigMapKeyRef returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1EnvVarSource) HasConfigMapKeyRef() bool {
	if o != nil && o.ConfigMapKeyRef != nil {
		return true
	}

	return false
}

// SetConfigMapKeyRef gets a reference to the given IoK8sApiCoreV1ConfigMapKeySelector and assigns it to the ConfigMapKeyRef field.
func (o *IoK8sApiCoreV1EnvVarSource) SetConfigMapKeyRef(v IoK8sApiCoreV1ConfigMapKeySelector) {
	o.ConfigMapKeyRef = &v
}

// GetFieldRef returns the FieldRef field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1EnvVarSource) GetFieldRef() IoK8sApiCoreV1ObjectFieldSelector {
	if o == nil || o.FieldRef == nil {
		var ret IoK8sApiCoreV1ObjectFieldSelector
		return ret
	}
	return *o.FieldRef
}

// GetFieldRefOk returns a tuple with the FieldRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1EnvVarSource) GetFieldRefOk() (*IoK8sApiCoreV1ObjectFieldSelector, bool) {
	if o == nil || o.FieldRef == nil {
		return nil, false
	}
	return o.FieldRef, true
}

// HasFieldRef returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1EnvVarSource) HasFieldRef() bool {
	if o != nil && o.FieldRef != nil {
		return true
	}

	return false
}

// SetFieldRef gets a reference to the given IoK8sApiCoreV1ObjectFieldSelector and assigns it to the FieldRef field.
func (o *IoK8sApiCoreV1EnvVarSource) SetFieldRef(v IoK8sApiCoreV1ObjectFieldSelector) {
	o.FieldRef = &v
}

// GetResourceFieldRef returns the ResourceFieldRef field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1EnvVarSource) GetResourceFieldRef() IoK8sApiCoreV1ResourceFieldSelector {
	if o == nil || o.ResourceFieldRef == nil {
		var ret IoK8sApiCoreV1ResourceFieldSelector
		return ret
	}
	return *o.ResourceFieldRef
}

// GetResourceFieldRefOk returns a tuple with the ResourceFieldRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1EnvVarSource) GetResourceFieldRefOk() (*IoK8sApiCoreV1ResourceFieldSelector, bool) {
	if o == nil || o.ResourceFieldRef == nil {
		return nil, false
	}
	return o.ResourceFieldRef, true
}

// HasResourceFieldRef returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1EnvVarSource) HasResourceFieldRef() bool {
	if o != nil && o.ResourceFieldRef != nil {
		return true
	}

	return false
}

// SetResourceFieldRef gets a reference to the given IoK8sApiCoreV1ResourceFieldSelector and assigns it to the ResourceFieldRef field.
func (o *IoK8sApiCoreV1EnvVarSource) SetResourceFieldRef(v IoK8sApiCoreV1ResourceFieldSelector) {
	o.ResourceFieldRef = &v
}

// GetSecretKeyRef returns the SecretKeyRef field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1EnvVarSource) GetSecretKeyRef() IoK8sApiCoreV1SecretKeySelector {
	if o == nil || o.SecretKeyRef == nil {
		var ret IoK8sApiCoreV1SecretKeySelector
		return ret
	}
	return *o.SecretKeyRef
}

// GetSecretKeyRefOk returns a tuple with the SecretKeyRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1EnvVarSource) GetSecretKeyRefOk() (*IoK8sApiCoreV1SecretKeySelector, bool) {
	if o == nil || o.SecretKeyRef == nil {
		return nil, false
	}
	return o.SecretKeyRef, true
}

// HasSecretKeyRef returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1EnvVarSource) HasSecretKeyRef() bool {
	if o != nil && o.SecretKeyRef != nil {
		return true
	}

	return false
}

// SetSecretKeyRef gets a reference to the given IoK8sApiCoreV1SecretKeySelector and assigns it to the SecretKeyRef field.
func (o *IoK8sApiCoreV1EnvVarSource) SetSecretKeyRef(v IoK8sApiCoreV1SecretKeySelector) {
	o.SecretKeyRef = &v
}

func (o IoK8sApiCoreV1EnvVarSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ConfigMapKeyRef != nil {
		toSerialize["configMapKeyRef"] = o.ConfigMapKeyRef
	}
	if o.FieldRef != nil {
		toSerialize["fieldRef"] = o.FieldRef
	}
	if o.ResourceFieldRef != nil {
		toSerialize["resourceFieldRef"] = o.ResourceFieldRef
	}
	if o.SecretKeyRef != nil {
		toSerialize["secretKeyRef"] = o.SecretKeyRef
	}
	return json.Marshal(toSerialize)
}

type NullableIoK8sApiCoreV1EnvVarSource struct {
	value *IoK8sApiCoreV1EnvVarSource
	isSet bool
}

func (v NullableIoK8sApiCoreV1EnvVarSource) Get() *IoK8sApiCoreV1EnvVarSource {
	return v.value
}

func (v *NullableIoK8sApiCoreV1EnvVarSource) Set(val *IoK8sApiCoreV1EnvVarSource) {
	v.value = val
	v.isSet = true
}

func (v NullableIoK8sApiCoreV1EnvVarSource) IsSet() bool {
	return v.isSet
}

func (v *NullableIoK8sApiCoreV1EnvVarSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoK8sApiCoreV1EnvVarSource(val *IoK8sApiCoreV1EnvVarSource) *NullableIoK8sApiCoreV1EnvVarSource {
	return &NullableIoK8sApiCoreV1EnvVarSource{value: val, isSet: true}
}

func (v NullableIoK8sApiCoreV1EnvVarSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoK8sApiCoreV1EnvVarSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


