/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IoK8sApiCoreV1FlockerVolumeSource Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.
type IoK8sApiCoreV1FlockerVolumeSource struct {
	// Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
	DatasetName *string `json:"datasetName,omitempty"`
	// UUID of the dataset. This is unique identifier of a Flocker dataset
	DatasetUUID *string `json:"datasetUUID,omitempty"`
}

// NewIoK8sApiCoreV1FlockerVolumeSource instantiates a new IoK8sApiCoreV1FlockerVolumeSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoK8sApiCoreV1FlockerVolumeSource() *IoK8sApiCoreV1FlockerVolumeSource {
	this := IoK8sApiCoreV1FlockerVolumeSource{}
	return &this
}

// NewIoK8sApiCoreV1FlockerVolumeSourceWithDefaults instantiates a new IoK8sApiCoreV1FlockerVolumeSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoK8sApiCoreV1FlockerVolumeSourceWithDefaults() *IoK8sApiCoreV1FlockerVolumeSource {
	this := IoK8sApiCoreV1FlockerVolumeSource{}
	return &this
}

// GetDatasetName returns the DatasetName field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1FlockerVolumeSource) GetDatasetName() string {
	if o == nil || o.DatasetName == nil {
		var ret string
		return ret
	}
	return *o.DatasetName
}

// GetDatasetNameOk returns a tuple with the DatasetName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1FlockerVolumeSource) GetDatasetNameOk() (*string, bool) {
	if o == nil || o.DatasetName == nil {
		return nil, false
	}
	return o.DatasetName, true
}

// HasDatasetName returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1FlockerVolumeSource) HasDatasetName() bool {
	if o != nil && o.DatasetName != nil {
		return true
	}

	return false
}

// SetDatasetName gets a reference to the given string and assigns it to the DatasetName field.
func (o *IoK8sApiCoreV1FlockerVolumeSource) SetDatasetName(v string) {
	o.DatasetName = &v
}

// GetDatasetUUID returns the DatasetUUID field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1FlockerVolumeSource) GetDatasetUUID() string {
	if o == nil || o.DatasetUUID == nil {
		var ret string
		return ret
	}
	return *o.DatasetUUID
}

// GetDatasetUUIDOk returns a tuple with the DatasetUUID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1FlockerVolumeSource) GetDatasetUUIDOk() (*string, bool) {
	if o == nil || o.DatasetUUID == nil {
		return nil, false
	}
	return o.DatasetUUID, true
}

// HasDatasetUUID returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1FlockerVolumeSource) HasDatasetUUID() bool {
	if o != nil && o.DatasetUUID != nil {
		return true
	}

	return false
}

// SetDatasetUUID gets a reference to the given string and assigns it to the DatasetUUID field.
func (o *IoK8sApiCoreV1FlockerVolumeSource) SetDatasetUUID(v string) {
	o.DatasetUUID = &v
}

func (o IoK8sApiCoreV1FlockerVolumeSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DatasetName != nil {
		toSerialize["datasetName"] = o.DatasetName
	}
	if o.DatasetUUID != nil {
		toSerialize["datasetUUID"] = o.DatasetUUID
	}
	return json.Marshal(toSerialize)
}

type NullableIoK8sApiCoreV1FlockerVolumeSource struct {
	value *IoK8sApiCoreV1FlockerVolumeSource
	isSet bool
}

func (v NullableIoK8sApiCoreV1FlockerVolumeSource) Get() *IoK8sApiCoreV1FlockerVolumeSource {
	return v.value
}

func (v *NullableIoK8sApiCoreV1FlockerVolumeSource) Set(val *IoK8sApiCoreV1FlockerVolumeSource) {
	v.value = val
	v.isSet = true
}

func (v NullableIoK8sApiCoreV1FlockerVolumeSource) IsSet() bool {
	return v.isSet
}

func (v *NullableIoK8sApiCoreV1FlockerVolumeSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoK8sApiCoreV1FlockerVolumeSource(val *IoK8sApiCoreV1FlockerVolumeSource) *NullableIoK8sApiCoreV1FlockerVolumeSource {
	return &NullableIoK8sApiCoreV1FlockerVolumeSource{value: val, isSet: true}
}

func (v NullableIoK8sApiCoreV1FlockerVolumeSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoK8sApiCoreV1FlockerVolumeSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


