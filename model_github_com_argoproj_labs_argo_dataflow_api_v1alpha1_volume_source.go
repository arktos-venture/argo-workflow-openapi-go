/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource struct for GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource
type GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource struct {
	AbstractVolumeSource *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource `json:"abstractVolumeSource,omitempty"`
	Concurrency *int32 `json:"concurrency,omitempty"`
	PollPeriod *IoK8sApimachineryPkgApisMetaV1Duration `json:"pollPeriod,omitempty"`
	ReadOnly *bool `json:"readOnly,omitempty"`
}

// NewGithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource instantiates a new GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource() *GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource {
	this := GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource{}
	return &this
}

// NewGithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSourceWithDefaults instantiates a new GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSourceWithDefaults() *GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource {
	this := GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource{}
	return &this
}

// GetAbstractVolumeSource returns the AbstractVolumeSource field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource) GetAbstractVolumeSource() GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource {
	if o == nil || o.AbstractVolumeSource == nil {
		var ret GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource
		return ret
	}
	return *o.AbstractVolumeSource
}

// GetAbstractVolumeSourceOk returns a tuple with the AbstractVolumeSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource) GetAbstractVolumeSourceOk() (*GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource, bool) {
	if o == nil || o.AbstractVolumeSource == nil {
		return nil, false
	}
	return o.AbstractVolumeSource, true
}

// HasAbstractVolumeSource returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource) HasAbstractVolumeSource() bool {
	if o != nil && o.AbstractVolumeSource != nil {
		return true
	}

	return false
}

// SetAbstractVolumeSource gets a reference to the given GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource and assigns it to the AbstractVolumeSource field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource) SetAbstractVolumeSource(v GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) {
	o.AbstractVolumeSource = &v
}

// GetConcurrency returns the Concurrency field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource) GetConcurrency() int32 {
	if o == nil || o.Concurrency == nil {
		var ret int32
		return ret
	}
	return *o.Concurrency
}

// GetConcurrencyOk returns a tuple with the Concurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource) GetConcurrencyOk() (*int32, bool) {
	if o == nil || o.Concurrency == nil {
		return nil, false
	}
	return o.Concurrency, true
}

// HasConcurrency returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource) HasConcurrency() bool {
	if o != nil && o.Concurrency != nil {
		return true
	}

	return false
}

// SetConcurrency gets a reference to the given int32 and assigns it to the Concurrency field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource) SetConcurrency(v int32) {
	o.Concurrency = &v
}

// GetPollPeriod returns the PollPeriod field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource) GetPollPeriod() IoK8sApimachineryPkgApisMetaV1Duration {
	if o == nil || o.PollPeriod == nil {
		var ret IoK8sApimachineryPkgApisMetaV1Duration
		return ret
	}
	return *o.PollPeriod
}

// GetPollPeriodOk returns a tuple with the PollPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource) GetPollPeriodOk() (*IoK8sApimachineryPkgApisMetaV1Duration, bool) {
	if o == nil || o.PollPeriod == nil {
		return nil, false
	}
	return o.PollPeriod, true
}

// HasPollPeriod returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource) HasPollPeriod() bool {
	if o != nil && o.PollPeriod != nil {
		return true
	}

	return false
}

// SetPollPeriod gets a reference to the given IoK8sApimachineryPkgApisMetaV1Duration and assigns it to the PollPeriod field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource) SetPollPeriod(v IoK8sApimachineryPkgApisMetaV1Duration) {
	o.PollPeriod = &v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource) GetReadOnly() bool {
	if o == nil || o.ReadOnly == nil {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource) GetReadOnlyOk() (*bool, bool) {
	if o == nil || o.ReadOnly == nil {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource) HasReadOnly() bool {
	if o != nil && o.ReadOnly != nil {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

func (o GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AbstractVolumeSource != nil {
		toSerialize["abstractVolumeSource"] = o.AbstractVolumeSource
	}
	if o.Concurrency != nil {
		toSerialize["concurrency"] = o.Concurrency
	}
	if o.PollPeriod != nil {
		toSerialize["pollPeriod"] = o.PollPeriod
	}
	if o.ReadOnly != nil {
		toSerialize["readOnly"] = o.ReadOnly
	}
	return json.Marshal(toSerialize)
}

type NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource struct {
	value *GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource
	isSet bool
}

func (v NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource) Get() *GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource {
	return v.value
}

func (v *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource) Set(val *GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource) {
	v.value = val
	v.isSet = true
}

func (v NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource) IsSet() bool {
	return v.isSet
}

func (v *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource(val *GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource) *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource {
	return &NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource{value: val, isSet: true}
}

func (v NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


