/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// IoK8sApiCoreV1Event Event is a report of an event somewhere in the cluster.
type IoK8sApiCoreV1Event struct {
	// What action was taken/failed regarding to the Regarding object.
	Action *string `json:"action,omitempty"`
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty"`
	// The number of times this event has occurred.
	Count *int32 `json:"count,omitempty"`
	// MicroTime is version of Time with microsecond level precision.
	EventTime *time.Time `json:"eventTime,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	FirstTimestamp *time.Time `json:"firstTimestamp,omitempty"`
	InvolvedObject IoK8sApiCoreV1ObjectReference `json:"involvedObject"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastTimestamp *time.Time `json:"lastTimestamp,omitempty"`
	// A human-readable description of the status of this operation.
	Message *string `json:"message,omitempty"`
	Metadata IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	// This should be a short, machine understandable string that gives the reason for the transition into the object's current status.
	Reason *string `json:"reason,omitempty"`
	Related *IoK8sApiCoreV1ObjectReference `json:"related,omitempty"`
	// Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
	ReportingComponent *string `json:"reportingComponent,omitempty"`
	// ID of the controller instance, e.g. `kubelet-xyzf`.
	ReportingInstance *string `json:"reportingInstance,omitempty"`
	Series *IoK8sApiCoreV1EventSeries `json:"series,omitempty"`
	Source *IoK8sApiCoreV1EventSource `json:"source,omitempty"`
	// Type of this event (Normal, Warning), new types could be added in the future
	Type *string `json:"type,omitempty"`
}

// NewIoK8sApiCoreV1Event instantiates a new IoK8sApiCoreV1Event object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoK8sApiCoreV1Event(involvedObject IoK8sApiCoreV1ObjectReference, metadata IoK8sApimachineryPkgApisMetaV1ObjectMeta) *IoK8sApiCoreV1Event {
	this := IoK8sApiCoreV1Event{}
	this.InvolvedObject = involvedObject
	this.Metadata = metadata
	return &this
}

// NewIoK8sApiCoreV1EventWithDefaults instantiates a new IoK8sApiCoreV1Event object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoK8sApiCoreV1EventWithDefaults() *IoK8sApiCoreV1Event {
	this := IoK8sApiCoreV1Event{}
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1Event) GetAction() string {
	if o == nil || o.Action == nil {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1Event) GetActionOk() (*string, bool) {
	if o == nil || o.Action == nil {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1Event) HasAction() bool {
	if o != nil && o.Action != nil {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *IoK8sApiCoreV1Event) SetAction(v string) {
	o.Action = &v
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1Event) GetApiVersion() string {
	if o == nil || o.ApiVersion == nil {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1Event) GetApiVersionOk() (*string, bool) {
	if o == nil || o.ApiVersion == nil {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1Event) HasApiVersion() bool {
	if o != nil && o.ApiVersion != nil {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *IoK8sApiCoreV1Event) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1Event) GetCount() int32 {
	if o == nil || o.Count == nil {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1Event) GetCountOk() (*int32, bool) {
	if o == nil || o.Count == nil {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1Event) HasCount() bool {
	if o != nil && o.Count != nil {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *IoK8sApiCoreV1Event) SetCount(v int32) {
	o.Count = &v
}

// GetEventTime returns the EventTime field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1Event) GetEventTime() time.Time {
	if o == nil || o.EventTime == nil {
		var ret time.Time
		return ret
	}
	return *o.EventTime
}

// GetEventTimeOk returns a tuple with the EventTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1Event) GetEventTimeOk() (*time.Time, bool) {
	if o == nil || o.EventTime == nil {
		return nil, false
	}
	return o.EventTime, true
}

// HasEventTime returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1Event) HasEventTime() bool {
	if o != nil && o.EventTime != nil {
		return true
	}

	return false
}

// SetEventTime gets a reference to the given time.Time and assigns it to the EventTime field.
func (o *IoK8sApiCoreV1Event) SetEventTime(v time.Time) {
	o.EventTime = &v
}

// GetFirstTimestamp returns the FirstTimestamp field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1Event) GetFirstTimestamp() time.Time {
	if o == nil || o.FirstTimestamp == nil {
		var ret time.Time
		return ret
	}
	return *o.FirstTimestamp
}

// GetFirstTimestampOk returns a tuple with the FirstTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1Event) GetFirstTimestampOk() (*time.Time, bool) {
	if o == nil || o.FirstTimestamp == nil {
		return nil, false
	}
	return o.FirstTimestamp, true
}

// HasFirstTimestamp returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1Event) HasFirstTimestamp() bool {
	if o != nil && o.FirstTimestamp != nil {
		return true
	}

	return false
}

// SetFirstTimestamp gets a reference to the given time.Time and assigns it to the FirstTimestamp field.
func (o *IoK8sApiCoreV1Event) SetFirstTimestamp(v time.Time) {
	o.FirstTimestamp = &v
}

// GetInvolvedObject returns the InvolvedObject field value
func (o *IoK8sApiCoreV1Event) GetInvolvedObject() IoK8sApiCoreV1ObjectReference {
	if o == nil {
		var ret IoK8sApiCoreV1ObjectReference
		return ret
	}

	return o.InvolvedObject
}

// GetInvolvedObjectOk returns a tuple with the InvolvedObject field value
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1Event) GetInvolvedObjectOk() (*IoK8sApiCoreV1ObjectReference, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.InvolvedObject, true
}

// SetInvolvedObject sets field value
func (o *IoK8sApiCoreV1Event) SetInvolvedObject(v IoK8sApiCoreV1ObjectReference) {
	o.InvolvedObject = v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1Event) GetKind() string {
	if o == nil || o.Kind == nil {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1Event) GetKindOk() (*string, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1Event) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *IoK8sApiCoreV1Event) SetKind(v string) {
	o.Kind = &v
}

// GetLastTimestamp returns the LastTimestamp field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1Event) GetLastTimestamp() time.Time {
	if o == nil || o.LastTimestamp == nil {
		var ret time.Time
		return ret
	}
	return *o.LastTimestamp
}

// GetLastTimestampOk returns a tuple with the LastTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1Event) GetLastTimestampOk() (*time.Time, bool) {
	if o == nil || o.LastTimestamp == nil {
		return nil, false
	}
	return o.LastTimestamp, true
}

// HasLastTimestamp returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1Event) HasLastTimestamp() bool {
	if o != nil && o.LastTimestamp != nil {
		return true
	}

	return false
}

// SetLastTimestamp gets a reference to the given time.Time and assigns it to the LastTimestamp field.
func (o *IoK8sApiCoreV1Event) SetLastTimestamp(v time.Time) {
	o.LastTimestamp = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1Event) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1Event) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1Event) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *IoK8sApiCoreV1Event) SetMessage(v string) {
	o.Message = &v
}

// GetMetadata returns the Metadata field value
func (o *IoK8sApiCoreV1Event) GetMetadata() IoK8sApimachineryPkgApisMetaV1ObjectMeta {
	if o == nil {
		var ret IoK8sApimachineryPkgApisMetaV1ObjectMeta
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1Event) GetMetadataOk() (*IoK8sApimachineryPkgApisMetaV1ObjectMeta, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *IoK8sApiCoreV1Event) SetMetadata(v IoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	o.Metadata = v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1Event) GetReason() string {
	if o == nil || o.Reason == nil {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1Event) GetReasonOk() (*string, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1Event) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *IoK8sApiCoreV1Event) SetReason(v string) {
	o.Reason = &v
}

// GetRelated returns the Related field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1Event) GetRelated() IoK8sApiCoreV1ObjectReference {
	if o == nil || o.Related == nil {
		var ret IoK8sApiCoreV1ObjectReference
		return ret
	}
	return *o.Related
}

// GetRelatedOk returns a tuple with the Related field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1Event) GetRelatedOk() (*IoK8sApiCoreV1ObjectReference, bool) {
	if o == nil || o.Related == nil {
		return nil, false
	}
	return o.Related, true
}

// HasRelated returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1Event) HasRelated() bool {
	if o != nil && o.Related != nil {
		return true
	}

	return false
}

// SetRelated gets a reference to the given IoK8sApiCoreV1ObjectReference and assigns it to the Related field.
func (o *IoK8sApiCoreV1Event) SetRelated(v IoK8sApiCoreV1ObjectReference) {
	o.Related = &v
}

// GetReportingComponent returns the ReportingComponent field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1Event) GetReportingComponent() string {
	if o == nil || o.ReportingComponent == nil {
		var ret string
		return ret
	}
	return *o.ReportingComponent
}

// GetReportingComponentOk returns a tuple with the ReportingComponent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1Event) GetReportingComponentOk() (*string, bool) {
	if o == nil || o.ReportingComponent == nil {
		return nil, false
	}
	return o.ReportingComponent, true
}

// HasReportingComponent returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1Event) HasReportingComponent() bool {
	if o != nil && o.ReportingComponent != nil {
		return true
	}

	return false
}

// SetReportingComponent gets a reference to the given string and assigns it to the ReportingComponent field.
func (o *IoK8sApiCoreV1Event) SetReportingComponent(v string) {
	o.ReportingComponent = &v
}

// GetReportingInstance returns the ReportingInstance field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1Event) GetReportingInstance() string {
	if o == nil || o.ReportingInstance == nil {
		var ret string
		return ret
	}
	return *o.ReportingInstance
}

// GetReportingInstanceOk returns a tuple with the ReportingInstance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1Event) GetReportingInstanceOk() (*string, bool) {
	if o == nil || o.ReportingInstance == nil {
		return nil, false
	}
	return o.ReportingInstance, true
}

// HasReportingInstance returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1Event) HasReportingInstance() bool {
	if o != nil && o.ReportingInstance != nil {
		return true
	}

	return false
}

// SetReportingInstance gets a reference to the given string and assigns it to the ReportingInstance field.
func (o *IoK8sApiCoreV1Event) SetReportingInstance(v string) {
	o.ReportingInstance = &v
}

// GetSeries returns the Series field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1Event) GetSeries() IoK8sApiCoreV1EventSeries {
	if o == nil || o.Series == nil {
		var ret IoK8sApiCoreV1EventSeries
		return ret
	}
	return *o.Series
}

// GetSeriesOk returns a tuple with the Series field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1Event) GetSeriesOk() (*IoK8sApiCoreV1EventSeries, bool) {
	if o == nil || o.Series == nil {
		return nil, false
	}
	return o.Series, true
}

// HasSeries returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1Event) HasSeries() bool {
	if o != nil && o.Series != nil {
		return true
	}

	return false
}

// SetSeries gets a reference to the given IoK8sApiCoreV1EventSeries and assigns it to the Series field.
func (o *IoK8sApiCoreV1Event) SetSeries(v IoK8sApiCoreV1EventSeries) {
	o.Series = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1Event) GetSource() IoK8sApiCoreV1EventSource {
	if o == nil || o.Source == nil {
		var ret IoK8sApiCoreV1EventSource
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1Event) GetSourceOk() (*IoK8sApiCoreV1EventSource, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1Event) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given IoK8sApiCoreV1EventSource and assigns it to the Source field.
func (o *IoK8sApiCoreV1Event) SetSource(v IoK8sApiCoreV1EventSource) {
	o.Source = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1Event) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1Event) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1Event) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *IoK8sApiCoreV1Event) SetType(v string) {
	o.Type = &v
}

func (o IoK8sApiCoreV1Event) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Action != nil {
		toSerialize["action"] = o.Action
	}
	if o.ApiVersion != nil {
		toSerialize["apiVersion"] = o.ApiVersion
	}
	if o.Count != nil {
		toSerialize["count"] = o.Count
	}
	if o.EventTime != nil {
		toSerialize["eventTime"] = o.EventTime
	}
	if o.FirstTimestamp != nil {
		toSerialize["firstTimestamp"] = o.FirstTimestamp
	}
	if true {
		toSerialize["involvedObject"] = o.InvolvedObject
	}
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
	if o.LastTimestamp != nil {
		toSerialize["lastTimestamp"] = o.LastTimestamp
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if true {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Reason != nil {
		toSerialize["reason"] = o.Reason
	}
	if o.Related != nil {
		toSerialize["related"] = o.Related
	}
	if o.ReportingComponent != nil {
		toSerialize["reportingComponent"] = o.ReportingComponent
	}
	if o.ReportingInstance != nil {
		toSerialize["reportingInstance"] = o.ReportingInstance
	}
	if o.Series != nil {
		toSerialize["series"] = o.Series
	}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableIoK8sApiCoreV1Event struct {
	value *IoK8sApiCoreV1Event
	isSet bool
}

func (v NullableIoK8sApiCoreV1Event) Get() *IoK8sApiCoreV1Event {
	return v.value
}

func (v *NullableIoK8sApiCoreV1Event) Set(val *IoK8sApiCoreV1Event) {
	v.value = val
	v.isSet = true
}

func (v NullableIoK8sApiCoreV1Event) IsSet() bool {
	return v.isSet
}

func (v *NullableIoK8sApiCoreV1Event) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoK8sApiCoreV1Event(val *IoK8sApiCoreV1Event) *NullableIoK8sApiCoreV1Event {
	return &NullableIoK8sApiCoreV1Event{value: val, isSet: true}
}

func (v NullableIoK8sApiCoreV1Event) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoK8sApiCoreV1Event) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


