/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IoK8sApiCoreV1EmptyDirVolumeSource Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.
type IoK8sApiCoreV1EmptyDirVolumeSource struct {
	// What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	Medium *string `json:"medium,omitempty"`
	// Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.  The serialization format is:  <quantity>        ::= <signedNumber><suffix>   (Note that <suffix> may be empty, from the \"\" case in <decimalSI>.) <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= \"+\" | \"-\" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei   (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html) <decimalSI>       ::= m | \"\" | k | M | G | T | P | E   (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.) <decimalExponent> ::= \"e\" <signedNumber> | \"E\" <signedNumber>  No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.  When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.  Before serializing, Quantity will be put in \"canonical form\". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:   a. No precision is lost   b. No fractional digits will be emitted   c. The exponent (or suffix) is as large as possible. The sign will be omitted unless the number is negative.  Examples:   1.5 will be serialized as \"1500m\"   1.5Gi will be serialized as \"1536Mi\"  Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.  Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)  This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
	SizeLimit *string `json:"sizeLimit,omitempty"`
}

// NewIoK8sApiCoreV1EmptyDirVolumeSource instantiates a new IoK8sApiCoreV1EmptyDirVolumeSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoK8sApiCoreV1EmptyDirVolumeSource() *IoK8sApiCoreV1EmptyDirVolumeSource {
	this := IoK8sApiCoreV1EmptyDirVolumeSource{}
	return &this
}

// NewIoK8sApiCoreV1EmptyDirVolumeSourceWithDefaults instantiates a new IoK8sApiCoreV1EmptyDirVolumeSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoK8sApiCoreV1EmptyDirVolumeSourceWithDefaults() *IoK8sApiCoreV1EmptyDirVolumeSource {
	this := IoK8sApiCoreV1EmptyDirVolumeSource{}
	return &this
}

// GetMedium returns the Medium field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1EmptyDirVolumeSource) GetMedium() string {
	if o == nil || o.Medium == nil {
		var ret string
		return ret
	}
	return *o.Medium
}

// GetMediumOk returns a tuple with the Medium field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1EmptyDirVolumeSource) GetMediumOk() (*string, bool) {
	if o == nil || o.Medium == nil {
		return nil, false
	}
	return o.Medium, true
}

// HasMedium returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1EmptyDirVolumeSource) HasMedium() bool {
	if o != nil && o.Medium != nil {
		return true
	}

	return false
}

// SetMedium gets a reference to the given string and assigns it to the Medium field.
func (o *IoK8sApiCoreV1EmptyDirVolumeSource) SetMedium(v string) {
	o.Medium = &v
}

// GetSizeLimit returns the SizeLimit field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1EmptyDirVolumeSource) GetSizeLimit() string {
	if o == nil || o.SizeLimit == nil {
		var ret string
		return ret
	}
	return *o.SizeLimit
}

// GetSizeLimitOk returns a tuple with the SizeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1EmptyDirVolumeSource) GetSizeLimitOk() (*string, bool) {
	if o == nil || o.SizeLimit == nil {
		return nil, false
	}
	return o.SizeLimit, true
}

// HasSizeLimit returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1EmptyDirVolumeSource) HasSizeLimit() bool {
	if o != nil && o.SizeLimit != nil {
		return true
	}

	return false
}

// SetSizeLimit gets a reference to the given string and assigns it to the SizeLimit field.
func (o *IoK8sApiCoreV1EmptyDirVolumeSource) SetSizeLimit(v string) {
	o.SizeLimit = &v
}

func (o IoK8sApiCoreV1EmptyDirVolumeSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Medium != nil {
		toSerialize["medium"] = o.Medium
	}
	if o.SizeLimit != nil {
		toSerialize["sizeLimit"] = o.SizeLimit
	}
	return json.Marshal(toSerialize)
}

type NullableIoK8sApiCoreV1EmptyDirVolumeSource struct {
	value *IoK8sApiCoreV1EmptyDirVolumeSource
	isSet bool
}

func (v NullableIoK8sApiCoreV1EmptyDirVolumeSource) Get() *IoK8sApiCoreV1EmptyDirVolumeSource {
	return v.value
}

func (v *NullableIoK8sApiCoreV1EmptyDirVolumeSource) Set(val *IoK8sApiCoreV1EmptyDirVolumeSource) {
	v.value = val
	v.isSet = true
}

func (v NullableIoK8sApiCoreV1EmptyDirVolumeSource) IsSet() bool {
	return v.isSet
}

func (v *NullableIoK8sApiCoreV1EmptyDirVolumeSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoK8sApiCoreV1EmptyDirVolumeSource(val *IoK8sApiCoreV1EmptyDirVolumeSource) *NullableIoK8sApiCoreV1EmptyDirVolumeSource {
	return &NullableIoK8sApiCoreV1EmptyDirVolumeSource{value: val, isSet: true}
}

func (v NullableIoK8sApiCoreV1EmptyDirVolumeSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoK8sApiCoreV1EmptyDirVolumeSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


