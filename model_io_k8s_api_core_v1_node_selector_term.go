/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IoK8sApiCoreV1NodeSelectorTerm A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
type IoK8sApiCoreV1NodeSelectorTerm struct {
	// A list of node selector requirements by node's labels.
	MatchExpressions *[]IoK8sApiCoreV1NodeSelectorRequirement `json:"matchExpressions,omitempty"`
	// A list of node selector requirements by node's fields.
	MatchFields *[]IoK8sApiCoreV1NodeSelectorRequirement `json:"matchFields,omitempty"`
}

// NewIoK8sApiCoreV1NodeSelectorTerm instantiates a new IoK8sApiCoreV1NodeSelectorTerm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoK8sApiCoreV1NodeSelectorTerm() *IoK8sApiCoreV1NodeSelectorTerm {
	this := IoK8sApiCoreV1NodeSelectorTerm{}
	return &this
}

// NewIoK8sApiCoreV1NodeSelectorTermWithDefaults instantiates a new IoK8sApiCoreV1NodeSelectorTerm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoK8sApiCoreV1NodeSelectorTermWithDefaults() *IoK8sApiCoreV1NodeSelectorTerm {
	this := IoK8sApiCoreV1NodeSelectorTerm{}
	return &this
}

// GetMatchExpressions returns the MatchExpressions field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1NodeSelectorTerm) GetMatchExpressions() []IoK8sApiCoreV1NodeSelectorRequirement {
	if o == nil || o.MatchExpressions == nil {
		var ret []IoK8sApiCoreV1NodeSelectorRequirement
		return ret
	}
	return *o.MatchExpressions
}

// GetMatchExpressionsOk returns a tuple with the MatchExpressions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1NodeSelectorTerm) GetMatchExpressionsOk() (*[]IoK8sApiCoreV1NodeSelectorRequirement, bool) {
	if o == nil || o.MatchExpressions == nil {
		return nil, false
	}
	return o.MatchExpressions, true
}

// HasMatchExpressions returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1NodeSelectorTerm) HasMatchExpressions() bool {
	if o != nil && o.MatchExpressions != nil {
		return true
	}

	return false
}

// SetMatchExpressions gets a reference to the given []IoK8sApiCoreV1NodeSelectorRequirement and assigns it to the MatchExpressions field.
func (o *IoK8sApiCoreV1NodeSelectorTerm) SetMatchExpressions(v []IoK8sApiCoreV1NodeSelectorRequirement) {
	o.MatchExpressions = &v
}

// GetMatchFields returns the MatchFields field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1NodeSelectorTerm) GetMatchFields() []IoK8sApiCoreV1NodeSelectorRequirement {
	if o == nil || o.MatchFields == nil {
		var ret []IoK8sApiCoreV1NodeSelectorRequirement
		return ret
	}
	return *o.MatchFields
}

// GetMatchFieldsOk returns a tuple with the MatchFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1NodeSelectorTerm) GetMatchFieldsOk() (*[]IoK8sApiCoreV1NodeSelectorRequirement, bool) {
	if o == nil || o.MatchFields == nil {
		return nil, false
	}
	return o.MatchFields, true
}

// HasMatchFields returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1NodeSelectorTerm) HasMatchFields() bool {
	if o != nil && o.MatchFields != nil {
		return true
	}

	return false
}

// SetMatchFields gets a reference to the given []IoK8sApiCoreV1NodeSelectorRequirement and assigns it to the MatchFields field.
func (o *IoK8sApiCoreV1NodeSelectorTerm) SetMatchFields(v []IoK8sApiCoreV1NodeSelectorRequirement) {
	o.MatchFields = &v
}

func (o IoK8sApiCoreV1NodeSelectorTerm) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MatchExpressions != nil {
		toSerialize["matchExpressions"] = o.MatchExpressions
	}
	if o.MatchFields != nil {
		toSerialize["matchFields"] = o.MatchFields
	}
	return json.Marshal(toSerialize)
}

type NullableIoK8sApiCoreV1NodeSelectorTerm struct {
	value *IoK8sApiCoreV1NodeSelectorTerm
	isSet bool
}

func (v NullableIoK8sApiCoreV1NodeSelectorTerm) Get() *IoK8sApiCoreV1NodeSelectorTerm {
	return v.value
}

func (v *NullableIoK8sApiCoreV1NodeSelectorTerm) Set(val *IoK8sApiCoreV1NodeSelectorTerm) {
	v.value = val
	v.isSet = true
}

func (v NullableIoK8sApiCoreV1NodeSelectorTerm) IsSet() bool {
	return v.isSet
}

func (v *NullableIoK8sApiCoreV1NodeSelectorTerm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoK8sApiCoreV1NodeSelectorTerm(val *IoK8sApiCoreV1NodeSelectorTerm) *NullableIoK8sApiCoreV1NodeSelectorTerm {
	return &NullableIoK8sApiCoreV1NodeSelectorTerm{value: val, isSet: true}
}

func (v NullableIoK8sApiCoreV1NodeSelectorTerm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoK8sApiCoreV1NodeSelectorTerm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


