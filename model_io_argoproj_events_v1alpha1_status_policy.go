/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IoArgoprojEventsV1alpha1StatusPolicy struct for IoArgoprojEventsV1alpha1StatusPolicy
type IoArgoprojEventsV1alpha1StatusPolicy struct {
	Allow *[]int32 `json:"allow,omitempty"`
}

// NewIoArgoprojEventsV1alpha1StatusPolicy instantiates a new IoArgoprojEventsV1alpha1StatusPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoArgoprojEventsV1alpha1StatusPolicy() *IoArgoprojEventsV1alpha1StatusPolicy {
	this := IoArgoprojEventsV1alpha1StatusPolicy{}
	return &this
}

// NewIoArgoprojEventsV1alpha1StatusPolicyWithDefaults instantiates a new IoArgoprojEventsV1alpha1StatusPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoArgoprojEventsV1alpha1StatusPolicyWithDefaults() *IoArgoprojEventsV1alpha1StatusPolicy {
	this := IoArgoprojEventsV1alpha1StatusPolicy{}
	return &this
}

// GetAllow returns the Allow field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1StatusPolicy) GetAllow() []int32 {
	if o == nil || o.Allow == nil {
		var ret []int32
		return ret
	}
	return *o.Allow
}

// GetAllowOk returns a tuple with the Allow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1StatusPolicy) GetAllowOk() (*[]int32, bool) {
	if o == nil || o.Allow == nil {
		return nil, false
	}
	return o.Allow, true
}

// HasAllow returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1StatusPolicy) HasAllow() bool {
	if o != nil && o.Allow != nil {
		return true
	}

	return false
}

// SetAllow gets a reference to the given []int32 and assigns it to the Allow field.
func (o *IoArgoprojEventsV1alpha1StatusPolicy) SetAllow(v []int32) {
	o.Allow = &v
}

func (o IoArgoprojEventsV1alpha1StatusPolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Allow != nil {
		toSerialize["allow"] = o.Allow
	}
	return json.Marshal(toSerialize)
}

type NullableIoArgoprojEventsV1alpha1StatusPolicy struct {
	value *IoArgoprojEventsV1alpha1StatusPolicy
	isSet bool
}

func (v NullableIoArgoprojEventsV1alpha1StatusPolicy) Get() *IoArgoprojEventsV1alpha1StatusPolicy {
	return v.value
}

func (v *NullableIoArgoprojEventsV1alpha1StatusPolicy) Set(val *IoArgoprojEventsV1alpha1StatusPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableIoArgoprojEventsV1alpha1StatusPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableIoArgoprojEventsV1alpha1StatusPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoArgoprojEventsV1alpha1StatusPolicy(val *IoArgoprojEventsV1alpha1StatusPolicy) *NullableIoArgoprojEventsV1alpha1StatusPolicy {
	return &NullableIoArgoprojEventsV1alpha1StatusPolicy{value: val, isSet: true}
}

func (v NullableIoArgoprojEventsV1alpha1StatusPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoArgoprojEventsV1alpha1StatusPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


