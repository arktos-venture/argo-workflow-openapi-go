/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IoK8sApiCoreV1RBDVolumeSource Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
type IoK8sApiCoreV1RBDVolumeSource struct {
	// Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
	FsType *string `json:"fsType,omitempty"`
	// The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Image string `json:"image"`
	// Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Keyring *string `json:"keyring,omitempty"`
	// A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Monitors []string `json:"monitors"`
	// The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Pool *string `json:"pool,omitempty"`
	// ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	ReadOnly *bool `json:"readOnly,omitempty"`
	SecretRef *IoK8sApiCoreV1LocalObjectReference `json:"secretRef,omitempty"`
	// The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	User *string `json:"user,omitempty"`
}

// NewIoK8sApiCoreV1RBDVolumeSource instantiates a new IoK8sApiCoreV1RBDVolumeSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoK8sApiCoreV1RBDVolumeSource(image string, monitors []string) *IoK8sApiCoreV1RBDVolumeSource {
	this := IoK8sApiCoreV1RBDVolumeSource{}
	this.Image = image
	this.Monitors = monitors
	return &this
}

// NewIoK8sApiCoreV1RBDVolumeSourceWithDefaults instantiates a new IoK8sApiCoreV1RBDVolumeSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoK8sApiCoreV1RBDVolumeSourceWithDefaults() *IoK8sApiCoreV1RBDVolumeSource {
	this := IoK8sApiCoreV1RBDVolumeSource{}
	return &this
}

// GetFsType returns the FsType field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1RBDVolumeSource) GetFsType() string {
	if o == nil || o.FsType == nil {
		var ret string
		return ret
	}
	return *o.FsType
}

// GetFsTypeOk returns a tuple with the FsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1RBDVolumeSource) GetFsTypeOk() (*string, bool) {
	if o == nil || o.FsType == nil {
		return nil, false
	}
	return o.FsType, true
}

// HasFsType returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1RBDVolumeSource) HasFsType() bool {
	if o != nil && o.FsType != nil {
		return true
	}

	return false
}

// SetFsType gets a reference to the given string and assigns it to the FsType field.
func (o *IoK8sApiCoreV1RBDVolumeSource) SetFsType(v string) {
	o.FsType = &v
}

// GetImage returns the Image field value
func (o *IoK8sApiCoreV1RBDVolumeSource) GetImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1RBDVolumeSource) GetImageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Image, true
}

// SetImage sets field value
func (o *IoK8sApiCoreV1RBDVolumeSource) SetImage(v string) {
	o.Image = v
}

// GetKeyring returns the Keyring field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1RBDVolumeSource) GetKeyring() string {
	if o == nil || o.Keyring == nil {
		var ret string
		return ret
	}
	return *o.Keyring
}

// GetKeyringOk returns a tuple with the Keyring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1RBDVolumeSource) GetKeyringOk() (*string, bool) {
	if o == nil || o.Keyring == nil {
		return nil, false
	}
	return o.Keyring, true
}

// HasKeyring returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1RBDVolumeSource) HasKeyring() bool {
	if o != nil && o.Keyring != nil {
		return true
	}

	return false
}

// SetKeyring gets a reference to the given string and assigns it to the Keyring field.
func (o *IoK8sApiCoreV1RBDVolumeSource) SetKeyring(v string) {
	o.Keyring = &v
}

// GetMonitors returns the Monitors field value
func (o *IoK8sApiCoreV1RBDVolumeSource) GetMonitors() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Monitors
}

// GetMonitorsOk returns a tuple with the Monitors field value
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1RBDVolumeSource) GetMonitorsOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Monitors, true
}

// SetMonitors sets field value
func (o *IoK8sApiCoreV1RBDVolumeSource) SetMonitors(v []string) {
	o.Monitors = v
}

// GetPool returns the Pool field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1RBDVolumeSource) GetPool() string {
	if o == nil || o.Pool == nil {
		var ret string
		return ret
	}
	return *o.Pool
}

// GetPoolOk returns a tuple with the Pool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1RBDVolumeSource) GetPoolOk() (*string, bool) {
	if o == nil || o.Pool == nil {
		return nil, false
	}
	return o.Pool, true
}

// HasPool returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1RBDVolumeSource) HasPool() bool {
	if o != nil && o.Pool != nil {
		return true
	}

	return false
}

// SetPool gets a reference to the given string and assigns it to the Pool field.
func (o *IoK8sApiCoreV1RBDVolumeSource) SetPool(v string) {
	o.Pool = &v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1RBDVolumeSource) GetReadOnly() bool {
	if o == nil || o.ReadOnly == nil {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1RBDVolumeSource) GetReadOnlyOk() (*bool, bool) {
	if o == nil || o.ReadOnly == nil {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1RBDVolumeSource) HasReadOnly() bool {
	if o != nil && o.ReadOnly != nil {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *IoK8sApiCoreV1RBDVolumeSource) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

// GetSecretRef returns the SecretRef field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1RBDVolumeSource) GetSecretRef() IoK8sApiCoreV1LocalObjectReference {
	if o == nil || o.SecretRef == nil {
		var ret IoK8sApiCoreV1LocalObjectReference
		return ret
	}
	return *o.SecretRef
}

// GetSecretRefOk returns a tuple with the SecretRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1RBDVolumeSource) GetSecretRefOk() (*IoK8sApiCoreV1LocalObjectReference, bool) {
	if o == nil || o.SecretRef == nil {
		return nil, false
	}
	return o.SecretRef, true
}

// HasSecretRef returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1RBDVolumeSource) HasSecretRef() bool {
	if o != nil && o.SecretRef != nil {
		return true
	}

	return false
}

// SetSecretRef gets a reference to the given IoK8sApiCoreV1LocalObjectReference and assigns it to the SecretRef field.
func (o *IoK8sApiCoreV1RBDVolumeSource) SetSecretRef(v IoK8sApiCoreV1LocalObjectReference) {
	o.SecretRef = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1RBDVolumeSource) GetUser() string {
	if o == nil || o.User == nil {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1RBDVolumeSource) GetUserOk() (*string, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1RBDVolumeSource) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *IoK8sApiCoreV1RBDVolumeSource) SetUser(v string) {
	o.User = &v
}

func (o IoK8sApiCoreV1RBDVolumeSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FsType != nil {
		toSerialize["fsType"] = o.FsType
	}
	if true {
		toSerialize["image"] = o.Image
	}
	if o.Keyring != nil {
		toSerialize["keyring"] = o.Keyring
	}
	if true {
		toSerialize["monitors"] = o.Monitors
	}
	if o.Pool != nil {
		toSerialize["pool"] = o.Pool
	}
	if o.ReadOnly != nil {
		toSerialize["readOnly"] = o.ReadOnly
	}
	if o.SecretRef != nil {
		toSerialize["secretRef"] = o.SecretRef
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	return json.Marshal(toSerialize)
}

type NullableIoK8sApiCoreV1RBDVolumeSource struct {
	value *IoK8sApiCoreV1RBDVolumeSource
	isSet bool
}

func (v NullableIoK8sApiCoreV1RBDVolumeSource) Get() *IoK8sApiCoreV1RBDVolumeSource {
	return v.value
}

func (v *NullableIoK8sApiCoreV1RBDVolumeSource) Set(val *IoK8sApiCoreV1RBDVolumeSource) {
	v.value = val
	v.isSet = true
}

func (v NullableIoK8sApiCoreV1RBDVolumeSource) IsSet() bool {
	return v.isSet
}

func (v *NullableIoK8sApiCoreV1RBDVolumeSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoK8sApiCoreV1RBDVolumeSource(val *IoK8sApiCoreV1RBDVolumeSource) *NullableIoK8sApiCoreV1RBDVolumeSource {
	return &NullableIoK8sApiCoreV1RBDVolumeSource{value: val, isSet: true}
}

func (v NullableIoK8sApiCoreV1RBDVolumeSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoK8sApiCoreV1RBDVolumeSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


