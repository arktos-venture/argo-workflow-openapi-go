/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// ArtifactServiceApiService ArtifactServiceApi service
type ArtifactServiceApiService service

type ApiArtifactServiceGetInputArtifactRequest struct {
	ctx _context.Context
	ApiService *ArtifactServiceApiService
	namespace string
	name string
	podName string
	artifactName string
}


func (r ApiArtifactServiceGetInputArtifactRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ArtifactServiceGetInputArtifactExecute(r)
}

/*
ArtifactServiceGetInputArtifact Get an input artifact.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace
 @param name
 @param podName
 @param artifactName
 @return ApiArtifactServiceGetInputArtifactRequest
*/
func (a *ArtifactServiceApiService) ArtifactServiceGetInputArtifact(ctx _context.Context, namespace string, name string, podName string, artifactName string) ApiArtifactServiceGetInputArtifactRequest {
	return ApiArtifactServiceGetInputArtifactRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
		name: name,
		podName: podName,
		artifactName: artifactName,
	}
}

// Execute executes the request
func (a *ArtifactServiceApiService) ArtifactServiceGetInputArtifactExecute(r ApiArtifactServiceGetInputArtifactRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ArtifactServiceApiService.ArtifactServiceGetInputArtifact")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/input-artifacts/{namespace}/{name}/{podName}/{artifactName}"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", _neturl.PathEscape(parameterToString(r.namespace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", _neturl.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"podName"+"}", _neturl.PathEscape(parameterToString(r.podName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"artifactName"+"}", _neturl.PathEscape(parameterToString(r.artifactName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GrpcGatewayRuntimeError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiArtifactServiceGetInputArtifactByUIDRequest struct {
	ctx _context.Context
	ApiService *ArtifactServiceApiService
	namespace string
	name string
	podName string
	artifactName string
}


func (r ApiArtifactServiceGetInputArtifactByUIDRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ArtifactServiceGetInputArtifactByUIDExecute(r)
}

/*
ArtifactServiceGetInputArtifactByUID Get an input artifact by UID.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace
 @param name
 @param podName
 @param artifactName
 @return ApiArtifactServiceGetInputArtifactByUIDRequest
*/
func (a *ArtifactServiceApiService) ArtifactServiceGetInputArtifactByUID(ctx _context.Context, namespace string, name string, podName string, artifactName string) ApiArtifactServiceGetInputArtifactByUIDRequest {
	return ApiArtifactServiceGetInputArtifactByUIDRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
		name: name,
		podName: podName,
		artifactName: artifactName,
	}
}

// Execute executes the request
func (a *ArtifactServiceApiService) ArtifactServiceGetInputArtifactByUIDExecute(r ApiArtifactServiceGetInputArtifactByUIDRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ArtifactServiceApiService.ArtifactServiceGetInputArtifactByUID")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/input-artifacts-by-uid/{uid}/{podName}/{artifactName}"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", _neturl.PathEscape(parameterToString(r.namespace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", _neturl.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"podName"+"}", _neturl.PathEscape(parameterToString(r.podName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"artifactName"+"}", _neturl.PathEscape(parameterToString(r.artifactName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GrpcGatewayRuntimeError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiArtifactServiceGetOutputArtifactRequest struct {
	ctx _context.Context
	ApiService *ArtifactServiceApiService
	namespace string
	name string
	podName string
	artifactName string
}


func (r ApiArtifactServiceGetOutputArtifactRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ArtifactServiceGetOutputArtifactExecute(r)
}

/*
ArtifactServiceGetOutputArtifact Get an output artifact.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace
 @param name
 @param podName
 @param artifactName
 @return ApiArtifactServiceGetOutputArtifactRequest
*/
func (a *ArtifactServiceApiService) ArtifactServiceGetOutputArtifact(ctx _context.Context, namespace string, name string, podName string, artifactName string) ApiArtifactServiceGetOutputArtifactRequest {
	return ApiArtifactServiceGetOutputArtifactRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
		name: name,
		podName: podName,
		artifactName: artifactName,
	}
}

// Execute executes the request
func (a *ArtifactServiceApiService) ArtifactServiceGetOutputArtifactExecute(r ApiArtifactServiceGetOutputArtifactRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ArtifactServiceApiService.ArtifactServiceGetOutputArtifact")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/artifacts/{namespace}/{name}/{podName}/{artifactName}"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", _neturl.PathEscape(parameterToString(r.namespace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", _neturl.PathEscape(parameterToString(r.name, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"podName"+"}", _neturl.PathEscape(parameterToString(r.podName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"artifactName"+"}", _neturl.PathEscape(parameterToString(r.artifactName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GrpcGatewayRuntimeError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiArtifactServiceGetOutputArtifactByUIDRequest struct {
	ctx _context.Context
	ApiService *ArtifactServiceApiService
	uid string
	podName string
	artifactName string
}


func (r ApiArtifactServiceGetOutputArtifactByUIDRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ArtifactServiceGetOutputArtifactByUIDExecute(r)
}

/*
ArtifactServiceGetOutputArtifactByUID Get an output artifact by UID.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uid
 @param podName
 @param artifactName
 @return ApiArtifactServiceGetOutputArtifactByUIDRequest
*/
func (a *ArtifactServiceApiService) ArtifactServiceGetOutputArtifactByUID(ctx _context.Context, uid string, podName string, artifactName string) ApiArtifactServiceGetOutputArtifactByUIDRequest {
	return ApiArtifactServiceGetOutputArtifactByUIDRequest{
		ApiService: a,
		ctx: ctx,
		uid: uid,
		podName: podName,
		artifactName: artifactName,
	}
}

// Execute executes the request
func (a *ArtifactServiceApiService) ArtifactServiceGetOutputArtifactByUIDExecute(r ApiArtifactServiceGetOutputArtifactByUIDRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ArtifactServiceApiService.ArtifactServiceGetOutputArtifactByUID")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/artifacts-by-uid/{uid}/{podName}/{artifactName}"
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", _neturl.PathEscape(parameterToString(r.uid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"podName"+"}", _neturl.PathEscape(parameterToString(r.podName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"artifactName"+"}", _neturl.PathEscape(parameterToString(r.artifactName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GrpcGatewayRuntimeError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
