/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IoArgoprojEventsV1alpha1GitlabEventSource struct for IoArgoprojEventsV1alpha1GitlabEventSource
type IoArgoprojEventsV1alpha1GitlabEventSource struct {
	AccessToken *IoK8sApiCoreV1SecretKeySelector `json:"accessToken,omitempty"`
	DeleteHookOnFinish *bool `json:"deleteHookOnFinish,omitempty"`
	EnableSSLVerification *bool `json:"enableSSLVerification,omitempty"`
	// Events are gitlab event to listen to. Refer https://github.com/xanzy/go-gitlab/blob/bf34eca5d13a9f4c3f501d8a97b8ac226d55e4d9/projects.go#L794.
	Events *[]string `json:"events,omitempty"`
	GitlabBaseURL *string `json:"gitlabBaseURL,omitempty"`
	Metadata *map[string]string `json:"metadata,omitempty"`
	ProjectID *string `json:"projectID,omitempty"`
	Webhook *IoArgoprojEventsV1alpha1WebhookContext `json:"webhook,omitempty"`
}

// NewIoArgoprojEventsV1alpha1GitlabEventSource instantiates a new IoArgoprojEventsV1alpha1GitlabEventSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoArgoprojEventsV1alpha1GitlabEventSource() *IoArgoprojEventsV1alpha1GitlabEventSource {
	this := IoArgoprojEventsV1alpha1GitlabEventSource{}
	return &this
}

// NewIoArgoprojEventsV1alpha1GitlabEventSourceWithDefaults instantiates a new IoArgoprojEventsV1alpha1GitlabEventSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoArgoprojEventsV1alpha1GitlabEventSourceWithDefaults() *IoArgoprojEventsV1alpha1GitlabEventSource {
	this := IoArgoprojEventsV1alpha1GitlabEventSource{}
	return &this
}

// GetAccessToken returns the AccessToken field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1GitlabEventSource) GetAccessToken() IoK8sApiCoreV1SecretKeySelector {
	if o == nil || o.AccessToken == nil {
		var ret IoK8sApiCoreV1SecretKeySelector
		return ret
	}
	return *o.AccessToken
}

// GetAccessTokenOk returns a tuple with the AccessToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1GitlabEventSource) GetAccessTokenOk() (*IoK8sApiCoreV1SecretKeySelector, bool) {
	if o == nil || o.AccessToken == nil {
		return nil, false
	}
	return o.AccessToken, true
}

// HasAccessToken returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1GitlabEventSource) HasAccessToken() bool {
	if o != nil && o.AccessToken != nil {
		return true
	}

	return false
}

// SetAccessToken gets a reference to the given IoK8sApiCoreV1SecretKeySelector and assigns it to the AccessToken field.
func (o *IoArgoprojEventsV1alpha1GitlabEventSource) SetAccessToken(v IoK8sApiCoreV1SecretKeySelector) {
	o.AccessToken = &v
}

// GetDeleteHookOnFinish returns the DeleteHookOnFinish field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1GitlabEventSource) GetDeleteHookOnFinish() bool {
	if o == nil || o.DeleteHookOnFinish == nil {
		var ret bool
		return ret
	}
	return *o.DeleteHookOnFinish
}

// GetDeleteHookOnFinishOk returns a tuple with the DeleteHookOnFinish field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1GitlabEventSource) GetDeleteHookOnFinishOk() (*bool, bool) {
	if o == nil || o.DeleteHookOnFinish == nil {
		return nil, false
	}
	return o.DeleteHookOnFinish, true
}

// HasDeleteHookOnFinish returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1GitlabEventSource) HasDeleteHookOnFinish() bool {
	if o != nil && o.DeleteHookOnFinish != nil {
		return true
	}

	return false
}

// SetDeleteHookOnFinish gets a reference to the given bool and assigns it to the DeleteHookOnFinish field.
func (o *IoArgoprojEventsV1alpha1GitlabEventSource) SetDeleteHookOnFinish(v bool) {
	o.DeleteHookOnFinish = &v
}

// GetEnableSSLVerification returns the EnableSSLVerification field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1GitlabEventSource) GetEnableSSLVerification() bool {
	if o == nil || o.EnableSSLVerification == nil {
		var ret bool
		return ret
	}
	return *o.EnableSSLVerification
}

// GetEnableSSLVerificationOk returns a tuple with the EnableSSLVerification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1GitlabEventSource) GetEnableSSLVerificationOk() (*bool, bool) {
	if o == nil || o.EnableSSLVerification == nil {
		return nil, false
	}
	return o.EnableSSLVerification, true
}

// HasEnableSSLVerification returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1GitlabEventSource) HasEnableSSLVerification() bool {
	if o != nil && o.EnableSSLVerification != nil {
		return true
	}

	return false
}

// SetEnableSSLVerification gets a reference to the given bool and assigns it to the EnableSSLVerification field.
func (o *IoArgoprojEventsV1alpha1GitlabEventSource) SetEnableSSLVerification(v bool) {
	o.EnableSSLVerification = &v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1GitlabEventSource) GetEvents() []string {
	if o == nil || o.Events == nil {
		var ret []string
		return ret
	}
	return *o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1GitlabEventSource) GetEventsOk() (*[]string, bool) {
	if o == nil || o.Events == nil {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1GitlabEventSource) HasEvents() bool {
	if o != nil && o.Events != nil {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []string and assigns it to the Events field.
func (o *IoArgoprojEventsV1alpha1GitlabEventSource) SetEvents(v []string) {
	o.Events = &v
}

// GetGitlabBaseURL returns the GitlabBaseURL field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1GitlabEventSource) GetGitlabBaseURL() string {
	if o == nil || o.GitlabBaseURL == nil {
		var ret string
		return ret
	}
	return *o.GitlabBaseURL
}

// GetGitlabBaseURLOk returns a tuple with the GitlabBaseURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1GitlabEventSource) GetGitlabBaseURLOk() (*string, bool) {
	if o == nil || o.GitlabBaseURL == nil {
		return nil, false
	}
	return o.GitlabBaseURL, true
}

// HasGitlabBaseURL returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1GitlabEventSource) HasGitlabBaseURL() bool {
	if o != nil && o.GitlabBaseURL != nil {
		return true
	}

	return false
}

// SetGitlabBaseURL gets a reference to the given string and assigns it to the GitlabBaseURL field.
func (o *IoArgoprojEventsV1alpha1GitlabEventSource) SetGitlabBaseURL(v string) {
	o.GitlabBaseURL = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1GitlabEventSource) GetMetadata() map[string]string {
	if o == nil || o.Metadata == nil {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1GitlabEventSource) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1GitlabEventSource) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *IoArgoprojEventsV1alpha1GitlabEventSource) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

// GetProjectID returns the ProjectID field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1GitlabEventSource) GetProjectID() string {
	if o == nil || o.ProjectID == nil {
		var ret string
		return ret
	}
	return *o.ProjectID
}

// GetProjectIDOk returns a tuple with the ProjectID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1GitlabEventSource) GetProjectIDOk() (*string, bool) {
	if o == nil || o.ProjectID == nil {
		return nil, false
	}
	return o.ProjectID, true
}

// HasProjectID returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1GitlabEventSource) HasProjectID() bool {
	if o != nil && o.ProjectID != nil {
		return true
	}

	return false
}

// SetProjectID gets a reference to the given string and assigns it to the ProjectID field.
func (o *IoArgoprojEventsV1alpha1GitlabEventSource) SetProjectID(v string) {
	o.ProjectID = &v
}

// GetWebhook returns the Webhook field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1GitlabEventSource) GetWebhook() IoArgoprojEventsV1alpha1WebhookContext {
	if o == nil || o.Webhook == nil {
		var ret IoArgoprojEventsV1alpha1WebhookContext
		return ret
	}
	return *o.Webhook
}

// GetWebhookOk returns a tuple with the Webhook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1GitlabEventSource) GetWebhookOk() (*IoArgoprojEventsV1alpha1WebhookContext, bool) {
	if o == nil || o.Webhook == nil {
		return nil, false
	}
	return o.Webhook, true
}

// HasWebhook returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1GitlabEventSource) HasWebhook() bool {
	if o != nil && o.Webhook != nil {
		return true
	}

	return false
}

// SetWebhook gets a reference to the given IoArgoprojEventsV1alpha1WebhookContext and assigns it to the Webhook field.
func (o *IoArgoprojEventsV1alpha1GitlabEventSource) SetWebhook(v IoArgoprojEventsV1alpha1WebhookContext) {
	o.Webhook = &v
}

func (o IoArgoprojEventsV1alpha1GitlabEventSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccessToken != nil {
		toSerialize["accessToken"] = o.AccessToken
	}
	if o.DeleteHookOnFinish != nil {
		toSerialize["deleteHookOnFinish"] = o.DeleteHookOnFinish
	}
	if o.EnableSSLVerification != nil {
		toSerialize["enableSSLVerification"] = o.EnableSSLVerification
	}
	if o.Events != nil {
		toSerialize["events"] = o.Events
	}
	if o.GitlabBaseURL != nil {
		toSerialize["gitlabBaseURL"] = o.GitlabBaseURL
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.ProjectID != nil {
		toSerialize["projectID"] = o.ProjectID
	}
	if o.Webhook != nil {
		toSerialize["webhook"] = o.Webhook
	}
	return json.Marshal(toSerialize)
}

type NullableIoArgoprojEventsV1alpha1GitlabEventSource struct {
	value *IoArgoprojEventsV1alpha1GitlabEventSource
	isSet bool
}

func (v NullableIoArgoprojEventsV1alpha1GitlabEventSource) Get() *IoArgoprojEventsV1alpha1GitlabEventSource {
	return v.value
}

func (v *NullableIoArgoprojEventsV1alpha1GitlabEventSource) Set(val *IoArgoprojEventsV1alpha1GitlabEventSource) {
	v.value = val
	v.isSet = true
}

func (v NullableIoArgoprojEventsV1alpha1GitlabEventSource) IsSet() bool {
	return v.isSet
}

func (v *NullableIoArgoprojEventsV1alpha1GitlabEventSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoArgoprojEventsV1alpha1GitlabEventSource(val *IoArgoprojEventsV1alpha1GitlabEventSource) *NullableIoArgoprojEventsV1alpha1GitlabEventSource {
	return &NullableIoArgoprojEventsV1alpha1GitlabEventSource{value: val, isSet: true}
}

func (v NullableIoArgoprojEventsV1alpha1GitlabEventSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoArgoprojEventsV1alpha1GitlabEventSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


