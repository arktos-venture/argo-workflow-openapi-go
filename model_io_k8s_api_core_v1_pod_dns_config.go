/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IoK8sApiCoreV1PodDNSConfig PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.
type IoK8sApiCoreV1PodDNSConfig struct {
	// A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
	Nameservers *[]string `json:"nameservers,omitempty"`
	// A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
	Options *[]IoK8sApiCoreV1PodDNSConfigOption `json:"options,omitempty"`
	// A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
	Searches *[]string `json:"searches,omitempty"`
}

// NewIoK8sApiCoreV1PodDNSConfig instantiates a new IoK8sApiCoreV1PodDNSConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoK8sApiCoreV1PodDNSConfig() *IoK8sApiCoreV1PodDNSConfig {
	this := IoK8sApiCoreV1PodDNSConfig{}
	return &this
}

// NewIoK8sApiCoreV1PodDNSConfigWithDefaults instantiates a new IoK8sApiCoreV1PodDNSConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoK8sApiCoreV1PodDNSConfigWithDefaults() *IoK8sApiCoreV1PodDNSConfig {
	this := IoK8sApiCoreV1PodDNSConfig{}
	return &this
}

// GetNameservers returns the Nameservers field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1PodDNSConfig) GetNameservers() []string {
	if o == nil || o.Nameservers == nil {
		var ret []string
		return ret
	}
	return *o.Nameservers
}

// GetNameserversOk returns a tuple with the Nameservers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1PodDNSConfig) GetNameserversOk() (*[]string, bool) {
	if o == nil || o.Nameservers == nil {
		return nil, false
	}
	return o.Nameservers, true
}

// HasNameservers returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1PodDNSConfig) HasNameservers() bool {
	if o != nil && o.Nameservers != nil {
		return true
	}

	return false
}

// SetNameservers gets a reference to the given []string and assigns it to the Nameservers field.
func (o *IoK8sApiCoreV1PodDNSConfig) SetNameservers(v []string) {
	o.Nameservers = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1PodDNSConfig) GetOptions() []IoK8sApiCoreV1PodDNSConfigOption {
	if o == nil || o.Options == nil {
		var ret []IoK8sApiCoreV1PodDNSConfigOption
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1PodDNSConfig) GetOptionsOk() (*[]IoK8sApiCoreV1PodDNSConfigOption, bool) {
	if o == nil || o.Options == nil {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1PodDNSConfig) HasOptions() bool {
	if o != nil && o.Options != nil {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []IoK8sApiCoreV1PodDNSConfigOption and assigns it to the Options field.
func (o *IoK8sApiCoreV1PodDNSConfig) SetOptions(v []IoK8sApiCoreV1PodDNSConfigOption) {
	o.Options = &v
}

// GetSearches returns the Searches field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1PodDNSConfig) GetSearches() []string {
	if o == nil || o.Searches == nil {
		var ret []string
		return ret
	}
	return *o.Searches
}

// GetSearchesOk returns a tuple with the Searches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1PodDNSConfig) GetSearchesOk() (*[]string, bool) {
	if o == nil || o.Searches == nil {
		return nil, false
	}
	return o.Searches, true
}

// HasSearches returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1PodDNSConfig) HasSearches() bool {
	if o != nil && o.Searches != nil {
		return true
	}

	return false
}

// SetSearches gets a reference to the given []string and assigns it to the Searches field.
func (o *IoK8sApiCoreV1PodDNSConfig) SetSearches(v []string) {
	o.Searches = &v
}

func (o IoK8sApiCoreV1PodDNSConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Nameservers != nil {
		toSerialize["nameservers"] = o.Nameservers
	}
	if o.Options != nil {
		toSerialize["options"] = o.Options
	}
	if o.Searches != nil {
		toSerialize["searches"] = o.Searches
	}
	return json.Marshal(toSerialize)
}

type NullableIoK8sApiCoreV1PodDNSConfig struct {
	value *IoK8sApiCoreV1PodDNSConfig
	isSet bool
}

func (v NullableIoK8sApiCoreV1PodDNSConfig) Get() *IoK8sApiCoreV1PodDNSConfig {
	return v.value
}

func (v *NullableIoK8sApiCoreV1PodDNSConfig) Set(val *IoK8sApiCoreV1PodDNSConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableIoK8sApiCoreV1PodDNSConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableIoK8sApiCoreV1PodDNSConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoK8sApiCoreV1PodDNSConfig(val *IoK8sApiCoreV1PodDNSConfig) *NullableIoK8sApiCoreV1PodDNSConfig {
	return &NullableIoK8sApiCoreV1PodDNSConfig{value: val, isSet: true}
}

func (v NullableIoK8sApiCoreV1PodDNSConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoK8sApiCoreV1PodDNSConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


