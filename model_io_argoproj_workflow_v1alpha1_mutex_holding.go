/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IoArgoprojWorkflowV1alpha1MutexHolding MutexHolding describes the mutex and the object which is holding it.
type IoArgoprojWorkflowV1alpha1MutexHolding struct {
	// Holder is a reference to the object which holds the Mutex. Holding Scenario:   1. Current workflow's NodeID which is holding the lock.      e.g: ${NodeID} Waiting Scenario:   1. Current workflow or other workflow NodeID which is holding the lock.      e.g: ${WorkflowName}/${NodeID}
	Holder *string `json:"holder,omitempty"`
	// Reference for the mutex e.g: ${namespace}/mutex/${mutexName}
	Mutex *string `json:"mutex,omitempty"`
}

// NewIoArgoprojWorkflowV1alpha1MutexHolding instantiates a new IoArgoprojWorkflowV1alpha1MutexHolding object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoArgoprojWorkflowV1alpha1MutexHolding() *IoArgoprojWorkflowV1alpha1MutexHolding {
	this := IoArgoprojWorkflowV1alpha1MutexHolding{}
	return &this
}

// NewIoArgoprojWorkflowV1alpha1MutexHoldingWithDefaults instantiates a new IoArgoprojWorkflowV1alpha1MutexHolding object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoArgoprojWorkflowV1alpha1MutexHoldingWithDefaults() *IoArgoprojWorkflowV1alpha1MutexHolding {
	this := IoArgoprojWorkflowV1alpha1MutexHolding{}
	return &this
}

// GetHolder returns the Holder field value if set, zero value otherwise.
func (o *IoArgoprojWorkflowV1alpha1MutexHolding) GetHolder() string {
	if o == nil || o.Holder == nil {
		var ret string
		return ret
	}
	return *o.Holder
}

// GetHolderOk returns a tuple with the Holder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojWorkflowV1alpha1MutexHolding) GetHolderOk() (*string, bool) {
	if o == nil || o.Holder == nil {
		return nil, false
	}
	return o.Holder, true
}

// HasHolder returns a boolean if a field has been set.
func (o *IoArgoprojWorkflowV1alpha1MutexHolding) HasHolder() bool {
	if o != nil && o.Holder != nil {
		return true
	}

	return false
}

// SetHolder gets a reference to the given string and assigns it to the Holder field.
func (o *IoArgoprojWorkflowV1alpha1MutexHolding) SetHolder(v string) {
	o.Holder = &v
}

// GetMutex returns the Mutex field value if set, zero value otherwise.
func (o *IoArgoprojWorkflowV1alpha1MutexHolding) GetMutex() string {
	if o == nil || o.Mutex == nil {
		var ret string
		return ret
	}
	return *o.Mutex
}

// GetMutexOk returns a tuple with the Mutex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojWorkflowV1alpha1MutexHolding) GetMutexOk() (*string, bool) {
	if o == nil || o.Mutex == nil {
		return nil, false
	}
	return o.Mutex, true
}

// HasMutex returns a boolean if a field has been set.
func (o *IoArgoprojWorkflowV1alpha1MutexHolding) HasMutex() bool {
	if o != nil && o.Mutex != nil {
		return true
	}

	return false
}

// SetMutex gets a reference to the given string and assigns it to the Mutex field.
func (o *IoArgoprojWorkflowV1alpha1MutexHolding) SetMutex(v string) {
	o.Mutex = &v
}

func (o IoArgoprojWorkflowV1alpha1MutexHolding) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Holder != nil {
		toSerialize["holder"] = o.Holder
	}
	if o.Mutex != nil {
		toSerialize["mutex"] = o.Mutex
	}
	return json.Marshal(toSerialize)
}

type NullableIoArgoprojWorkflowV1alpha1MutexHolding struct {
	value *IoArgoprojWorkflowV1alpha1MutexHolding
	isSet bool
}

func (v NullableIoArgoprojWorkflowV1alpha1MutexHolding) Get() *IoArgoprojWorkflowV1alpha1MutexHolding {
	return v.value
}

func (v *NullableIoArgoprojWorkflowV1alpha1MutexHolding) Set(val *IoArgoprojWorkflowV1alpha1MutexHolding) {
	v.value = val
	v.isSet = true
}

func (v NullableIoArgoprojWorkflowV1alpha1MutexHolding) IsSet() bool {
	return v.isSet
}

func (v *NullableIoArgoprojWorkflowV1alpha1MutexHolding) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoArgoprojWorkflowV1alpha1MutexHolding(val *IoArgoprojWorkflowV1alpha1MutexHolding) *NullableIoArgoprojWorkflowV1alpha1MutexHolding {
	return &NullableIoArgoprojWorkflowV1alpha1MutexHolding{value: val, isSet: true}
}

func (v NullableIoArgoprojWorkflowV1alpha1MutexHolding) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoArgoprojWorkflowV1alpha1MutexHolding) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


