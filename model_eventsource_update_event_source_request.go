/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EventsourceUpdateEventSourceRequest struct for EventsourceUpdateEventSourceRequest
type EventsourceUpdateEventSourceRequest struct {
	EventSource *IoArgoprojEventsV1alpha1EventSource `json:"eventSource,omitempty"`
	Name *string `json:"name,omitempty"`
	Namespace *string `json:"namespace,omitempty"`
}

// NewEventsourceUpdateEventSourceRequest instantiates a new EventsourceUpdateEventSourceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventsourceUpdateEventSourceRequest() *EventsourceUpdateEventSourceRequest {
	this := EventsourceUpdateEventSourceRequest{}
	return &this
}

// NewEventsourceUpdateEventSourceRequestWithDefaults instantiates a new EventsourceUpdateEventSourceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventsourceUpdateEventSourceRequestWithDefaults() *EventsourceUpdateEventSourceRequest {
	this := EventsourceUpdateEventSourceRequest{}
	return &this
}

// GetEventSource returns the EventSource field value if set, zero value otherwise.
func (o *EventsourceUpdateEventSourceRequest) GetEventSource() IoArgoprojEventsV1alpha1EventSource {
	if o == nil || o.EventSource == nil {
		var ret IoArgoprojEventsV1alpha1EventSource
		return ret
	}
	return *o.EventSource
}

// GetEventSourceOk returns a tuple with the EventSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsourceUpdateEventSourceRequest) GetEventSourceOk() (*IoArgoprojEventsV1alpha1EventSource, bool) {
	if o == nil || o.EventSource == nil {
		return nil, false
	}
	return o.EventSource, true
}

// HasEventSource returns a boolean if a field has been set.
func (o *EventsourceUpdateEventSourceRequest) HasEventSource() bool {
	if o != nil && o.EventSource != nil {
		return true
	}

	return false
}

// SetEventSource gets a reference to the given IoArgoprojEventsV1alpha1EventSource and assigns it to the EventSource field.
func (o *EventsourceUpdateEventSourceRequest) SetEventSource(v IoArgoprojEventsV1alpha1EventSource) {
	o.EventSource = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EventsourceUpdateEventSourceRequest) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsourceUpdateEventSourceRequest) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EventsourceUpdateEventSourceRequest) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EventsourceUpdateEventSourceRequest) SetName(v string) {
	o.Name = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *EventsourceUpdateEventSourceRequest) GetNamespace() string {
	if o == nil || o.Namespace == nil {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsourceUpdateEventSourceRequest) GetNamespaceOk() (*string, bool) {
	if o == nil || o.Namespace == nil {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *EventsourceUpdateEventSourceRequest) HasNamespace() bool {
	if o != nil && o.Namespace != nil {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *EventsourceUpdateEventSourceRequest) SetNamespace(v string) {
	o.Namespace = &v
}

func (o EventsourceUpdateEventSourceRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EventSource != nil {
		toSerialize["eventSource"] = o.EventSource
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Namespace != nil {
		toSerialize["namespace"] = o.Namespace
	}
	return json.Marshal(toSerialize)
}

type NullableEventsourceUpdateEventSourceRequest struct {
	value *EventsourceUpdateEventSourceRequest
	isSet bool
}

func (v NullableEventsourceUpdateEventSourceRequest) Get() *EventsourceUpdateEventSourceRequest {
	return v.value
}

func (v *NullableEventsourceUpdateEventSourceRequest) Set(val *EventsourceUpdateEventSourceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEventsourceUpdateEventSourceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEventsourceUpdateEventSourceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventsourceUpdateEventSourceRequest(val *EventsourceUpdateEventSourceRequest) *NullableEventsourceUpdateEventSourceRequest {
	return &NullableEventsourceUpdateEventSourceRequest{value: val, isSet: true}
}

func (v NullableEventsourceUpdateEventSourceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventsourceUpdateEventSourceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


