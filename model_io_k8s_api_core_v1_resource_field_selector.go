/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IoK8sApiCoreV1ResourceFieldSelector ResourceFieldSelector represents container resources (cpu, memory) and their output format
type IoK8sApiCoreV1ResourceFieldSelector struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `json:"containerName,omitempty"`
	// Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.  The serialization format is:  <quantity>        ::= <signedNumber><suffix>   (Note that <suffix> may be empty, from the \"\" case in <decimalSI>.) <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= \"+\" | \"-\" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei   (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html) <decimalSI>       ::= m | \"\" | k | M | G | T | P | E   (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.) <decimalExponent> ::= \"e\" <signedNumber> | \"E\" <signedNumber>  No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.  When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.  Before serializing, Quantity will be put in \"canonical form\". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:   a. No precision is lost   b. No fractional digits will be emitted   c. The exponent (or suffix) is as large as possible. The sign will be omitted unless the number is negative.  Examples:   1.5 will be serialized as \"1500m\"   1.5Gi will be serialized as \"1536Mi\"  Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.  Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)  This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
	Divisor *string `json:"divisor,omitempty"`
	// Required: resource to select
	Resource string `json:"resource"`
}

// NewIoK8sApiCoreV1ResourceFieldSelector instantiates a new IoK8sApiCoreV1ResourceFieldSelector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoK8sApiCoreV1ResourceFieldSelector(resource string) *IoK8sApiCoreV1ResourceFieldSelector {
	this := IoK8sApiCoreV1ResourceFieldSelector{}
	this.Resource = resource
	return &this
}

// NewIoK8sApiCoreV1ResourceFieldSelectorWithDefaults instantiates a new IoK8sApiCoreV1ResourceFieldSelector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoK8sApiCoreV1ResourceFieldSelectorWithDefaults() *IoK8sApiCoreV1ResourceFieldSelector {
	this := IoK8sApiCoreV1ResourceFieldSelector{}
	return &this
}

// GetContainerName returns the ContainerName field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1ResourceFieldSelector) GetContainerName() string {
	if o == nil || o.ContainerName == nil {
		var ret string
		return ret
	}
	return *o.ContainerName
}

// GetContainerNameOk returns a tuple with the ContainerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1ResourceFieldSelector) GetContainerNameOk() (*string, bool) {
	if o == nil || o.ContainerName == nil {
		return nil, false
	}
	return o.ContainerName, true
}

// HasContainerName returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1ResourceFieldSelector) HasContainerName() bool {
	if o != nil && o.ContainerName != nil {
		return true
	}

	return false
}

// SetContainerName gets a reference to the given string and assigns it to the ContainerName field.
func (o *IoK8sApiCoreV1ResourceFieldSelector) SetContainerName(v string) {
	o.ContainerName = &v
}

// GetDivisor returns the Divisor field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1ResourceFieldSelector) GetDivisor() string {
	if o == nil || o.Divisor == nil {
		var ret string
		return ret
	}
	return *o.Divisor
}

// GetDivisorOk returns a tuple with the Divisor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1ResourceFieldSelector) GetDivisorOk() (*string, bool) {
	if o == nil || o.Divisor == nil {
		return nil, false
	}
	return o.Divisor, true
}

// HasDivisor returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1ResourceFieldSelector) HasDivisor() bool {
	if o != nil && o.Divisor != nil {
		return true
	}

	return false
}

// SetDivisor gets a reference to the given string and assigns it to the Divisor field.
func (o *IoK8sApiCoreV1ResourceFieldSelector) SetDivisor(v string) {
	o.Divisor = &v
}

// GetResource returns the Resource field value
func (o *IoK8sApiCoreV1ResourceFieldSelector) GetResource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Resource
}

// GetResourceOk returns a tuple with the Resource field value
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1ResourceFieldSelector) GetResourceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Resource, true
}

// SetResource sets field value
func (o *IoK8sApiCoreV1ResourceFieldSelector) SetResource(v string) {
	o.Resource = v
}

func (o IoK8sApiCoreV1ResourceFieldSelector) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ContainerName != nil {
		toSerialize["containerName"] = o.ContainerName
	}
	if o.Divisor != nil {
		toSerialize["divisor"] = o.Divisor
	}
	if true {
		toSerialize["resource"] = o.Resource
	}
	return json.Marshal(toSerialize)
}

type NullableIoK8sApiCoreV1ResourceFieldSelector struct {
	value *IoK8sApiCoreV1ResourceFieldSelector
	isSet bool
}

func (v NullableIoK8sApiCoreV1ResourceFieldSelector) Get() *IoK8sApiCoreV1ResourceFieldSelector {
	return v.value
}

func (v *NullableIoK8sApiCoreV1ResourceFieldSelector) Set(val *IoK8sApiCoreV1ResourceFieldSelector) {
	v.value = val
	v.isSet = true
}

func (v NullableIoK8sApiCoreV1ResourceFieldSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableIoK8sApiCoreV1ResourceFieldSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoK8sApiCoreV1ResourceFieldSelector(val *IoK8sApiCoreV1ResourceFieldSelector) *NullableIoK8sApiCoreV1ResourceFieldSelector {
	return &NullableIoK8sApiCoreV1ResourceFieldSelector{value: val, isSet: true}
}

func (v NullableIoK8sApiCoreV1ResourceFieldSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoK8sApiCoreV1ResourceFieldSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


