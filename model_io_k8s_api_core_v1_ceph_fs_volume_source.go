/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IoK8sApiCoreV1CephFSVolumeSource Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
type IoK8sApiCoreV1CephFSVolumeSource struct {
	// Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	Monitors []string `json:"monitors"`
	// Optional: Used as the mounted root, rather than the full Ceph tree, default is /
	Path *string `json:"path,omitempty"`
	// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	ReadOnly *bool `json:"readOnly,omitempty"`
	// Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	SecretFile *string `json:"secretFile,omitempty"`
	SecretRef *IoK8sApiCoreV1LocalObjectReference `json:"secretRef,omitempty"`
	// Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	User *string `json:"user,omitempty"`
}

// NewIoK8sApiCoreV1CephFSVolumeSource instantiates a new IoK8sApiCoreV1CephFSVolumeSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoK8sApiCoreV1CephFSVolumeSource(monitors []string) *IoK8sApiCoreV1CephFSVolumeSource {
	this := IoK8sApiCoreV1CephFSVolumeSource{}
	this.Monitors = monitors
	return &this
}

// NewIoK8sApiCoreV1CephFSVolumeSourceWithDefaults instantiates a new IoK8sApiCoreV1CephFSVolumeSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoK8sApiCoreV1CephFSVolumeSourceWithDefaults() *IoK8sApiCoreV1CephFSVolumeSource {
	this := IoK8sApiCoreV1CephFSVolumeSource{}
	return &this
}

// GetMonitors returns the Monitors field value
func (o *IoK8sApiCoreV1CephFSVolumeSource) GetMonitors() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Monitors
}

// GetMonitorsOk returns a tuple with the Monitors field value
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1CephFSVolumeSource) GetMonitorsOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Monitors, true
}

// SetMonitors sets field value
func (o *IoK8sApiCoreV1CephFSVolumeSource) SetMonitors(v []string) {
	o.Monitors = v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1CephFSVolumeSource) GetPath() string {
	if o == nil || o.Path == nil {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1CephFSVolumeSource) GetPathOk() (*string, bool) {
	if o == nil || o.Path == nil {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1CephFSVolumeSource) HasPath() bool {
	if o != nil && o.Path != nil {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *IoK8sApiCoreV1CephFSVolumeSource) SetPath(v string) {
	o.Path = &v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1CephFSVolumeSource) GetReadOnly() bool {
	if o == nil || o.ReadOnly == nil {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1CephFSVolumeSource) GetReadOnlyOk() (*bool, bool) {
	if o == nil || o.ReadOnly == nil {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1CephFSVolumeSource) HasReadOnly() bool {
	if o != nil && o.ReadOnly != nil {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *IoK8sApiCoreV1CephFSVolumeSource) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

// GetSecretFile returns the SecretFile field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1CephFSVolumeSource) GetSecretFile() string {
	if o == nil || o.SecretFile == nil {
		var ret string
		return ret
	}
	return *o.SecretFile
}

// GetSecretFileOk returns a tuple with the SecretFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1CephFSVolumeSource) GetSecretFileOk() (*string, bool) {
	if o == nil || o.SecretFile == nil {
		return nil, false
	}
	return o.SecretFile, true
}

// HasSecretFile returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1CephFSVolumeSource) HasSecretFile() bool {
	if o != nil && o.SecretFile != nil {
		return true
	}

	return false
}

// SetSecretFile gets a reference to the given string and assigns it to the SecretFile field.
func (o *IoK8sApiCoreV1CephFSVolumeSource) SetSecretFile(v string) {
	o.SecretFile = &v
}

// GetSecretRef returns the SecretRef field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1CephFSVolumeSource) GetSecretRef() IoK8sApiCoreV1LocalObjectReference {
	if o == nil || o.SecretRef == nil {
		var ret IoK8sApiCoreV1LocalObjectReference
		return ret
	}
	return *o.SecretRef
}

// GetSecretRefOk returns a tuple with the SecretRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1CephFSVolumeSource) GetSecretRefOk() (*IoK8sApiCoreV1LocalObjectReference, bool) {
	if o == nil || o.SecretRef == nil {
		return nil, false
	}
	return o.SecretRef, true
}

// HasSecretRef returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1CephFSVolumeSource) HasSecretRef() bool {
	if o != nil && o.SecretRef != nil {
		return true
	}

	return false
}

// SetSecretRef gets a reference to the given IoK8sApiCoreV1LocalObjectReference and assigns it to the SecretRef field.
func (o *IoK8sApiCoreV1CephFSVolumeSource) SetSecretRef(v IoK8sApiCoreV1LocalObjectReference) {
	o.SecretRef = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1CephFSVolumeSource) GetUser() string {
	if o == nil || o.User == nil {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1CephFSVolumeSource) GetUserOk() (*string, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1CephFSVolumeSource) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *IoK8sApiCoreV1CephFSVolumeSource) SetUser(v string) {
	o.User = &v
}

func (o IoK8sApiCoreV1CephFSVolumeSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["monitors"] = o.Monitors
	}
	if o.Path != nil {
		toSerialize["path"] = o.Path
	}
	if o.ReadOnly != nil {
		toSerialize["readOnly"] = o.ReadOnly
	}
	if o.SecretFile != nil {
		toSerialize["secretFile"] = o.SecretFile
	}
	if o.SecretRef != nil {
		toSerialize["secretRef"] = o.SecretRef
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	return json.Marshal(toSerialize)
}

type NullableIoK8sApiCoreV1CephFSVolumeSource struct {
	value *IoK8sApiCoreV1CephFSVolumeSource
	isSet bool
}

func (v NullableIoK8sApiCoreV1CephFSVolumeSource) Get() *IoK8sApiCoreV1CephFSVolumeSource {
	return v.value
}

func (v *NullableIoK8sApiCoreV1CephFSVolumeSource) Set(val *IoK8sApiCoreV1CephFSVolumeSource) {
	v.value = val
	v.isSet = true
}

func (v NullableIoK8sApiCoreV1CephFSVolumeSource) IsSet() bool {
	return v.isSet
}

func (v *NullableIoK8sApiCoreV1CephFSVolumeSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoK8sApiCoreV1CephFSVolumeSource(val *IoK8sApiCoreV1CephFSVolumeSource) *NullableIoK8sApiCoreV1CephFSVolumeSource {
	return &NullableIoK8sApiCoreV1CephFSVolumeSource{value: val, isSet: true}
}

func (v NullableIoK8sApiCoreV1CephFSVolumeSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoK8sApiCoreV1CephFSVolumeSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


