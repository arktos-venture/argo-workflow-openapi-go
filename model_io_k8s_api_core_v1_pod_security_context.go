/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IoK8sApiCoreV1PodSecurityContext PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
type IoK8sApiCoreV1PodSecurityContext struct {
	// A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----  If unset, the Kubelet will not modify the ownership and permissions of any volume.
	FsGroup *int32 `json:"fsGroup,omitempty"`
	// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
	RunAsGroup *int32 `json:"runAsGroup,omitempty"`
	// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsNonRoot *bool `json:"runAsNonRoot,omitempty"`
	// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
	RunAsUser *int32 `json:"runAsUser,omitempty"`
	SeLinuxOptions *IoK8sApiCoreV1SELinuxOptions `json:"seLinuxOptions,omitempty"`
	// A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.
	SupplementalGroups *[]int64 `json:"supplementalGroups,omitempty"`
	// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch.
	Sysctls *[]IoK8sApiCoreV1Sysctl `json:"sysctls,omitempty"`
	WindowsOptions *IoK8sApiCoreV1WindowsSecurityContextOptions `json:"windowsOptions,omitempty"`
}

// NewIoK8sApiCoreV1PodSecurityContext instantiates a new IoK8sApiCoreV1PodSecurityContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoK8sApiCoreV1PodSecurityContext() *IoK8sApiCoreV1PodSecurityContext {
	this := IoK8sApiCoreV1PodSecurityContext{}
	return &this
}

// NewIoK8sApiCoreV1PodSecurityContextWithDefaults instantiates a new IoK8sApiCoreV1PodSecurityContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoK8sApiCoreV1PodSecurityContextWithDefaults() *IoK8sApiCoreV1PodSecurityContext {
	this := IoK8sApiCoreV1PodSecurityContext{}
	return &this
}

// GetFsGroup returns the FsGroup field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1PodSecurityContext) GetFsGroup() int32 {
	if o == nil || o.FsGroup == nil {
		var ret int32
		return ret
	}
	return *o.FsGroup
}

// GetFsGroupOk returns a tuple with the FsGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1PodSecurityContext) GetFsGroupOk() (*int32, bool) {
	if o == nil || o.FsGroup == nil {
		return nil, false
	}
	return o.FsGroup, true
}

// HasFsGroup returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1PodSecurityContext) HasFsGroup() bool {
	if o != nil && o.FsGroup != nil {
		return true
	}

	return false
}

// SetFsGroup gets a reference to the given int32 and assigns it to the FsGroup field.
func (o *IoK8sApiCoreV1PodSecurityContext) SetFsGroup(v int32) {
	o.FsGroup = &v
}

// GetRunAsGroup returns the RunAsGroup field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1PodSecurityContext) GetRunAsGroup() int32 {
	if o == nil || o.RunAsGroup == nil {
		var ret int32
		return ret
	}
	return *o.RunAsGroup
}

// GetRunAsGroupOk returns a tuple with the RunAsGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1PodSecurityContext) GetRunAsGroupOk() (*int32, bool) {
	if o == nil || o.RunAsGroup == nil {
		return nil, false
	}
	return o.RunAsGroup, true
}

// HasRunAsGroup returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1PodSecurityContext) HasRunAsGroup() bool {
	if o != nil && o.RunAsGroup != nil {
		return true
	}

	return false
}

// SetRunAsGroup gets a reference to the given int32 and assigns it to the RunAsGroup field.
func (o *IoK8sApiCoreV1PodSecurityContext) SetRunAsGroup(v int32) {
	o.RunAsGroup = &v
}

// GetRunAsNonRoot returns the RunAsNonRoot field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1PodSecurityContext) GetRunAsNonRoot() bool {
	if o == nil || o.RunAsNonRoot == nil {
		var ret bool
		return ret
	}
	return *o.RunAsNonRoot
}

// GetRunAsNonRootOk returns a tuple with the RunAsNonRoot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1PodSecurityContext) GetRunAsNonRootOk() (*bool, bool) {
	if o == nil || o.RunAsNonRoot == nil {
		return nil, false
	}
	return o.RunAsNonRoot, true
}

// HasRunAsNonRoot returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1PodSecurityContext) HasRunAsNonRoot() bool {
	if o != nil && o.RunAsNonRoot != nil {
		return true
	}

	return false
}

// SetRunAsNonRoot gets a reference to the given bool and assigns it to the RunAsNonRoot field.
func (o *IoK8sApiCoreV1PodSecurityContext) SetRunAsNonRoot(v bool) {
	o.RunAsNonRoot = &v
}

// GetRunAsUser returns the RunAsUser field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1PodSecurityContext) GetRunAsUser() int32 {
	if o == nil || o.RunAsUser == nil {
		var ret int32
		return ret
	}
	return *o.RunAsUser
}

// GetRunAsUserOk returns a tuple with the RunAsUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1PodSecurityContext) GetRunAsUserOk() (*int32, bool) {
	if o == nil || o.RunAsUser == nil {
		return nil, false
	}
	return o.RunAsUser, true
}

// HasRunAsUser returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1PodSecurityContext) HasRunAsUser() bool {
	if o != nil && o.RunAsUser != nil {
		return true
	}

	return false
}

// SetRunAsUser gets a reference to the given int32 and assigns it to the RunAsUser field.
func (o *IoK8sApiCoreV1PodSecurityContext) SetRunAsUser(v int32) {
	o.RunAsUser = &v
}

// GetSeLinuxOptions returns the SeLinuxOptions field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1PodSecurityContext) GetSeLinuxOptions() IoK8sApiCoreV1SELinuxOptions {
	if o == nil || o.SeLinuxOptions == nil {
		var ret IoK8sApiCoreV1SELinuxOptions
		return ret
	}
	return *o.SeLinuxOptions
}

// GetSeLinuxOptionsOk returns a tuple with the SeLinuxOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1PodSecurityContext) GetSeLinuxOptionsOk() (*IoK8sApiCoreV1SELinuxOptions, bool) {
	if o == nil || o.SeLinuxOptions == nil {
		return nil, false
	}
	return o.SeLinuxOptions, true
}

// HasSeLinuxOptions returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1PodSecurityContext) HasSeLinuxOptions() bool {
	if o != nil && o.SeLinuxOptions != nil {
		return true
	}

	return false
}

// SetSeLinuxOptions gets a reference to the given IoK8sApiCoreV1SELinuxOptions and assigns it to the SeLinuxOptions field.
func (o *IoK8sApiCoreV1PodSecurityContext) SetSeLinuxOptions(v IoK8sApiCoreV1SELinuxOptions) {
	o.SeLinuxOptions = &v
}

// GetSupplementalGroups returns the SupplementalGroups field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1PodSecurityContext) GetSupplementalGroups() []int64 {
	if o == nil || o.SupplementalGroups == nil {
		var ret []int64
		return ret
	}
	return *o.SupplementalGroups
}

// GetSupplementalGroupsOk returns a tuple with the SupplementalGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1PodSecurityContext) GetSupplementalGroupsOk() (*[]int64, bool) {
	if o == nil || o.SupplementalGroups == nil {
		return nil, false
	}
	return o.SupplementalGroups, true
}

// HasSupplementalGroups returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1PodSecurityContext) HasSupplementalGroups() bool {
	if o != nil && o.SupplementalGroups != nil {
		return true
	}

	return false
}

// SetSupplementalGroups gets a reference to the given []int64 and assigns it to the SupplementalGroups field.
func (o *IoK8sApiCoreV1PodSecurityContext) SetSupplementalGroups(v []int64) {
	o.SupplementalGroups = &v
}

// GetSysctls returns the Sysctls field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1PodSecurityContext) GetSysctls() []IoK8sApiCoreV1Sysctl {
	if o == nil || o.Sysctls == nil {
		var ret []IoK8sApiCoreV1Sysctl
		return ret
	}
	return *o.Sysctls
}

// GetSysctlsOk returns a tuple with the Sysctls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1PodSecurityContext) GetSysctlsOk() (*[]IoK8sApiCoreV1Sysctl, bool) {
	if o == nil || o.Sysctls == nil {
		return nil, false
	}
	return o.Sysctls, true
}

// HasSysctls returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1PodSecurityContext) HasSysctls() bool {
	if o != nil && o.Sysctls != nil {
		return true
	}

	return false
}

// SetSysctls gets a reference to the given []IoK8sApiCoreV1Sysctl and assigns it to the Sysctls field.
func (o *IoK8sApiCoreV1PodSecurityContext) SetSysctls(v []IoK8sApiCoreV1Sysctl) {
	o.Sysctls = &v
}

// GetWindowsOptions returns the WindowsOptions field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1PodSecurityContext) GetWindowsOptions() IoK8sApiCoreV1WindowsSecurityContextOptions {
	if o == nil || o.WindowsOptions == nil {
		var ret IoK8sApiCoreV1WindowsSecurityContextOptions
		return ret
	}
	return *o.WindowsOptions
}

// GetWindowsOptionsOk returns a tuple with the WindowsOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1PodSecurityContext) GetWindowsOptionsOk() (*IoK8sApiCoreV1WindowsSecurityContextOptions, bool) {
	if o == nil || o.WindowsOptions == nil {
		return nil, false
	}
	return o.WindowsOptions, true
}

// HasWindowsOptions returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1PodSecurityContext) HasWindowsOptions() bool {
	if o != nil && o.WindowsOptions != nil {
		return true
	}

	return false
}

// SetWindowsOptions gets a reference to the given IoK8sApiCoreV1WindowsSecurityContextOptions and assigns it to the WindowsOptions field.
func (o *IoK8sApiCoreV1PodSecurityContext) SetWindowsOptions(v IoK8sApiCoreV1WindowsSecurityContextOptions) {
	o.WindowsOptions = &v
}

func (o IoK8sApiCoreV1PodSecurityContext) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FsGroup != nil {
		toSerialize["fsGroup"] = o.FsGroup
	}
	if o.RunAsGroup != nil {
		toSerialize["runAsGroup"] = o.RunAsGroup
	}
	if o.RunAsNonRoot != nil {
		toSerialize["runAsNonRoot"] = o.RunAsNonRoot
	}
	if o.RunAsUser != nil {
		toSerialize["runAsUser"] = o.RunAsUser
	}
	if o.SeLinuxOptions != nil {
		toSerialize["seLinuxOptions"] = o.SeLinuxOptions
	}
	if o.SupplementalGroups != nil {
		toSerialize["supplementalGroups"] = o.SupplementalGroups
	}
	if o.Sysctls != nil {
		toSerialize["sysctls"] = o.Sysctls
	}
	if o.WindowsOptions != nil {
		toSerialize["windowsOptions"] = o.WindowsOptions
	}
	return json.Marshal(toSerialize)
}

type NullableIoK8sApiCoreV1PodSecurityContext struct {
	value *IoK8sApiCoreV1PodSecurityContext
	isSet bool
}

func (v NullableIoK8sApiCoreV1PodSecurityContext) Get() *IoK8sApiCoreV1PodSecurityContext {
	return v.value
}

func (v *NullableIoK8sApiCoreV1PodSecurityContext) Set(val *IoK8sApiCoreV1PodSecurityContext) {
	v.value = val
	v.isSet = true
}

func (v NullableIoK8sApiCoreV1PodSecurityContext) IsSet() bool {
	return v.isSet
}

func (v *NullableIoK8sApiCoreV1PodSecurityContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoK8sApiCoreV1PodSecurityContext(val *IoK8sApiCoreV1PodSecurityContext) *NullableIoK8sApiCoreV1PodSecurityContext {
	return &NullableIoK8sApiCoreV1PodSecurityContext{value: val, isSet: true}
}

func (v NullableIoK8sApiCoreV1PodSecurityContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoK8sApiCoreV1PodSecurityContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


