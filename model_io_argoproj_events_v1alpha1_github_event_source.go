/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IoArgoprojEventsV1alpha1GithubEventSource struct for IoArgoprojEventsV1alpha1GithubEventSource
type IoArgoprojEventsV1alpha1GithubEventSource struct {
	Active *bool `json:"active,omitempty"`
	ApiToken *IoK8sApiCoreV1SecretKeySelector `json:"apiToken,omitempty"`
	ContentType *string `json:"contentType,omitempty"`
	DeleteHookOnFinish *bool `json:"deleteHookOnFinish,omitempty"`
	Events *[]string `json:"events,omitempty"`
	GithubBaseURL *string `json:"githubBaseURL,omitempty"`
	GithubUploadURL *string `json:"githubUploadURL,omitempty"`
	Id *string `json:"id,omitempty"`
	Insecure *bool `json:"insecure,omitempty"`
	Metadata *map[string]string `json:"metadata,omitempty"`
	Owner *string `json:"owner,omitempty"`
	Repositories *[]IoArgoprojEventsV1alpha1OwnedRepositories `json:"repositories,omitempty"`
	Repository *string `json:"repository,omitempty"`
	Webhook *IoArgoprojEventsV1alpha1WebhookContext `json:"webhook,omitempty"`
	WebhookSecret *IoK8sApiCoreV1SecretKeySelector `json:"webhookSecret,omitempty"`
}

// NewIoArgoprojEventsV1alpha1GithubEventSource instantiates a new IoArgoprojEventsV1alpha1GithubEventSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoArgoprojEventsV1alpha1GithubEventSource() *IoArgoprojEventsV1alpha1GithubEventSource {
	this := IoArgoprojEventsV1alpha1GithubEventSource{}
	return &this
}

// NewIoArgoprojEventsV1alpha1GithubEventSourceWithDefaults instantiates a new IoArgoprojEventsV1alpha1GithubEventSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoArgoprojEventsV1alpha1GithubEventSourceWithDefaults() *IoArgoprojEventsV1alpha1GithubEventSource {
	this := IoArgoprojEventsV1alpha1GithubEventSource{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) SetActive(v bool) {
	o.Active = &v
}

// GetApiToken returns the ApiToken field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) GetApiToken() IoK8sApiCoreV1SecretKeySelector {
	if o == nil || o.ApiToken == nil {
		var ret IoK8sApiCoreV1SecretKeySelector
		return ret
	}
	return *o.ApiToken
}

// GetApiTokenOk returns a tuple with the ApiToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) GetApiTokenOk() (*IoK8sApiCoreV1SecretKeySelector, bool) {
	if o == nil || o.ApiToken == nil {
		return nil, false
	}
	return o.ApiToken, true
}

// HasApiToken returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) HasApiToken() bool {
	if o != nil && o.ApiToken != nil {
		return true
	}

	return false
}

// SetApiToken gets a reference to the given IoK8sApiCoreV1SecretKeySelector and assigns it to the ApiToken field.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) SetApiToken(v IoK8sApiCoreV1SecretKeySelector) {
	o.ApiToken = &v
}

// GetContentType returns the ContentType field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) GetContentType() string {
	if o == nil || o.ContentType == nil {
		var ret string
		return ret
	}
	return *o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) GetContentTypeOk() (*string, bool) {
	if o == nil || o.ContentType == nil {
		return nil, false
	}
	return o.ContentType, true
}

// HasContentType returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) HasContentType() bool {
	if o != nil && o.ContentType != nil {
		return true
	}

	return false
}

// SetContentType gets a reference to the given string and assigns it to the ContentType field.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) SetContentType(v string) {
	o.ContentType = &v
}

// GetDeleteHookOnFinish returns the DeleteHookOnFinish field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) GetDeleteHookOnFinish() bool {
	if o == nil || o.DeleteHookOnFinish == nil {
		var ret bool
		return ret
	}
	return *o.DeleteHookOnFinish
}

// GetDeleteHookOnFinishOk returns a tuple with the DeleteHookOnFinish field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) GetDeleteHookOnFinishOk() (*bool, bool) {
	if o == nil || o.DeleteHookOnFinish == nil {
		return nil, false
	}
	return o.DeleteHookOnFinish, true
}

// HasDeleteHookOnFinish returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) HasDeleteHookOnFinish() bool {
	if o != nil && o.DeleteHookOnFinish != nil {
		return true
	}

	return false
}

// SetDeleteHookOnFinish gets a reference to the given bool and assigns it to the DeleteHookOnFinish field.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) SetDeleteHookOnFinish(v bool) {
	o.DeleteHookOnFinish = &v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) GetEvents() []string {
	if o == nil || o.Events == nil {
		var ret []string
		return ret
	}
	return *o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) GetEventsOk() (*[]string, bool) {
	if o == nil || o.Events == nil {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) HasEvents() bool {
	if o != nil && o.Events != nil {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []string and assigns it to the Events field.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) SetEvents(v []string) {
	o.Events = &v
}

// GetGithubBaseURL returns the GithubBaseURL field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) GetGithubBaseURL() string {
	if o == nil || o.GithubBaseURL == nil {
		var ret string
		return ret
	}
	return *o.GithubBaseURL
}

// GetGithubBaseURLOk returns a tuple with the GithubBaseURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) GetGithubBaseURLOk() (*string, bool) {
	if o == nil || o.GithubBaseURL == nil {
		return nil, false
	}
	return o.GithubBaseURL, true
}

// HasGithubBaseURL returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) HasGithubBaseURL() bool {
	if o != nil && o.GithubBaseURL != nil {
		return true
	}

	return false
}

// SetGithubBaseURL gets a reference to the given string and assigns it to the GithubBaseURL field.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) SetGithubBaseURL(v string) {
	o.GithubBaseURL = &v
}

// GetGithubUploadURL returns the GithubUploadURL field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) GetGithubUploadURL() string {
	if o == nil || o.GithubUploadURL == nil {
		var ret string
		return ret
	}
	return *o.GithubUploadURL
}

// GetGithubUploadURLOk returns a tuple with the GithubUploadURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) GetGithubUploadURLOk() (*string, bool) {
	if o == nil || o.GithubUploadURL == nil {
		return nil, false
	}
	return o.GithubUploadURL, true
}

// HasGithubUploadURL returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) HasGithubUploadURL() bool {
	if o != nil && o.GithubUploadURL != nil {
		return true
	}

	return false
}

// SetGithubUploadURL gets a reference to the given string and assigns it to the GithubUploadURL field.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) SetGithubUploadURL(v string) {
	o.GithubUploadURL = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) SetId(v string) {
	o.Id = &v
}

// GetInsecure returns the Insecure field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) GetInsecure() bool {
	if o == nil || o.Insecure == nil {
		var ret bool
		return ret
	}
	return *o.Insecure
}

// GetInsecureOk returns a tuple with the Insecure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) GetInsecureOk() (*bool, bool) {
	if o == nil || o.Insecure == nil {
		return nil, false
	}
	return o.Insecure, true
}

// HasInsecure returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) HasInsecure() bool {
	if o != nil && o.Insecure != nil {
		return true
	}

	return false
}

// SetInsecure gets a reference to the given bool and assigns it to the Insecure field.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) SetInsecure(v bool) {
	o.Insecure = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) GetMetadata() map[string]string {
	if o == nil || o.Metadata == nil {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) GetOwner() string {
	if o == nil || o.Owner == nil {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) GetOwnerOk() (*string, bool) {
	if o == nil || o.Owner == nil {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) SetOwner(v string) {
	o.Owner = &v
}

// GetRepositories returns the Repositories field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) GetRepositories() []IoArgoprojEventsV1alpha1OwnedRepositories {
	if o == nil || o.Repositories == nil {
		var ret []IoArgoprojEventsV1alpha1OwnedRepositories
		return ret
	}
	return *o.Repositories
}

// GetRepositoriesOk returns a tuple with the Repositories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) GetRepositoriesOk() (*[]IoArgoprojEventsV1alpha1OwnedRepositories, bool) {
	if o == nil || o.Repositories == nil {
		return nil, false
	}
	return o.Repositories, true
}

// HasRepositories returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) HasRepositories() bool {
	if o != nil && o.Repositories != nil {
		return true
	}

	return false
}

// SetRepositories gets a reference to the given []IoArgoprojEventsV1alpha1OwnedRepositories and assigns it to the Repositories field.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) SetRepositories(v []IoArgoprojEventsV1alpha1OwnedRepositories) {
	o.Repositories = &v
}

// GetRepository returns the Repository field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) GetRepository() string {
	if o == nil || o.Repository == nil {
		var ret string
		return ret
	}
	return *o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) GetRepositoryOk() (*string, bool) {
	if o == nil || o.Repository == nil {
		return nil, false
	}
	return o.Repository, true
}

// HasRepository returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) HasRepository() bool {
	if o != nil && o.Repository != nil {
		return true
	}

	return false
}

// SetRepository gets a reference to the given string and assigns it to the Repository field.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) SetRepository(v string) {
	o.Repository = &v
}

// GetWebhook returns the Webhook field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) GetWebhook() IoArgoprojEventsV1alpha1WebhookContext {
	if o == nil || o.Webhook == nil {
		var ret IoArgoprojEventsV1alpha1WebhookContext
		return ret
	}
	return *o.Webhook
}

// GetWebhookOk returns a tuple with the Webhook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) GetWebhookOk() (*IoArgoprojEventsV1alpha1WebhookContext, bool) {
	if o == nil || o.Webhook == nil {
		return nil, false
	}
	return o.Webhook, true
}

// HasWebhook returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) HasWebhook() bool {
	if o != nil && o.Webhook != nil {
		return true
	}

	return false
}

// SetWebhook gets a reference to the given IoArgoprojEventsV1alpha1WebhookContext and assigns it to the Webhook field.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) SetWebhook(v IoArgoprojEventsV1alpha1WebhookContext) {
	o.Webhook = &v
}

// GetWebhookSecret returns the WebhookSecret field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) GetWebhookSecret() IoK8sApiCoreV1SecretKeySelector {
	if o == nil || o.WebhookSecret == nil {
		var ret IoK8sApiCoreV1SecretKeySelector
		return ret
	}
	return *o.WebhookSecret
}

// GetWebhookSecretOk returns a tuple with the WebhookSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) GetWebhookSecretOk() (*IoK8sApiCoreV1SecretKeySelector, bool) {
	if o == nil || o.WebhookSecret == nil {
		return nil, false
	}
	return o.WebhookSecret, true
}

// HasWebhookSecret returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) HasWebhookSecret() bool {
	if o != nil && o.WebhookSecret != nil {
		return true
	}

	return false
}

// SetWebhookSecret gets a reference to the given IoK8sApiCoreV1SecretKeySelector and assigns it to the WebhookSecret field.
func (o *IoArgoprojEventsV1alpha1GithubEventSource) SetWebhookSecret(v IoK8sApiCoreV1SecretKeySelector) {
	o.WebhookSecret = &v
}

func (o IoArgoprojEventsV1alpha1GithubEventSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	if o.ApiToken != nil {
		toSerialize["apiToken"] = o.ApiToken
	}
	if o.ContentType != nil {
		toSerialize["contentType"] = o.ContentType
	}
	if o.DeleteHookOnFinish != nil {
		toSerialize["deleteHookOnFinish"] = o.DeleteHookOnFinish
	}
	if o.Events != nil {
		toSerialize["events"] = o.Events
	}
	if o.GithubBaseURL != nil {
		toSerialize["githubBaseURL"] = o.GithubBaseURL
	}
	if o.GithubUploadURL != nil {
		toSerialize["githubUploadURL"] = o.GithubUploadURL
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Insecure != nil {
		toSerialize["insecure"] = o.Insecure
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Owner != nil {
		toSerialize["owner"] = o.Owner
	}
	if o.Repositories != nil {
		toSerialize["repositories"] = o.Repositories
	}
	if o.Repository != nil {
		toSerialize["repository"] = o.Repository
	}
	if o.Webhook != nil {
		toSerialize["webhook"] = o.Webhook
	}
	if o.WebhookSecret != nil {
		toSerialize["webhookSecret"] = o.WebhookSecret
	}
	return json.Marshal(toSerialize)
}

type NullableIoArgoprojEventsV1alpha1GithubEventSource struct {
	value *IoArgoprojEventsV1alpha1GithubEventSource
	isSet bool
}

func (v NullableIoArgoprojEventsV1alpha1GithubEventSource) Get() *IoArgoprojEventsV1alpha1GithubEventSource {
	return v.value
}

func (v *NullableIoArgoprojEventsV1alpha1GithubEventSource) Set(val *IoArgoprojEventsV1alpha1GithubEventSource) {
	v.value = val
	v.isSet = true
}

func (v NullableIoArgoprojEventsV1alpha1GithubEventSource) IsSet() bool {
	return v.isSet
}

func (v *NullableIoArgoprojEventsV1alpha1GithubEventSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoArgoprojEventsV1alpha1GithubEventSource(val *IoArgoprojEventsV1alpha1GithubEventSource) *NullableIoArgoprojEventsV1alpha1GithubEventSource {
	return &NullableIoArgoprojEventsV1alpha1GithubEventSource{value: val, isSet: true}
}

func (v NullableIoArgoprojEventsV1alpha1GithubEventSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoArgoprojEventsV1alpha1GithubEventSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


