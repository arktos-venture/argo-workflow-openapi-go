/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SensorUpdateSensorRequest struct for SensorUpdateSensorRequest
type SensorUpdateSensorRequest struct {
	Name *string `json:"name,omitempty"`
	Namespace *string `json:"namespace,omitempty"`
	Sensor *IoArgoprojEventsV1alpha1Sensor `json:"sensor,omitempty"`
}

// NewSensorUpdateSensorRequest instantiates a new SensorUpdateSensorRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSensorUpdateSensorRequest() *SensorUpdateSensorRequest {
	this := SensorUpdateSensorRequest{}
	return &this
}

// NewSensorUpdateSensorRequestWithDefaults instantiates a new SensorUpdateSensorRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSensorUpdateSensorRequestWithDefaults() *SensorUpdateSensorRequest {
	this := SensorUpdateSensorRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SensorUpdateSensorRequest) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SensorUpdateSensorRequest) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SensorUpdateSensorRequest) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SensorUpdateSensorRequest) SetName(v string) {
	o.Name = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *SensorUpdateSensorRequest) GetNamespace() string {
	if o == nil || o.Namespace == nil {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SensorUpdateSensorRequest) GetNamespaceOk() (*string, bool) {
	if o == nil || o.Namespace == nil {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *SensorUpdateSensorRequest) HasNamespace() bool {
	if o != nil && o.Namespace != nil {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *SensorUpdateSensorRequest) SetNamespace(v string) {
	o.Namespace = &v
}

// GetSensor returns the Sensor field value if set, zero value otherwise.
func (o *SensorUpdateSensorRequest) GetSensor() IoArgoprojEventsV1alpha1Sensor {
	if o == nil || o.Sensor == nil {
		var ret IoArgoprojEventsV1alpha1Sensor
		return ret
	}
	return *o.Sensor
}

// GetSensorOk returns a tuple with the Sensor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SensorUpdateSensorRequest) GetSensorOk() (*IoArgoprojEventsV1alpha1Sensor, bool) {
	if o == nil || o.Sensor == nil {
		return nil, false
	}
	return o.Sensor, true
}

// HasSensor returns a boolean if a field has been set.
func (o *SensorUpdateSensorRequest) HasSensor() bool {
	if o != nil && o.Sensor != nil {
		return true
	}

	return false
}

// SetSensor gets a reference to the given IoArgoprojEventsV1alpha1Sensor and assigns it to the Sensor field.
func (o *SensorUpdateSensorRequest) SetSensor(v IoArgoprojEventsV1alpha1Sensor) {
	o.Sensor = &v
}

func (o SensorUpdateSensorRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Namespace != nil {
		toSerialize["namespace"] = o.Namespace
	}
	if o.Sensor != nil {
		toSerialize["sensor"] = o.Sensor
	}
	return json.Marshal(toSerialize)
}

type NullableSensorUpdateSensorRequest struct {
	value *SensorUpdateSensorRequest
	isSet bool
}

func (v NullableSensorUpdateSensorRequest) Get() *SensorUpdateSensorRequest {
	return v.value
}

func (v *NullableSensorUpdateSensorRequest) Set(val *SensorUpdateSensorRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSensorUpdateSensorRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSensorUpdateSensorRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSensorUpdateSensorRequest(val *SensorUpdateSensorRequest) *NullableSensorUpdateSensorRequest {
	return &NullableSensorUpdateSensorRequest{value: val, isSet: true}
}

func (v NullableSensorUpdateSensorRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSensorUpdateSensorRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


