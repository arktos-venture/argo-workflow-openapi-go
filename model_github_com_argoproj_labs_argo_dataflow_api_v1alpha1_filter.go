/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GithubComArgoprojLabsArgoDataflowApiV1alpha1Filter struct for GithubComArgoprojLabsArgoDataflowApiV1alpha1Filter
type GithubComArgoprojLabsArgoDataflowApiV1alpha1Filter struct {
	AbstractStep *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractStep `json:"abstractStep,omitempty"`
	Expression *string `json:"expression,omitempty"`
}

// NewGithubComArgoprojLabsArgoDataflowApiV1alpha1Filter instantiates a new GithubComArgoprojLabsArgoDataflowApiV1alpha1Filter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGithubComArgoprojLabsArgoDataflowApiV1alpha1Filter() *GithubComArgoprojLabsArgoDataflowApiV1alpha1Filter {
	this := GithubComArgoprojLabsArgoDataflowApiV1alpha1Filter{}
	return &this
}

// NewGithubComArgoprojLabsArgoDataflowApiV1alpha1FilterWithDefaults instantiates a new GithubComArgoprojLabsArgoDataflowApiV1alpha1Filter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGithubComArgoprojLabsArgoDataflowApiV1alpha1FilterWithDefaults() *GithubComArgoprojLabsArgoDataflowApiV1alpha1Filter {
	this := GithubComArgoprojLabsArgoDataflowApiV1alpha1Filter{}
	return &this
}

// GetAbstractStep returns the AbstractStep field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Filter) GetAbstractStep() GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractStep {
	if o == nil || o.AbstractStep == nil {
		var ret GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractStep
		return ret
	}
	return *o.AbstractStep
}

// GetAbstractStepOk returns a tuple with the AbstractStep field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Filter) GetAbstractStepOk() (*GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractStep, bool) {
	if o == nil || o.AbstractStep == nil {
		return nil, false
	}
	return o.AbstractStep, true
}

// HasAbstractStep returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Filter) HasAbstractStep() bool {
	if o != nil && o.AbstractStep != nil {
		return true
	}

	return false
}

// SetAbstractStep gets a reference to the given GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractStep and assigns it to the AbstractStep field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Filter) SetAbstractStep(v GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractStep) {
	o.AbstractStep = &v
}

// GetExpression returns the Expression field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Filter) GetExpression() string {
	if o == nil || o.Expression == nil {
		var ret string
		return ret
	}
	return *o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Filter) GetExpressionOk() (*string, bool) {
	if o == nil || o.Expression == nil {
		return nil, false
	}
	return o.Expression, true
}

// HasExpression returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Filter) HasExpression() bool {
	if o != nil && o.Expression != nil {
		return true
	}

	return false
}

// SetExpression gets a reference to the given string and assigns it to the Expression field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Filter) SetExpression(v string) {
	o.Expression = &v
}

func (o GithubComArgoprojLabsArgoDataflowApiV1alpha1Filter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AbstractStep != nil {
		toSerialize["abstractStep"] = o.AbstractStep
	}
	if o.Expression != nil {
		toSerialize["expression"] = o.Expression
	}
	return json.Marshal(toSerialize)
}

type NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1Filter struct {
	value *GithubComArgoprojLabsArgoDataflowApiV1alpha1Filter
	isSet bool
}

func (v NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1Filter) Get() *GithubComArgoprojLabsArgoDataflowApiV1alpha1Filter {
	return v.value
}

func (v *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1Filter) Set(val *GithubComArgoprojLabsArgoDataflowApiV1alpha1Filter) {
	v.value = val
	v.isSet = true
}

func (v NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1Filter) IsSet() bool {
	return v.isSet
}

func (v *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1Filter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGithubComArgoprojLabsArgoDataflowApiV1alpha1Filter(val *GithubComArgoprojLabsArgoDataflowApiV1alpha1Filter) *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1Filter {
	return &NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1Filter{value: val, isSet: true}
}

func (v NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1Filter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1Filter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


