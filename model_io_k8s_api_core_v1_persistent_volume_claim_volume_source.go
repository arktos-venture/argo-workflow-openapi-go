/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IoK8sApiCoreV1PersistentVolumeClaimVolumeSource PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).
type IoK8sApiCoreV1PersistentVolumeClaimVolumeSource struct {
	// ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	ClaimName string `json:"claimName"`
	// Will force the ReadOnly setting in VolumeMounts. Default false.
	ReadOnly *bool `json:"readOnly,omitempty"`
}

// NewIoK8sApiCoreV1PersistentVolumeClaimVolumeSource instantiates a new IoK8sApiCoreV1PersistentVolumeClaimVolumeSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoK8sApiCoreV1PersistentVolumeClaimVolumeSource(claimName string) *IoK8sApiCoreV1PersistentVolumeClaimVolumeSource {
	this := IoK8sApiCoreV1PersistentVolumeClaimVolumeSource{}
	this.ClaimName = claimName
	return &this
}

// NewIoK8sApiCoreV1PersistentVolumeClaimVolumeSourceWithDefaults instantiates a new IoK8sApiCoreV1PersistentVolumeClaimVolumeSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoK8sApiCoreV1PersistentVolumeClaimVolumeSourceWithDefaults() *IoK8sApiCoreV1PersistentVolumeClaimVolumeSource {
	this := IoK8sApiCoreV1PersistentVolumeClaimVolumeSource{}
	return &this
}

// GetClaimName returns the ClaimName field value
func (o *IoK8sApiCoreV1PersistentVolumeClaimVolumeSource) GetClaimName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClaimName
}

// GetClaimNameOk returns a tuple with the ClaimName field value
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1PersistentVolumeClaimVolumeSource) GetClaimNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ClaimName, true
}

// SetClaimName sets field value
func (o *IoK8sApiCoreV1PersistentVolumeClaimVolumeSource) SetClaimName(v string) {
	o.ClaimName = v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1PersistentVolumeClaimVolumeSource) GetReadOnly() bool {
	if o == nil || o.ReadOnly == nil {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1PersistentVolumeClaimVolumeSource) GetReadOnlyOk() (*bool, bool) {
	if o == nil || o.ReadOnly == nil {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1PersistentVolumeClaimVolumeSource) HasReadOnly() bool {
	if o != nil && o.ReadOnly != nil {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *IoK8sApiCoreV1PersistentVolumeClaimVolumeSource) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

func (o IoK8sApiCoreV1PersistentVolumeClaimVolumeSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["claimName"] = o.ClaimName
	}
	if o.ReadOnly != nil {
		toSerialize["readOnly"] = o.ReadOnly
	}
	return json.Marshal(toSerialize)
}

type NullableIoK8sApiCoreV1PersistentVolumeClaimVolumeSource struct {
	value *IoK8sApiCoreV1PersistentVolumeClaimVolumeSource
	isSet bool
}

func (v NullableIoK8sApiCoreV1PersistentVolumeClaimVolumeSource) Get() *IoK8sApiCoreV1PersistentVolumeClaimVolumeSource {
	return v.value
}

func (v *NullableIoK8sApiCoreV1PersistentVolumeClaimVolumeSource) Set(val *IoK8sApiCoreV1PersistentVolumeClaimVolumeSource) {
	v.value = val
	v.isSet = true
}

func (v NullableIoK8sApiCoreV1PersistentVolumeClaimVolumeSource) IsSet() bool {
	return v.isSet
}

func (v *NullableIoK8sApiCoreV1PersistentVolumeClaimVolumeSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoK8sApiCoreV1PersistentVolumeClaimVolumeSource(val *IoK8sApiCoreV1PersistentVolumeClaimVolumeSource) *NullableIoK8sApiCoreV1PersistentVolumeClaimVolumeSource {
	return &NullableIoK8sApiCoreV1PersistentVolumeClaimVolumeSource{value: val, isSet: true}
}

func (v NullableIoK8sApiCoreV1PersistentVolumeClaimVolumeSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoK8sApiCoreV1PersistentVolumeClaimVolumeSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


