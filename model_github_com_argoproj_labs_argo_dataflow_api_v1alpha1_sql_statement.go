/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement struct for GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement
type GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement struct {
	Args *[]string `json:"args,omitempty"`
	Sql *string `json:"sql,omitempty"`
}

// NewGithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement instantiates a new GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement() *GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement {
	this := GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement{}
	return &this
}

// NewGithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatementWithDefaults instantiates a new GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatementWithDefaults() *GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement {
	this := GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement{}
	return &this
}

// GetArgs returns the Args field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement) GetArgs() []string {
	if o == nil || o.Args == nil {
		var ret []string
		return ret
	}
	return *o.Args
}

// GetArgsOk returns a tuple with the Args field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement) GetArgsOk() (*[]string, bool) {
	if o == nil || o.Args == nil {
		return nil, false
	}
	return o.Args, true
}

// HasArgs returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement) HasArgs() bool {
	if o != nil && o.Args != nil {
		return true
	}

	return false
}

// SetArgs gets a reference to the given []string and assigns it to the Args field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement) SetArgs(v []string) {
	o.Args = &v
}

// GetSql returns the Sql field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement) GetSql() string {
	if o == nil || o.Sql == nil {
		var ret string
		return ret
	}
	return *o.Sql
}

// GetSqlOk returns a tuple with the Sql field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement) GetSqlOk() (*string, bool) {
	if o == nil || o.Sql == nil {
		return nil, false
	}
	return o.Sql, true
}

// HasSql returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement) HasSql() bool {
	if o != nil && o.Sql != nil {
		return true
	}

	return false
}

// SetSql gets a reference to the given string and assigns it to the Sql field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement) SetSql(v string) {
	o.Sql = &v
}

func (o GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Args != nil {
		toSerialize["args"] = o.Args
	}
	if o.Sql != nil {
		toSerialize["sql"] = o.Sql
	}
	return json.Marshal(toSerialize)
}

type NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement struct {
	value *GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement
	isSet bool
}

func (v NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement) Get() *GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement {
	return v.value
}

func (v *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement) Set(val *GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement) {
	v.value = val
	v.isSet = true
}

func (v NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement) IsSet() bool {
	return v.isSet
}

func (v *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement(val *GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement) *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement {
	return &NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement{value: val, isSet: true}
}

func (v NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


