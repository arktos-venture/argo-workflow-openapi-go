/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IoArgoprojEventsV1alpha1KafkaTrigger KafkaTrigger refers to the specification of the Kafka trigger.
type IoArgoprojEventsV1alpha1KafkaTrigger struct {
	Compress *bool `json:"compress,omitempty"`
	FlushFrequency *int32 `json:"flushFrequency,omitempty"`
	// Parameters is the list of parameters that is applied to resolved Kafka trigger object.
	Parameters *[]IoArgoprojEventsV1alpha1TriggerParameter `json:"parameters,omitempty"`
	// Partition to write data to.
	Partition *int32 `json:"partition,omitempty"`
	// The partitioning key for the messages put on the Kafka topic. Defaults to broker url. +optional.
	PartitioningKey *string `json:"partitioningKey,omitempty"`
	// Payload is the list of key-value extracted from an event payload to construct the request payload.
	Payload *[]IoArgoprojEventsV1alpha1TriggerParameter `json:"payload,omitempty"`
	// RequiredAcks used in producer to tell the broker how many replica acknowledgements Defaults to 1 (Only wait for the leader to ack). +optional.
	RequiredAcks *int32 `json:"requiredAcks,omitempty"`
	Sasl *IoArgoprojEventsV1alpha1SASLConfig `json:"sasl,omitempty"`
	Tls *IoArgoprojEventsV1alpha1TLSConfig `json:"tls,omitempty"`
	Topic *string `json:"topic,omitempty"`
	// URL of the Kafka broker, multiple URLs separated by comma.
	Url *string `json:"url,omitempty"`
	Version *string `json:"version,omitempty"`
}

// NewIoArgoprojEventsV1alpha1KafkaTrigger instantiates a new IoArgoprojEventsV1alpha1KafkaTrigger object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoArgoprojEventsV1alpha1KafkaTrigger() *IoArgoprojEventsV1alpha1KafkaTrigger {
	this := IoArgoprojEventsV1alpha1KafkaTrigger{}
	return &this
}

// NewIoArgoprojEventsV1alpha1KafkaTriggerWithDefaults instantiates a new IoArgoprojEventsV1alpha1KafkaTrigger object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoArgoprojEventsV1alpha1KafkaTriggerWithDefaults() *IoArgoprojEventsV1alpha1KafkaTrigger {
	this := IoArgoprojEventsV1alpha1KafkaTrigger{}
	return &this
}

// GetCompress returns the Compress field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) GetCompress() bool {
	if o == nil || o.Compress == nil {
		var ret bool
		return ret
	}
	return *o.Compress
}

// GetCompressOk returns a tuple with the Compress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) GetCompressOk() (*bool, bool) {
	if o == nil || o.Compress == nil {
		return nil, false
	}
	return o.Compress, true
}

// HasCompress returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) HasCompress() bool {
	if o != nil && o.Compress != nil {
		return true
	}

	return false
}

// SetCompress gets a reference to the given bool and assigns it to the Compress field.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) SetCompress(v bool) {
	o.Compress = &v
}

// GetFlushFrequency returns the FlushFrequency field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) GetFlushFrequency() int32 {
	if o == nil || o.FlushFrequency == nil {
		var ret int32
		return ret
	}
	return *o.FlushFrequency
}

// GetFlushFrequencyOk returns a tuple with the FlushFrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) GetFlushFrequencyOk() (*int32, bool) {
	if o == nil || o.FlushFrequency == nil {
		return nil, false
	}
	return o.FlushFrequency, true
}

// HasFlushFrequency returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) HasFlushFrequency() bool {
	if o != nil && o.FlushFrequency != nil {
		return true
	}

	return false
}

// SetFlushFrequency gets a reference to the given int32 and assigns it to the FlushFrequency field.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) SetFlushFrequency(v int32) {
	o.FlushFrequency = &v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) GetParameters() []IoArgoprojEventsV1alpha1TriggerParameter {
	if o == nil || o.Parameters == nil {
		var ret []IoArgoprojEventsV1alpha1TriggerParameter
		return ret
	}
	return *o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) GetParametersOk() (*[]IoArgoprojEventsV1alpha1TriggerParameter, bool) {
	if o == nil || o.Parameters == nil {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) HasParameters() bool {
	if o != nil && o.Parameters != nil {
		return true
	}

	return false
}

// SetParameters gets a reference to the given []IoArgoprojEventsV1alpha1TriggerParameter and assigns it to the Parameters field.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) SetParameters(v []IoArgoprojEventsV1alpha1TriggerParameter) {
	o.Parameters = &v
}

// GetPartition returns the Partition field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) GetPartition() int32 {
	if o == nil || o.Partition == nil {
		var ret int32
		return ret
	}
	return *o.Partition
}

// GetPartitionOk returns a tuple with the Partition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) GetPartitionOk() (*int32, bool) {
	if o == nil || o.Partition == nil {
		return nil, false
	}
	return o.Partition, true
}

// HasPartition returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) HasPartition() bool {
	if o != nil && o.Partition != nil {
		return true
	}

	return false
}

// SetPartition gets a reference to the given int32 and assigns it to the Partition field.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) SetPartition(v int32) {
	o.Partition = &v
}

// GetPartitioningKey returns the PartitioningKey field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) GetPartitioningKey() string {
	if o == nil || o.PartitioningKey == nil {
		var ret string
		return ret
	}
	return *o.PartitioningKey
}

// GetPartitioningKeyOk returns a tuple with the PartitioningKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) GetPartitioningKeyOk() (*string, bool) {
	if o == nil || o.PartitioningKey == nil {
		return nil, false
	}
	return o.PartitioningKey, true
}

// HasPartitioningKey returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) HasPartitioningKey() bool {
	if o != nil && o.PartitioningKey != nil {
		return true
	}

	return false
}

// SetPartitioningKey gets a reference to the given string and assigns it to the PartitioningKey field.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) SetPartitioningKey(v string) {
	o.PartitioningKey = &v
}

// GetPayload returns the Payload field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) GetPayload() []IoArgoprojEventsV1alpha1TriggerParameter {
	if o == nil || o.Payload == nil {
		var ret []IoArgoprojEventsV1alpha1TriggerParameter
		return ret
	}
	return *o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) GetPayloadOk() (*[]IoArgoprojEventsV1alpha1TriggerParameter, bool) {
	if o == nil || o.Payload == nil {
		return nil, false
	}
	return o.Payload, true
}

// HasPayload returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) HasPayload() bool {
	if o != nil && o.Payload != nil {
		return true
	}

	return false
}

// SetPayload gets a reference to the given []IoArgoprojEventsV1alpha1TriggerParameter and assigns it to the Payload field.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) SetPayload(v []IoArgoprojEventsV1alpha1TriggerParameter) {
	o.Payload = &v
}

// GetRequiredAcks returns the RequiredAcks field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) GetRequiredAcks() int32 {
	if o == nil || o.RequiredAcks == nil {
		var ret int32
		return ret
	}
	return *o.RequiredAcks
}

// GetRequiredAcksOk returns a tuple with the RequiredAcks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) GetRequiredAcksOk() (*int32, bool) {
	if o == nil || o.RequiredAcks == nil {
		return nil, false
	}
	return o.RequiredAcks, true
}

// HasRequiredAcks returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) HasRequiredAcks() bool {
	if o != nil && o.RequiredAcks != nil {
		return true
	}

	return false
}

// SetRequiredAcks gets a reference to the given int32 and assigns it to the RequiredAcks field.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) SetRequiredAcks(v int32) {
	o.RequiredAcks = &v
}

// GetSasl returns the Sasl field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) GetSasl() IoArgoprojEventsV1alpha1SASLConfig {
	if o == nil || o.Sasl == nil {
		var ret IoArgoprojEventsV1alpha1SASLConfig
		return ret
	}
	return *o.Sasl
}

// GetSaslOk returns a tuple with the Sasl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) GetSaslOk() (*IoArgoprojEventsV1alpha1SASLConfig, bool) {
	if o == nil || o.Sasl == nil {
		return nil, false
	}
	return o.Sasl, true
}

// HasSasl returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) HasSasl() bool {
	if o != nil && o.Sasl != nil {
		return true
	}

	return false
}

// SetSasl gets a reference to the given IoArgoprojEventsV1alpha1SASLConfig and assigns it to the Sasl field.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) SetSasl(v IoArgoprojEventsV1alpha1SASLConfig) {
	o.Sasl = &v
}

// GetTls returns the Tls field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) GetTls() IoArgoprojEventsV1alpha1TLSConfig {
	if o == nil || o.Tls == nil {
		var ret IoArgoprojEventsV1alpha1TLSConfig
		return ret
	}
	return *o.Tls
}

// GetTlsOk returns a tuple with the Tls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) GetTlsOk() (*IoArgoprojEventsV1alpha1TLSConfig, bool) {
	if o == nil || o.Tls == nil {
		return nil, false
	}
	return o.Tls, true
}

// HasTls returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) HasTls() bool {
	if o != nil && o.Tls != nil {
		return true
	}

	return false
}

// SetTls gets a reference to the given IoArgoprojEventsV1alpha1TLSConfig and assigns it to the Tls field.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) SetTls(v IoArgoprojEventsV1alpha1TLSConfig) {
	o.Tls = &v
}

// GetTopic returns the Topic field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) GetTopic() string {
	if o == nil || o.Topic == nil {
		var ret string
		return ret
	}
	return *o.Topic
}

// GetTopicOk returns a tuple with the Topic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) GetTopicOk() (*string, bool) {
	if o == nil || o.Topic == nil {
		return nil, false
	}
	return o.Topic, true
}

// HasTopic returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) HasTopic() bool {
	if o != nil && o.Topic != nil {
		return true
	}

	return false
}

// SetTopic gets a reference to the given string and assigns it to the Topic field.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) SetTopic(v string) {
	o.Topic = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) SetUrl(v string) {
	o.Url = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *IoArgoprojEventsV1alpha1KafkaTrigger) SetVersion(v string) {
	o.Version = &v
}

func (o IoArgoprojEventsV1alpha1KafkaTrigger) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Compress != nil {
		toSerialize["compress"] = o.Compress
	}
	if o.FlushFrequency != nil {
		toSerialize["flushFrequency"] = o.FlushFrequency
	}
	if o.Parameters != nil {
		toSerialize["parameters"] = o.Parameters
	}
	if o.Partition != nil {
		toSerialize["partition"] = o.Partition
	}
	if o.PartitioningKey != nil {
		toSerialize["partitioningKey"] = o.PartitioningKey
	}
	if o.Payload != nil {
		toSerialize["payload"] = o.Payload
	}
	if o.RequiredAcks != nil {
		toSerialize["requiredAcks"] = o.RequiredAcks
	}
	if o.Sasl != nil {
		toSerialize["sasl"] = o.Sasl
	}
	if o.Tls != nil {
		toSerialize["tls"] = o.Tls
	}
	if o.Topic != nil {
		toSerialize["topic"] = o.Topic
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableIoArgoprojEventsV1alpha1KafkaTrigger struct {
	value *IoArgoprojEventsV1alpha1KafkaTrigger
	isSet bool
}

func (v NullableIoArgoprojEventsV1alpha1KafkaTrigger) Get() *IoArgoprojEventsV1alpha1KafkaTrigger {
	return v.value
}

func (v *NullableIoArgoprojEventsV1alpha1KafkaTrigger) Set(val *IoArgoprojEventsV1alpha1KafkaTrigger) {
	v.value = val
	v.isSet = true
}

func (v NullableIoArgoprojEventsV1alpha1KafkaTrigger) IsSet() bool {
	return v.isSet
}

func (v *NullableIoArgoprojEventsV1alpha1KafkaTrigger) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoArgoprojEventsV1alpha1KafkaTrigger(val *IoArgoprojEventsV1alpha1KafkaTrigger) *NullableIoArgoprojEventsV1alpha1KafkaTrigger {
	return &NullableIoArgoprojEventsV1alpha1KafkaTrigger{value: val, isSet: true}
}

func (v NullableIoArgoprojEventsV1alpha1KafkaTrigger) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoArgoprojEventsV1alpha1KafkaTrigger) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


