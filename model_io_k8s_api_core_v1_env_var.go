/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IoK8sApiCoreV1EnvVar EnvVar represents an environment variable present in a Container.
type IoK8sApiCoreV1EnvVar struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `json:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".
	Value *string `json:"value,omitempty"`
	ValueFrom *IoK8sApiCoreV1EnvVarSource `json:"valueFrom,omitempty"`
}

// NewIoK8sApiCoreV1EnvVar instantiates a new IoK8sApiCoreV1EnvVar object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoK8sApiCoreV1EnvVar(name string) *IoK8sApiCoreV1EnvVar {
	this := IoK8sApiCoreV1EnvVar{}
	this.Name = name
	return &this
}

// NewIoK8sApiCoreV1EnvVarWithDefaults instantiates a new IoK8sApiCoreV1EnvVar object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoK8sApiCoreV1EnvVarWithDefaults() *IoK8sApiCoreV1EnvVar {
	this := IoK8sApiCoreV1EnvVar{}
	return &this
}

// GetName returns the Name field value
func (o *IoK8sApiCoreV1EnvVar) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1EnvVar) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *IoK8sApiCoreV1EnvVar) SetName(v string) {
	o.Name = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1EnvVar) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1EnvVar) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1EnvVar) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *IoK8sApiCoreV1EnvVar) SetValue(v string) {
	o.Value = &v
}

// GetValueFrom returns the ValueFrom field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1EnvVar) GetValueFrom() IoK8sApiCoreV1EnvVarSource {
	if o == nil || o.ValueFrom == nil {
		var ret IoK8sApiCoreV1EnvVarSource
		return ret
	}
	return *o.ValueFrom
}

// GetValueFromOk returns a tuple with the ValueFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1EnvVar) GetValueFromOk() (*IoK8sApiCoreV1EnvVarSource, bool) {
	if o == nil || o.ValueFrom == nil {
		return nil, false
	}
	return o.ValueFrom, true
}

// HasValueFrom returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1EnvVar) HasValueFrom() bool {
	if o != nil && o.ValueFrom != nil {
		return true
	}

	return false
}

// SetValueFrom gets a reference to the given IoK8sApiCoreV1EnvVarSource and assigns it to the ValueFrom field.
func (o *IoK8sApiCoreV1EnvVar) SetValueFrom(v IoK8sApiCoreV1EnvVarSource) {
	o.ValueFrom = &v
}

func (o IoK8sApiCoreV1EnvVar) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.ValueFrom != nil {
		toSerialize["valueFrom"] = o.ValueFrom
	}
	return json.Marshal(toSerialize)
}

type NullableIoK8sApiCoreV1EnvVar struct {
	value *IoK8sApiCoreV1EnvVar
	isSet bool
}

func (v NullableIoK8sApiCoreV1EnvVar) Get() *IoK8sApiCoreV1EnvVar {
	return v.value
}

func (v *NullableIoK8sApiCoreV1EnvVar) Set(val *IoK8sApiCoreV1EnvVar) {
	v.value = val
	v.isSet = true
}

func (v NullableIoK8sApiCoreV1EnvVar) IsSet() bool {
	return v.isSet
}

func (v *NullableIoK8sApiCoreV1EnvVar) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoK8sApiCoreV1EnvVar(val *IoK8sApiCoreV1EnvVar) *NullableIoK8sApiCoreV1EnvVar {
	return &NullableIoK8sApiCoreV1EnvVar{value: val, isSet: true}
}

func (v NullableIoK8sApiCoreV1EnvVar) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoK8sApiCoreV1EnvVar) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


