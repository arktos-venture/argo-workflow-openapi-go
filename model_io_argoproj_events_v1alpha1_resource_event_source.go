/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IoArgoprojEventsV1alpha1ResourceEventSource ResourceEventSource refers to a event-source for K8s resource related events.
type IoArgoprojEventsV1alpha1ResourceEventSource struct {
	// EventTypes is the list of event type to watch. Possible values are - ADD, UPDATE and DELETE.
	EventTypes *[]string `json:"eventTypes,omitempty"`
	Filter *IoArgoprojEventsV1alpha1ResourceFilter `json:"filter,omitempty"`
	GroupVersionResource *IoK8sApimachineryPkgApisMetaV1GroupVersionResource `json:"groupVersionResource,omitempty"`
	Metadata *map[string]string `json:"metadata,omitempty"`
	Namespace *string `json:"namespace,omitempty"`
}

// NewIoArgoprojEventsV1alpha1ResourceEventSource instantiates a new IoArgoprojEventsV1alpha1ResourceEventSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoArgoprojEventsV1alpha1ResourceEventSource() *IoArgoprojEventsV1alpha1ResourceEventSource {
	this := IoArgoprojEventsV1alpha1ResourceEventSource{}
	return &this
}

// NewIoArgoprojEventsV1alpha1ResourceEventSourceWithDefaults instantiates a new IoArgoprojEventsV1alpha1ResourceEventSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoArgoprojEventsV1alpha1ResourceEventSourceWithDefaults() *IoArgoprojEventsV1alpha1ResourceEventSource {
	this := IoArgoprojEventsV1alpha1ResourceEventSource{}
	return &this
}

// GetEventTypes returns the EventTypes field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1ResourceEventSource) GetEventTypes() []string {
	if o == nil || o.EventTypes == nil {
		var ret []string
		return ret
	}
	return *o.EventTypes
}

// GetEventTypesOk returns a tuple with the EventTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1ResourceEventSource) GetEventTypesOk() (*[]string, bool) {
	if o == nil || o.EventTypes == nil {
		return nil, false
	}
	return o.EventTypes, true
}

// HasEventTypes returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1ResourceEventSource) HasEventTypes() bool {
	if o != nil && o.EventTypes != nil {
		return true
	}

	return false
}

// SetEventTypes gets a reference to the given []string and assigns it to the EventTypes field.
func (o *IoArgoprojEventsV1alpha1ResourceEventSource) SetEventTypes(v []string) {
	o.EventTypes = &v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1ResourceEventSource) GetFilter() IoArgoprojEventsV1alpha1ResourceFilter {
	if o == nil || o.Filter == nil {
		var ret IoArgoprojEventsV1alpha1ResourceFilter
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1ResourceEventSource) GetFilterOk() (*IoArgoprojEventsV1alpha1ResourceFilter, bool) {
	if o == nil || o.Filter == nil {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1ResourceEventSource) HasFilter() bool {
	if o != nil && o.Filter != nil {
		return true
	}

	return false
}

// SetFilter gets a reference to the given IoArgoprojEventsV1alpha1ResourceFilter and assigns it to the Filter field.
func (o *IoArgoprojEventsV1alpha1ResourceEventSource) SetFilter(v IoArgoprojEventsV1alpha1ResourceFilter) {
	o.Filter = &v
}

// GetGroupVersionResource returns the GroupVersionResource field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1ResourceEventSource) GetGroupVersionResource() IoK8sApimachineryPkgApisMetaV1GroupVersionResource {
	if o == nil || o.GroupVersionResource == nil {
		var ret IoK8sApimachineryPkgApisMetaV1GroupVersionResource
		return ret
	}
	return *o.GroupVersionResource
}

// GetGroupVersionResourceOk returns a tuple with the GroupVersionResource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1ResourceEventSource) GetGroupVersionResourceOk() (*IoK8sApimachineryPkgApisMetaV1GroupVersionResource, bool) {
	if o == nil || o.GroupVersionResource == nil {
		return nil, false
	}
	return o.GroupVersionResource, true
}

// HasGroupVersionResource returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1ResourceEventSource) HasGroupVersionResource() bool {
	if o != nil && o.GroupVersionResource != nil {
		return true
	}

	return false
}

// SetGroupVersionResource gets a reference to the given IoK8sApimachineryPkgApisMetaV1GroupVersionResource and assigns it to the GroupVersionResource field.
func (o *IoArgoprojEventsV1alpha1ResourceEventSource) SetGroupVersionResource(v IoK8sApimachineryPkgApisMetaV1GroupVersionResource) {
	o.GroupVersionResource = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1ResourceEventSource) GetMetadata() map[string]string {
	if o == nil || o.Metadata == nil {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1ResourceEventSource) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1ResourceEventSource) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *IoArgoprojEventsV1alpha1ResourceEventSource) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1ResourceEventSource) GetNamespace() string {
	if o == nil || o.Namespace == nil {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1ResourceEventSource) GetNamespaceOk() (*string, bool) {
	if o == nil || o.Namespace == nil {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1ResourceEventSource) HasNamespace() bool {
	if o != nil && o.Namespace != nil {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *IoArgoprojEventsV1alpha1ResourceEventSource) SetNamespace(v string) {
	o.Namespace = &v
}

func (o IoArgoprojEventsV1alpha1ResourceEventSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EventTypes != nil {
		toSerialize["eventTypes"] = o.EventTypes
	}
	if o.Filter != nil {
		toSerialize["filter"] = o.Filter
	}
	if o.GroupVersionResource != nil {
		toSerialize["groupVersionResource"] = o.GroupVersionResource
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Namespace != nil {
		toSerialize["namespace"] = o.Namespace
	}
	return json.Marshal(toSerialize)
}

type NullableIoArgoprojEventsV1alpha1ResourceEventSource struct {
	value *IoArgoprojEventsV1alpha1ResourceEventSource
	isSet bool
}

func (v NullableIoArgoprojEventsV1alpha1ResourceEventSource) Get() *IoArgoprojEventsV1alpha1ResourceEventSource {
	return v.value
}

func (v *NullableIoArgoprojEventsV1alpha1ResourceEventSource) Set(val *IoArgoprojEventsV1alpha1ResourceEventSource) {
	v.value = val
	v.isSet = true
}

func (v NullableIoArgoprojEventsV1alpha1ResourceEventSource) IsSet() bool {
	return v.isSet
}

func (v *NullableIoArgoprojEventsV1alpha1ResourceEventSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoArgoprojEventsV1alpha1ResourceEventSource(val *IoArgoprojEventsV1alpha1ResourceEventSource) *NullableIoArgoprojEventsV1alpha1ResourceEventSource {
	return &NullableIoArgoprojEventsV1alpha1ResourceEventSource{value: val, isSet: true}
}

func (v NullableIoArgoprojEventsV1alpha1ResourceEventSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoArgoprojEventsV1alpha1ResourceEventSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


