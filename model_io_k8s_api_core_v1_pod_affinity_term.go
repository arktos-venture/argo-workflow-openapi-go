/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IoK8sApiCoreV1PodAffinityTerm Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
type IoK8sApiCoreV1PodAffinityTerm struct {
	LabelSelector *IoK8sApimachineryPkgApisMetaV1LabelSelector `json:"labelSelector,omitempty"`
	// namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"
	Namespaces *[]string `json:"namespaces,omitempty"`
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey string `json:"topologyKey"`
}

// NewIoK8sApiCoreV1PodAffinityTerm instantiates a new IoK8sApiCoreV1PodAffinityTerm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoK8sApiCoreV1PodAffinityTerm(topologyKey string) *IoK8sApiCoreV1PodAffinityTerm {
	this := IoK8sApiCoreV1PodAffinityTerm{}
	this.TopologyKey = topologyKey
	return &this
}

// NewIoK8sApiCoreV1PodAffinityTermWithDefaults instantiates a new IoK8sApiCoreV1PodAffinityTerm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoK8sApiCoreV1PodAffinityTermWithDefaults() *IoK8sApiCoreV1PodAffinityTerm {
	this := IoK8sApiCoreV1PodAffinityTerm{}
	return &this
}

// GetLabelSelector returns the LabelSelector field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1PodAffinityTerm) GetLabelSelector() IoK8sApimachineryPkgApisMetaV1LabelSelector {
	if o == nil || o.LabelSelector == nil {
		var ret IoK8sApimachineryPkgApisMetaV1LabelSelector
		return ret
	}
	return *o.LabelSelector
}

// GetLabelSelectorOk returns a tuple with the LabelSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1PodAffinityTerm) GetLabelSelectorOk() (*IoK8sApimachineryPkgApisMetaV1LabelSelector, bool) {
	if o == nil || o.LabelSelector == nil {
		return nil, false
	}
	return o.LabelSelector, true
}

// HasLabelSelector returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1PodAffinityTerm) HasLabelSelector() bool {
	if o != nil && o.LabelSelector != nil {
		return true
	}

	return false
}

// SetLabelSelector gets a reference to the given IoK8sApimachineryPkgApisMetaV1LabelSelector and assigns it to the LabelSelector field.
func (o *IoK8sApiCoreV1PodAffinityTerm) SetLabelSelector(v IoK8sApimachineryPkgApisMetaV1LabelSelector) {
	o.LabelSelector = &v
}

// GetNamespaces returns the Namespaces field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1PodAffinityTerm) GetNamespaces() []string {
	if o == nil || o.Namespaces == nil {
		var ret []string
		return ret
	}
	return *o.Namespaces
}

// GetNamespacesOk returns a tuple with the Namespaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1PodAffinityTerm) GetNamespacesOk() (*[]string, bool) {
	if o == nil || o.Namespaces == nil {
		return nil, false
	}
	return o.Namespaces, true
}

// HasNamespaces returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1PodAffinityTerm) HasNamespaces() bool {
	if o != nil && o.Namespaces != nil {
		return true
	}

	return false
}

// SetNamespaces gets a reference to the given []string and assigns it to the Namespaces field.
func (o *IoK8sApiCoreV1PodAffinityTerm) SetNamespaces(v []string) {
	o.Namespaces = &v
}

// GetTopologyKey returns the TopologyKey field value
func (o *IoK8sApiCoreV1PodAffinityTerm) GetTopologyKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TopologyKey
}

// GetTopologyKeyOk returns a tuple with the TopologyKey field value
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1PodAffinityTerm) GetTopologyKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TopologyKey, true
}

// SetTopologyKey sets field value
func (o *IoK8sApiCoreV1PodAffinityTerm) SetTopologyKey(v string) {
	o.TopologyKey = v
}

func (o IoK8sApiCoreV1PodAffinityTerm) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LabelSelector != nil {
		toSerialize["labelSelector"] = o.LabelSelector
	}
	if o.Namespaces != nil {
		toSerialize["namespaces"] = o.Namespaces
	}
	if true {
		toSerialize["topologyKey"] = o.TopologyKey
	}
	return json.Marshal(toSerialize)
}

type NullableIoK8sApiCoreV1PodAffinityTerm struct {
	value *IoK8sApiCoreV1PodAffinityTerm
	isSet bool
}

func (v NullableIoK8sApiCoreV1PodAffinityTerm) Get() *IoK8sApiCoreV1PodAffinityTerm {
	return v.value
}

func (v *NullableIoK8sApiCoreV1PodAffinityTerm) Set(val *IoK8sApiCoreV1PodAffinityTerm) {
	v.value = val
	v.isSet = true
}

func (v NullableIoK8sApiCoreV1PodAffinityTerm) IsSet() bool {
	return v.isSet
}

func (v *NullableIoK8sApiCoreV1PodAffinityTerm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoK8sApiCoreV1PodAffinityTerm(val *IoK8sApiCoreV1PodAffinityTerm) *NullableIoK8sApiCoreV1PodAffinityTerm {
	return &NullableIoK8sApiCoreV1PodAffinityTerm{value: val, isSet: true}
}

func (v NullableIoK8sApiCoreV1PodAffinityTerm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoK8sApiCoreV1PodAffinityTerm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


