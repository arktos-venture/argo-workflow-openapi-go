/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IoK8sApiCoreV1SecretEnvSource SecretEnvSource selects a Secret to populate the environment variables with.  The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
type IoK8sApiCoreV1SecretEnvSource struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `json:"name,omitempty"`
	// Specify whether the Secret must be defined
	Optional *bool `json:"optional,omitempty"`
}

// NewIoK8sApiCoreV1SecretEnvSource instantiates a new IoK8sApiCoreV1SecretEnvSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoK8sApiCoreV1SecretEnvSource() *IoK8sApiCoreV1SecretEnvSource {
	this := IoK8sApiCoreV1SecretEnvSource{}
	return &this
}

// NewIoK8sApiCoreV1SecretEnvSourceWithDefaults instantiates a new IoK8sApiCoreV1SecretEnvSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoK8sApiCoreV1SecretEnvSourceWithDefaults() *IoK8sApiCoreV1SecretEnvSource {
	this := IoK8sApiCoreV1SecretEnvSource{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1SecretEnvSource) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1SecretEnvSource) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1SecretEnvSource) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IoK8sApiCoreV1SecretEnvSource) SetName(v string) {
	o.Name = &v
}

// GetOptional returns the Optional field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1SecretEnvSource) GetOptional() bool {
	if o == nil || o.Optional == nil {
		var ret bool
		return ret
	}
	return *o.Optional
}

// GetOptionalOk returns a tuple with the Optional field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1SecretEnvSource) GetOptionalOk() (*bool, bool) {
	if o == nil || o.Optional == nil {
		return nil, false
	}
	return o.Optional, true
}

// HasOptional returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1SecretEnvSource) HasOptional() bool {
	if o != nil && o.Optional != nil {
		return true
	}

	return false
}

// SetOptional gets a reference to the given bool and assigns it to the Optional field.
func (o *IoK8sApiCoreV1SecretEnvSource) SetOptional(v bool) {
	o.Optional = &v
}

func (o IoK8sApiCoreV1SecretEnvSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Optional != nil {
		toSerialize["optional"] = o.Optional
	}
	return json.Marshal(toSerialize)
}

type NullableIoK8sApiCoreV1SecretEnvSource struct {
	value *IoK8sApiCoreV1SecretEnvSource
	isSet bool
}

func (v NullableIoK8sApiCoreV1SecretEnvSource) Get() *IoK8sApiCoreV1SecretEnvSource {
	return v.value
}

func (v *NullableIoK8sApiCoreV1SecretEnvSource) Set(val *IoK8sApiCoreV1SecretEnvSource) {
	v.value = val
	v.isSet = true
}

func (v NullableIoK8sApiCoreV1SecretEnvSource) IsSet() bool {
	return v.isSet
}

func (v *NullableIoK8sApiCoreV1SecretEnvSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoK8sApiCoreV1SecretEnvSource(val *IoK8sApiCoreV1SecretEnvSource) *NullableIoK8sApiCoreV1SecretEnvSource {
	return &NullableIoK8sApiCoreV1SecretEnvSource{value: val, isSet: true}
}

func (v NullableIoK8sApiCoreV1SecretEnvSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoK8sApiCoreV1SecretEnvSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


