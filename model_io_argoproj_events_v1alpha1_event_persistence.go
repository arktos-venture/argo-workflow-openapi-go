/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IoArgoprojEventsV1alpha1EventPersistence struct for IoArgoprojEventsV1alpha1EventPersistence
type IoArgoprojEventsV1alpha1EventPersistence struct {
	Catchup *IoArgoprojEventsV1alpha1CatchupConfiguration `json:"catchup,omitempty"`
	ConfigMap *IoArgoprojEventsV1alpha1ConfigMapPersistence `json:"configMap,omitempty"`
}

// NewIoArgoprojEventsV1alpha1EventPersistence instantiates a new IoArgoprojEventsV1alpha1EventPersistence object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoArgoprojEventsV1alpha1EventPersistence() *IoArgoprojEventsV1alpha1EventPersistence {
	this := IoArgoprojEventsV1alpha1EventPersistence{}
	return &this
}

// NewIoArgoprojEventsV1alpha1EventPersistenceWithDefaults instantiates a new IoArgoprojEventsV1alpha1EventPersistence object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoArgoprojEventsV1alpha1EventPersistenceWithDefaults() *IoArgoprojEventsV1alpha1EventPersistence {
	this := IoArgoprojEventsV1alpha1EventPersistence{}
	return &this
}

// GetCatchup returns the Catchup field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1EventPersistence) GetCatchup() IoArgoprojEventsV1alpha1CatchupConfiguration {
	if o == nil || o.Catchup == nil {
		var ret IoArgoprojEventsV1alpha1CatchupConfiguration
		return ret
	}
	return *o.Catchup
}

// GetCatchupOk returns a tuple with the Catchup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1EventPersistence) GetCatchupOk() (*IoArgoprojEventsV1alpha1CatchupConfiguration, bool) {
	if o == nil || o.Catchup == nil {
		return nil, false
	}
	return o.Catchup, true
}

// HasCatchup returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1EventPersistence) HasCatchup() bool {
	if o != nil && o.Catchup != nil {
		return true
	}

	return false
}

// SetCatchup gets a reference to the given IoArgoprojEventsV1alpha1CatchupConfiguration and assigns it to the Catchup field.
func (o *IoArgoprojEventsV1alpha1EventPersistence) SetCatchup(v IoArgoprojEventsV1alpha1CatchupConfiguration) {
	o.Catchup = &v
}

// GetConfigMap returns the ConfigMap field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1EventPersistence) GetConfigMap() IoArgoprojEventsV1alpha1ConfigMapPersistence {
	if o == nil || o.ConfigMap == nil {
		var ret IoArgoprojEventsV1alpha1ConfigMapPersistence
		return ret
	}
	return *o.ConfigMap
}

// GetConfigMapOk returns a tuple with the ConfigMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1EventPersistence) GetConfigMapOk() (*IoArgoprojEventsV1alpha1ConfigMapPersistence, bool) {
	if o == nil || o.ConfigMap == nil {
		return nil, false
	}
	return o.ConfigMap, true
}

// HasConfigMap returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1EventPersistence) HasConfigMap() bool {
	if o != nil && o.ConfigMap != nil {
		return true
	}

	return false
}

// SetConfigMap gets a reference to the given IoArgoprojEventsV1alpha1ConfigMapPersistence and assigns it to the ConfigMap field.
func (o *IoArgoprojEventsV1alpha1EventPersistence) SetConfigMap(v IoArgoprojEventsV1alpha1ConfigMapPersistence) {
	o.ConfigMap = &v
}

func (o IoArgoprojEventsV1alpha1EventPersistence) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Catchup != nil {
		toSerialize["catchup"] = o.Catchup
	}
	if o.ConfigMap != nil {
		toSerialize["configMap"] = o.ConfigMap
	}
	return json.Marshal(toSerialize)
}

type NullableIoArgoprojEventsV1alpha1EventPersistence struct {
	value *IoArgoprojEventsV1alpha1EventPersistence
	isSet bool
}

func (v NullableIoArgoprojEventsV1alpha1EventPersistence) Get() *IoArgoprojEventsV1alpha1EventPersistence {
	return v.value
}

func (v *NullableIoArgoprojEventsV1alpha1EventPersistence) Set(val *IoArgoprojEventsV1alpha1EventPersistence) {
	v.value = val
	v.isSet = true
}

func (v NullableIoArgoprojEventsV1alpha1EventPersistence) IsSet() bool {
	return v.isSet
}

func (v *NullableIoArgoprojEventsV1alpha1EventPersistence) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoArgoprojEventsV1alpha1EventPersistence(val *IoArgoprojEventsV1alpha1EventPersistence) *NullableIoArgoprojEventsV1alpha1EventPersistence {
	return &NullableIoArgoprojEventsV1alpha1EventPersistence{value: val, isSet: true}
}

func (v NullableIoArgoprojEventsV1alpha1EventPersistence) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoArgoprojEventsV1alpha1EventPersistence) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


