/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource struct for GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource
type GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource struct {
	AwsElasticBlockStore *IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource `json:"awsElasticBlockStore,omitempty"`
	AzureDisk *IoK8sApiCoreV1AzureDiskVolumeSource `json:"azureDisk,omitempty"`
	AzureFile *IoK8sApiCoreV1AzureFileVolumeSource `json:"azureFile,omitempty"`
	Cephfs *IoK8sApiCoreV1CephFSVolumeSource `json:"cephfs,omitempty"`
	Cinder *IoK8sApiCoreV1CinderVolumeSource `json:"cinder,omitempty"`
	ConfigMap *IoK8sApiCoreV1ConfigMapVolumeSource `json:"configMap,omitempty"`
	Csi *IoK8sApiCoreV1CSIVolumeSource `json:"csi,omitempty"`
	DownwardAPI *IoK8sApiCoreV1DownwardAPIVolumeSource `json:"downwardAPI,omitempty"`
	EmptyDir *IoK8sApiCoreV1EmptyDirVolumeSource `json:"emptyDir,omitempty"`
	Ephemeral *IoK8sApiCoreV1EphemeralVolumeSource `json:"ephemeral,omitempty"`
	Fc *IoK8sApiCoreV1FCVolumeSource `json:"fc,omitempty"`
	FlexVolume *IoK8sApiCoreV1FlexVolumeSource `json:"flexVolume,omitempty"`
	Flocker *IoK8sApiCoreV1FlockerVolumeSource `json:"flocker,omitempty"`
	GcePersistentDisk *IoK8sApiCoreV1GCEPersistentDiskVolumeSource `json:"gcePersistentDisk,omitempty"`
	GitRepo *IoK8sApiCoreV1GitRepoVolumeSource `json:"gitRepo,omitempty"`
	Glusterfs *IoK8sApiCoreV1GlusterfsVolumeSource `json:"glusterfs,omitempty"`
	HostPath *IoK8sApiCoreV1HostPathVolumeSource `json:"hostPath,omitempty"`
	Iscsi *IoK8sApiCoreV1ISCSIVolumeSource `json:"iscsi,omitempty"`
	Nfs *IoK8sApiCoreV1NFSVolumeSource `json:"nfs,omitempty"`
	PersistentVolumeClaim *IoK8sApiCoreV1PersistentVolumeClaimVolumeSource `json:"persistentVolumeClaim,omitempty"`
	PhotonPersistentDisk *IoK8sApiCoreV1PhotonPersistentDiskVolumeSource `json:"photonPersistentDisk,omitempty"`
	PortworxVolume *IoK8sApiCoreV1PortworxVolumeSource `json:"portworxVolume,omitempty"`
	Projected *IoK8sApiCoreV1ProjectedVolumeSource `json:"projected,omitempty"`
	Quobyte *IoK8sApiCoreV1QuobyteVolumeSource `json:"quobyte,omitempty"`
	Rbd *IoK8sApiCoreV1RBDVolumeSource `json:"rbd,omitempty"`
	ScaleIO *IoK8sApiCoreV1ScaleIOVolumeSource `json:"scaleIO,omitempty"`
	Secret *IoK8sApiCoreV1SecretVolumeSource `json:"secret,omitempty"`
	Storageos *IoK8sApiCoreV1StorageOSVolumeSource `json:"storageos,omitempty"`
	VsphereVolume *IoK8sApiCoreV1VsphereVirtualDiskVolumeSource `json:"vsphereVolume,omitempty"`
}

// NewGithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource instantiates a new GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource() *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource {
	this := GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource{}
	return &this
}

// NewGithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSourceWithDefaults instantiates a new GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSourceWithDefaults() *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource {
	this := GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource{}
	return &this
}

// GetAwsElasticBlockStore returns the AwsElasticBlockStore field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetAwsElasticBlockStore() IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource {
	if o == nil || o.AwsElasticBlockStore == nil {
		var ret IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource
		return ret
	}
	return *o.AwsElasticBlockStore
}

// GetAwsElasticBlockStoreOk returns a tuple with the AwsElasticBlockStore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetAwsElasticBlockStoreOk() (*IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource, bool) {
	if o == nil || o.AwsElasticBlockStore == nil {
		return nil, false
	}
	return o.AwsElasticBlockStore, true
}

// HasAwsElasticBlockStore returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) HasAwsElasticBlockStore() bool {
	if o != nil && o.AwsElasticBlockStore != nil {
		return true
	}

	return false
}

// SetAwsElasticBlockStore gets a reference to the given IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource and assigns it to the AwsElasticBlockStore field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) SetAwsElasticBlockStore(v IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource) {
	o.AwsElasticBlockStore = &v
}

// GetAzureDisk returns the AzureDisk field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetAzureDisk() IoK8sApiCoreV1AzureDiskVolumeSource {
	if o == nil || o.AzureDisk == nil {
		var ret IoK8sApiCoreV1AzureDiskVolumeSource
		return ret
	}
	return *o.AzureDisk
}

// GetAzureDiskOk returns a tuple with the AzureDisk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetAzureDiskOk() (*IoK8sApiCoreV1AzureDiskVolumeSource, bool) {
	if o == nil || o.AzureDisk == nil {
		return nil, false
	}
	return o.AzureDisk, true
}

// HasAzureDisk returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) HasAzureDisk() bool {
	if o != nil && o.AzureDisk != nil {
		return true
	}

	return false
}

// SetAzureDisk gets a reference to the given IoK8sApiCoreV1AzureDiskVolumeSource and assigns it to the AzureDisk field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) SetAzureDisk(v IoK8sApiCoreV1AzureDiskVolumeSource) {
	o.AzureDisk = &v
}

// GetAzureFile returns the AzureFile field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetAzureFile() IoK8sApiCoreV1AzureFileVolumeSource {
	if o == nil || o.AzureFile == nil {
		var ret IoK8sApiCoreV1AzureFileVolumeSource
		return ret
	}
	return *o.AzureFile
}

// GetAzureFileOk returns a tuple with the AzureFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetAzureFileOk() (*IoK8sApiCoreV1AzureFileVolumeSource, bool) {
	if o == nil || o.AzureFile == nil {
		return nil, false
	}
	return o.AzureFile, true
}

// HasAzureFile returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) HasAzureFile() bool {
	if o != nil && o.AzureFile != nil {
		return true
	}

	return false
}

// SetAzureFile gets a reference to the given IoK8sApiCoreV1AzureFileVolumeSource and assigns it to the AzureFile field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) SetAzureFile(v IoK8sApiCoreV1AzureFileVolumeSource) {
	o.AzureFile = &v
}

// GetCephfs returns the Cephfs field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetCephfs() IoK8sApiCoreV1CephFSVolumeSource {
	if o == nil || o.Cephfs == nil {
		var ret IoK8sApiCoreV1CephFSVolumeSource
		return ret
	}
	return *o.Cephfs
}

// GetCephfsOk returns a tuple with the Cephfs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetCephfsOk() (*IoK8sApiCoreV1CephFSVolumeSource, bool) {
	if o == nil || o.Cephfs == nil {
		return nil, false
	}
	return o.Cephfs, true
}

// HasCephfs returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) HasCephfs() bool {
	if o != nil && o.Cephfs != nil {
		return true
	}

	return false
}

// SetCephfs gets a reference to the given IoK8sApiCoreV1CephFSVolumeSource and assigns it to the Cephfs field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) SetCephfs(v IoK8sApiCoreV1CephFSVolumeSource) {
	o.Cephfs = &v
}

// GetCinder returns the Cinder field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetCinder() IoK8sApiCoreV1CinderVolumeSource {
	if o == nil || o.Cinder == nil {
		var ret IoK8sApiCoreV1CinderVolumeSource
		return ret
	}
	return *o.Cinder
}

// GetCinderOk returns a tuple with the Cinder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetCinderOk() (*IoK8sApiCoreV1CinderVolumeSource, bool) {
	if o == nil || o.Cinder == nil {
		return nil, false
	}
	return o.Cinder, true
}

// HasCinder returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) HasCinder() bool {
	if o != nil && o.Cinder != nil {
		return true
	}

	return false
}

// SetCinder gets a reference to the given IoK8sApiCoreV1CinderVolumeSource and assigns it to the Cinder field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) SetCinder(v IoK8sApiCoreV1CinderVolumeSource) {
	o.Cinder = &v
}

// GetConfigMap returns the ConfigMap field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetConfigMap() IoK8sApiCoreV1ConfigMapVolumeSource {
	if o == nil || o.ConfigMap == nil {
		var ret IoK8sApiCoreV1ConfigMapVolumeSource
		return ret
	}
	return *o.ConfigMap
}

// GetConfigMapOk returns a tuple with the ConfigMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetConfigMapOk() (*IoK8sApiCoreV1ConfigMapVolumeSource, bool) {
	if o == nil || o.ConfigMap == nil {
		return nil, false
	}
	return o.ConfigMap, true
}

// HasConfigMap returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) HasConfigMap() bool {
	if o != nil && o.ConfigMap != nil {
		return true
	}

	return false
}

// SetConfigMap gets a reference to the given IoK8sApiCoreV1ConfigMapVolumeSource and assigns it to the ConfigMap field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) SetConfigMap(v IoK8sApiCoreV1ConfigMapVolumeSource) {
	o.ConfigMap = &v
}

// GetCsi returns the Csi field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetCsi() IoK8sApiCoreV1CSIVolumeSource {
	if o == nil || o.Csi == nil {
		var ret IoK8sApiCoreV1CSIVolumeSource
		return ret
	}
	return *o.Csi
}

// GetCsiOk returns a tuple with the Csi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetCsiOk() (*IoK8sApiCoreV1CSIVolumeSource, bool) {
	if o == nil || o.Csi == nil {
		return nil, false
	}
	return o.Csi, true
}

// HasCsi returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) HasCsi() bool {
	if o != nil && o.Csi != nil {
		return true
	}

	return false
}

// SetCsi gets a reference to the given IoK8sApiCoreV1CSIVolumeSource and assigns it to the Csi field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) SetCsi(v IoK8sApiCoreV1CSIVolumeSource) {
	o.Csi = &v
}

// GetDownwardAPI returns the DownwardAPI field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetDownwardAPI() IoK8sApiCoreV1DownwardAPIVolumeSource {
	if o == nil || o.DownwardAPI == nil {
		var ret IoK8sApiCoreV1DownwardAPIVolumeSource
		return ret
	}
	return *o.DownwardAPI
}

// GetDownwardAPIOk returns a tuple with the DownwardAPI field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetDownwardAPIOk() (*IoK8sApiCoreV1DownwardAPIVolumeSource, bool) {
	if o == nil || o.DownwardAPI == nil {
		return nil, false
	}
	return o.DownwardAPI, true
}

// HasDownwardAPI returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) HasDownwardAPI() bool {
	if o != nil && o.DownwardAPI != nil {
		return true
	}

	return false
}

// SetDownwardAPI gets a reference to the given IoK8sApiCoreV1DownwardAPIVolumeSource and assigns it to the DownwardAPI field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) SetDownwardAPI(v IoK8sApiCoreV1DownwardAPIVolumeSource) {
	o.DownwardAPI = &v
}

// GetEmptyDir returns the EmptyDir field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetEmptyDir() IoK8sApiCoreV1EmptyDirVolumeSource {
	if o == nil || o.EmptyDir == nil {
		var ret IoK8sApiCoreV1EmptyDirVolumeSource
		return ret
	}
	return *o.EmptyDir
}

// GetEmptyDirOk returns a tuple with the EmptyDir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetEmptyDirOk() (*IoK8sApiCoreV1EmptyDirVolumeSource, bool) {
	if o == nil || o.EmptyDir == nil {
		return nil, false
	}
	return o.EmptyDir, true
}

// HasEmptyDir returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) HasEmptyDir() bool {
	if o != nil && o.EmptyDir != nil {
		return true
	}

	return false
}

// SetEmptyDir gets a reference to the given IoK8sApiCoreV1EmptyDirVolumeSource and assigns it to the EmptyDir field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) SetEmptyDir(v IoK8sApiCoreV1EmptyDirVolumeSource) {
	o.EmptyDir = &v
}

// GetEphemeral returns the Ephemeral field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetEphemeral() IoK8sApiCoreV1EphemeralVolumeSource {
	if o == nil || o.Ephemeral == nil {
		var ret IoK8sApiCoreV1EphemeralVolumeSource
		return ret
	}
	return *o.Ephemeral
}

// GetEphemeralOk returns a tuple with the Ephemeral field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetEphemeralOk() (*IoK8sApiCoreV1EphemeralVolumeSource, bool) {
	if o == nil || o.Ephemeral == nil {
		return nil, false
	}
	return o.Ephemeral, true
}

// HasEphemeral returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) HasEphemeral() bool {
	if o != nil && o.Ephemeral != nil {
		return true
	}

	return false
}

// SetEphemeral gets a reference to the given IoK8sApiCoreV1EphemeralVolumeSource and assigns it to the Ephemeral field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) SetEphemeral(v IoK8sApiCoreV1EphemeralVolumeSource) {
	o.Ephemeral = &v
}

// GetFc returns the Fc field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetFc() IoK8sApiCoreV1FCVolumeSource {
	if o == nil || o.Fc == nil {
		var ret IoK8sApiCoreV1FCVolumeSource
		return ret
	}
	return *o.Fc
}

// GetFcOk returns a tuple with the Fc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetFcOk() (*IoK8sApiCoreV1FCVolumeSource, bool) {
	if o == nil || o.Fc == nil {
		return nil, false
	}
	return o.Fc, true
}

// HasFc returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) HasFc() bool {
	if o != nil && o.Fc != nil {
		return true
	}

	return false
}

// SetFc gets a reference to the given IoK8sApiCoreV1FCVolumeSource and assigns it to the Fc field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) SetFc(v IoK8sApiCoreV1FCVolumeSource) {
	o.Fc = &v
}

// GetFlexVolume returns the FlexVolume field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetFlexVolume() IoK8sApiCoreV1FlexVolumeSource {
	if o == nil || o.FlexVolume == nil {
		var ret IoK8sApiCoreV1FlexVolumeSource
		return ret
	}
	return *o.FlexVolume
}

// GetFlexVolumeOk returns a tuple with the FlexVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetFlexVolumeOk() (*IoK8sApiCoreV1FlexVolumeSource, bool) {
	if o == nil || o.FlexVolume == nil {
		return nil, false
	}
	return o.FlexVolume, true
}

// HasFlexVolume returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) HasFlexVolume() bool {
	if o != nil && o.FlexVolume != nil {
		return true
	}

	return false
}

// SetFlexVolume gets a reference to the given IoK8sApiCoreV1FlexVolumeSource and assigns it to the FlexVolume field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) SetFlexVolume(v IoK8sApiCoreV1FlexVolumeSource) {
	o.FlexVolume = &v
}

// GetFlocker returns the Flocker field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetFlocker() IoK8sApiCoreV1FlockerVolumeSource {
	if o == nil || o.Flocker == nil {
		var ret IoK8sApiCoreV1FlockerVolumeSource
		return ret
	}
	return *o.Flocker
}

// GetFlockerOk returns a tuple with the Flocker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetFlockerOk() (*IoK8sApiCoreV1FlockerVolumeSource, bool) {
	if o == nil || o.Flocker == nil {
		return nil, false
	}
	return o.Flocker, true
}

// HasFlocker returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) HasFlocker() bool {
	if o != nil && o.Flocker != nil {
		return true
	}

	return false
}

// SetFlocker gets a reference to the given IoK8sApiCoreV1FlockerVolumeSource and assigns it to the Flocker field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) SetFlocker(v IoK8sApiCoreV1FlockerVolumeSource) {
	o.Flocker = &v
}

// GetGcePersistentDisk returns the GcePersistentDisk field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetGcePersistentDisk() IoK8sApiCoreV1GCEPersistentDiskVolumeSource {
	if o == nil || o.GcePersistentDisk == nil {
		var ret IoK8sApiCoreV1GCEPersistentDiskVolumeSource
		return ret
	}
	return *o.GcePersistentDisk
}

// GetGcePersistentDiskOk returns a tuple with the GcePersistentDisk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetGcePersistentDiskOk() (*IoK8sApiCoreV1GCEPersistentDiskVolumeSource, bool) {
	if o == nil || o.GcePersistentDisk == nil {
		return nil, false
	}
	return o.GcePersistentDisk, true
}

// HasGcePersistentDisk returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) HasGcePersistentDisk() bool {
	if o != nil && o.GcePersistentDisk != nil {
		return true
	}

	return false
}

// SetGcePersistentDisk gets a reference to the given IoK8sApiCoreV1GCEPersistentDiskVolumeSource and assigns it to the GcePersistentDisk field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) SetGcePersistentDisk(v IoK8sApiCoreV1GCEPersistentDiskVolumeSource) {
	o.GcePersistentDisk = &v
}

// GetGitRepo returns the GitRepo field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetGitRepo() IoK8sApiCoreV1GitRepoVolumeSource {
	if o == nil || o.GitRepo == nil {
		var ret IoK8sApiCoreV1GitRepoVolumeSource
		return ret
	}
	return *o.GitRepo
}

// GetGitRepoOk returns a tuple with the GitRepo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetGitRepoOk() (*IoK8sApiCoreV1GitRepoVolumeSource, bool) {
	if o == nil || o.GitRepo == nil {
		return nil, false
	}
	return o.GitRepo, true
}

// HasGitRepo returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) HasGitRepo() bool {
	if o != nil && o.GitRepo != nil {
		return true
	}

	return false
}

// SetGitRepo gets a reference to the given IoK8sApiCoreV1GitRepoVolumeSource and assigns it to the GitRepo field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) SetGitRepo(v IoK8sApiCoreV1GitRepoVolumeSource) {
	o.GitRepo = &v
}

// GetGlusterfs returns the Glusterfs field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetGlusterfs() IoK8sApiCoreV1GlusterfsVolumeSource {
	if o == nil || o.Glusterfs == nil {
		var ret IoK8sApiCoreV1GlusterfsVolumeSource
		return ret
	}
	return *o.Glusterfs
}

// GetGlusterfsOk returns a tuple with the Glusterfs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetGlusterfsOk() (*IoK8sApiCoreV1GlusterfsVolumeSource, bool) {
	if o == nil || o.Glusterfs == nil {
		return nil, false
	}
	return o.Glusterfs, true
}

// HasGlusterfs returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) HasGlusterfs() bool {
	if o != nil && o.Glusterfs != nil {
		return true
	}

	return false
}

// SetGlusterfs gets a reference to the given IoK8sApiCoreV1GlusterfsVolumeSource and assigns it to the Glusterfs field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) SetGlusterfs(v IoK8sApiCoreV1GlusterfsVolumeSource) {
	o.Glusterfs = &v
}

// GetHostPath returns the HostPath field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetHostPath() IoK8sApiCoreV1HostPathVolumeSource {
	if o == nil || o.HostPath == nil {
		var ret IoK8sApiCoreV1HostPathVolumeSource
		return ret
	}
	return *o.HostPath
}

// GetHostPathOk returns a tuple with the HostPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetHostPathOk() (*IoK8sApiCoreV1HostPathVolumeSource, bool) {
	if o == nil || o.HostPath == nil {
		return nil, false
	}
	return o.HostPath, true
}

// HasHostPath returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) HasHostPath() bool {
	if o != nil && o.HostPath != nil {
		return true
	}

	return false
}

// SetHostPath gets a reference to the given IoK8sApiCoreV1HostPathVolumeSource and assigns it to the HostPath field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) SetHostPath(v IoK8sApiCoreV1HostPathVolumeSource) {
	o.HostPath = &v
}

// GetIscsi returns the Iscsi field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetIscsi() IoK8sApiCoreV1ISCSIVolumeSource {
	if o == nil || o.Iscsi == nil {
		var ret IoK8sApiCoreV1ISCSIVolumeSource
		return ret
	}
	return *o.Iscsi
}

// GetIscsiOk returns a tuple with the Iscsi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetIscsiOk() (*IoK8sApiCoreV1ISCSIVolumeSource, bool) {
	if o == nil || o.Iscsi == nil {
		return nil, false
	}
	return o.Iscsi, true
}

// HasIscsi returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) HasIscsi() bool {
	if o != nil && o.Iscsi != nil {
		return true
	}

	return false
}

// SetIscsi gets a reference to the given IoK8sApiCoreV1ISCSIVolumeSource and assigns it to the Iscsi field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) SetIscsi(v IoK8sApiCoreV1ISCSIVolumeSource) {
	o.Iscsi = &v
}

// GetNfs returns the Nfs field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetNfs() IoK8sApiCoreV1NFSVolumeSource {
	if o == nil || o.Nfs == nil {
		var ret IoK8sApiCoreV1NFSVolumeSource
		return ret
	}
	return *o.Nfs
}

// GetNfsOk returns a tuple with the Nfs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetNfsOk() (*IoK8sApiCoreV1NFSVolumeSource, bool) {
	if o == nil || o.Nfs == nil {
		return nil, false
	}
	return o.Nfs, true
}

// HasNfs returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) HasNfs() bool {
	if o != nil && o.Nfs != nil {
		return true
	}

	return false
}

// SetNfs gets a reference to the given IoK8sApiCoreV1NFSVolumeSource and assigns it to the Nfs field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) SetNfs(v IoK8sApiCoreV1NFSVolumeSource) {
	o.Nfs = &v
}

// GetPersistentVolumeClaim returns the PersistentVolumeClaim field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetPersistentVolumeClaim() IoK8sApiCoreV1PersistentVolumeClaimVolumeSource {
	if o == nil || o.PersistentVolumeClaim == nil {
		var ret IoK8sApiCoreV1PersistentVolumeClaimVolumeSource
		return ret
	}
	return *o.PersistentVolumeClaim
}

// GetPersistentVolumeClaimOk returns a tuple with the PersistentVolumeClaim field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetPersistentVolumeClaimOk() (*IoK8sApiCoreV1PersistentVolumeClaimVolumeSource, bool) {
	if o == nil || o.PersistentVolumeClaim == nil {
		return nil, false
	}
	return o.PersistentVolumeClaim, true
}

// HasPersistentVolumeClaim returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) HasPersistentVolumeClaim() bool {
	if o != nil && o.PersistentVolumeClaim != nil {
		return true
	}

	return false
}

// SetPersistentVolumeClaim gets a reference to the given IoK8sApiCoreV1PersistentVolumeClaimVolumeSource and assigns it to the PersistentVolumeClaim field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) SetPersistentVolumeClaim(v IoK8sApiCoreV1PersistentVolumeClaimVolumeSource) {
	o.PersistentVolumeClaim = &v
}

// GetPhotonPersistentDisk returns the PhotonPersistentDisk field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetPhotonPersistentDisk() IoK8sApiCoreV1PhotonPersistentDiskVolumeSource {
	if o == nil || o.PhotonPersistentDisk == nil {
		var ret IoK8sApiCoreV1PhotonPersistentDiskVolumeSource
		return ret
	}
	return *o.PhotonPersistentDisk
}

// GetPhotonPersistentDiskOk returns a tuple with the PhotonPersistentDisk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetPhotonPersistentDiskOk() (*IoK8sApiCoreV1PhotonPersistentDiskVolumeSource, bool) {
	if o == nil || o.PhotonPersistentDisk == nil {
		return nil, false
	}
	return o.PhotonPersistentDisk, true
}

// HasPhotonPersistentDisk returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) HasPhotonPersistentDisk() bool {
	if o != nil && o.PhotonPersistentDisk != nil {
		return true
	}

	return false
}

// SetPhotonPersistentDisk gets a reference to the given IoK8sApiCoreV1PhotonPersistentDiskVolumeSource and assigns it to the PhotonPersistentDisk field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) SetPhotonPersistentDisk(v IoK8sApiCoreV1PhotonPersistentDiskVolumeSource) {
	o.PhotonPersistentDisk = &v
}

// GetPortworxVolume returns the PortworxVolume field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetPortworxVolume() IoK8sApiCoreV1PortworxVolumeSource {
	if o == nil || o.PortworxVolume == nil {
		var ret IoK8sApiCoreV1PortworxVolumeSource
		return ret
	}
	return *o.PortworxVolume
}

// GetPortworxVolumeOk returns a tuple with the PortworxVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetPortworxVolumeOk() (*IoK8sApiCoreV1PortworxVolumeSource, bool) {
	if o == nil || o.PortworxVolume == nil {
		return nil, false
	}
	return o.PortworxVolume, true
}

// HasPortworxVolume returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) HasPortworxVolume() bool {
	if o != nil && o.PortworxVolume != nil {
		return true
	}

	return false
}

// SetPortworxVolume gets a reference to the given IoK8sApiCoreV1PortworxVolumeSource and assigns it to the PortworxVolume field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) SetPortworxVolume(v IoK8sApiCoreV1PortworxVolumeSource) {
	o.PortworxVolume = &v
}

// GetProjected returns the Projected field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetProjected() IoK8sApiCoreV1ProjectedVolumeSource {
	if o == nil || o.Projected == nil {
		var ret IoK8sApiCoreV1ProjectedVolumeSource
		return ret
	}
	return *o.Projected
}

// GetProjectedOk returns a tuple with the Projected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetProjectedOk() (*IoK8sApiCoreV1ProjectedVolumeSource, bool) {
	if o == nil || o.Projected == nil {
		return nil, false
	}
	return o.Projected, true
}

// HasProjected returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) HasProjected() bool {
	if o != nil && o.Projected != nil {
		return true
	}

	return false
}

// SetProjected gets a reference to the given IoK8sApiCoreV1ProjectedVolumeSource and assigns it to the Projected field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) SetProjected(v IoK8sApiCoreV1ProjectedVolumeSource) {
	o.Projected = &v
}

// GetQuobyte returns the Quobyte field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetQuobyte() IoK8sApiCoreV1QuobyteVolumeSource {
	if o == nil || o.Quobyte == nil {
		var ret IoK8sApiCoreV1QuobyteVolumeSource
		return ret
	}
	return *o.Quobyte
}

// GetQuobyteOk returns a tuple with the Quobyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetQuobyteOk() (*IoK8sApiCoreV1QuobyteVolumeSource, bool) {
	if o == nil || o.Quobyte == nil {
		return nil, false
	}
	return o.Quobyte, true
}

// HasQuobyte returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) HasQuobyte() bool {
	if o != nil && o.Quobyte != nil {
		return true
	}

	return false
}

// SetQuobyte gets a reference to the given IoK8sApiCoreV1QuobyteVolumeSource and assigns it to the Quobyte field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) SetQuobyte(v IoK8sApiCoreV1QuobyteVolumeSource) {
	o.Quobyte = &v
}

// GetRbd returns the Rbd field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetRbd() IoK8sApiCoreV1RBDVolumeSource {
	if o == nil || o.Rbd == nil {
		var ret IoK8sApiCoreV1RBDVolumeSource
		return ret
	}
	return *o.Rbd
}

// GetRbdOk returns a tuple with the Rbd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetRbdOk() (*IoK8sApiCoreV1RBDVolumeSource, bool) {
	if o == nil || o.Rbd == nil {
		return nil, false
	}
	return o.Rbd, true
}

// HasRbd returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) HasRbd() bool {
	if o != nil && o.Rbd != nil {
		return true
	}

	return false
}

// SetRbd gets a reference to the given IoK8sApiCoreV1RBDVolumeSource and assigns it to the Rbd field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) SetRbd(v IoK8sApiCoreV1RBDVolumeSource) {
	o.Rbd = &v
}

// GetScaleIO returns the ScaleIO field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetScaleIO() IoK8sApiCoreV1ScaleIOVolumeSource {
	if o == nil || o.ScaleIO == nil {
		var ret IoK8sApiCoreV1ScaleIOVolumeSource
		return ret
	}
	return *o.ScaleIO
}

// GetScaleIOOk returns a tuple with the ScaleIO field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetScaleIOOk() (*IoK8sApiCoreV1ScaleIOVolumeSource, bool) {
	if o == nil || o.ScaleIO == nil {
		return nil, false
	}
	return o.ScaleIO, true
}

// HasScaleIO returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) HasScaleIO() bool {
	if o != nil && o.ScaleIO != nil {
		return true
	}

	return false
}

// SetScaleIO gets a reference to the given IoK8sApiCoreV1ScaleIOVolumeSource and assigns it to the ScaleIO field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) SetScaleIO(v IoK8sApiCoreV1ScaleIOVolumeSource) {
	o.ScaleIO = &v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetSecret() IoK8sApiCoreV1SecretVolumeSource {
	if o == nil || o.Secret == nil {
		var ret IoK8sApiCoreV1SecretVolumeSource
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetSecretOk() (*IoK8sApiCoreV1SecretVolumeSource, bool) {
	if o == nil || o.Secret == nil {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) HasSecret() bool {
	if o != nil && o.Secret != nil {
		return true
	}

	return false
}

// SetSecret gets a reference to the given IoK8sApiCoreV1SecretVolumeSource and assigns it to the Secret field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) SetSecret(v IoK8sApiCoreV1SecretVolumeSource) {
	o.Secret = &v
}

// GetStorageos returns the Storageos field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetStorageos() IoK8sApiCoreV1StorageOSVolumeSource {
	if o == nil || o.Storageos == nil {
		var ret IoK8sApiCoreV1StorageOSVolumeSource
		return ret
	}
	return *o.Storageos
}

// GetStorageosOk returns a tuple with the Storageos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetStorageosOk() (*IoK8sApiCoreV1StorageOSVolumeSource, bool) {
	if o == nil || o.Storageos == nil {
		return nil, false
	}
	return o.Storageos, true
}

// HasStorageos returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) HasStorageos() bool {
	if o != nil && o.Storageos != nil {
		return true
	}

	return false
}

// SetStorageos gets a reference to the given IoK8sApiCoreV1StorageOSVolumeSource and assigns it to the Storageos field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) SetStorageos(v IoK8sApiCoreV1StorageOSVolumeSource) {
	o.Storageos = &v
}

// GetVsphereVolume returns the VsphereVolume field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetVsphereVolume() IoK8sApiCoreV1VsphereVirtualDiskVolumeSource {
	if o == nil || o.VsphereVolume == nil {
		var ret IoK8sApiCoreV1VsphereVirtualDiskVolumeSource
		return ret
	}
	return *o.VsphereVolume
}

// GetVsphereVolumeOk returns a tuple with the VsphereVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) GetVsphereVolumeOk() (*IoK8sApiCoreV1VsphereVirtualDiskVolumeSource, bool) {
	if o == nil || o.VsphereVolume == nil {
		return nil, false
	}
	return o.VsphereVolume, true
}

// HasVsphereVolume returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) HasVsphereVolume() bool {
	if o != nil && o.VsphereVolume != nil {
		return true
	}

	return false
}

// SetVsphereVolume gets a reference to the given IoK8sApiCoreV1VsphereVirtualDiskVolumeSource and assigns it to the VsphereVolume field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) SetVsphereVolume(v IoK8sApiCoreV1VsphereVirtualDiskVolumeSource) {
	o.VsphereVolume = &v
}

func (o GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AwsElasticBlockStore != nil {
		toSerialize["awsElasticBlockStore"] = o.AwsElasticBlockStore
	}
	if o.AzureDisk != nil {
		toSerialize["azureDisk"] = o.AzureDisk
	}
	if o.AzureFile != nil {
		toSerialize["azureFile"] = o.AzureFile
	}
	if o.Cephfs != nil {
		toSerialize["cephfs"] = o.Cephfs
	}
	if o.Cinder != nil {
		toSerialize["cinder"] = o.Cinder
	}
	if o.ConfigMap != nil {
		toSerialize["configMap"] = o.ConfigMap
	}
	if o.Csi != nil {
		toSerialize["csi"] = o.Csi
	}
	if o.DownwardAPI != nil {
		toSerialize["downwardAPI"] = o.DownwardAPI
	}
	if o.EmptyDir != nil {
		toSerialize["emptyDir"] = o.EmptyDir
	}
	if o.Ephemeral != nil {
		toSerialize["ephemeral"] = o.Ephemeral
	}
	if o.Fc != nil {
		toSerialize["fc"] = o.Fc
	}
	if o.FlexVolume != nil {
		toSerialize["flexVolume"] = o.FlexVolume
	}
	if o.Flocker != nil {
		toSerialize["flocker"] = o.Flocker
	}
	if o.GcePersistentDisk != nil {
		toSerialize["gcePersistentDisk"] = o.GcePersistentDisk
	}
	if o.GitRepo != nil {
		toSerialize["gitRepo"] = o.GitRepo
	}
	if o.Glusterfs != nil {
		toSerialize["glusterfs"] = o.Glusterfs
	}
	if o.HostPath != nil {
		toSerialize["hostPath"] = o.HostPath
	}
	if o.Iscsi != nil {
		toSerialize["iscsi"] = o.Iscsi
	}
	if o.Nfs != nil {
		toSerialize["nfs"] = o.Nfs
	}
	if o.PersistentVolumeClaim != nil {
		toSerialize["persistentVolumeClaim"] = o.PersistentVolumeClaim
	}
	if o.PhotonPersistentDisk != nil {
		toSerialize["photonPersistentDisk"] = o.PhotonPersistentDisk
	}
	if o.PortworxVolume != nil {
		toSerialize["portworxVolume"] = o.PortworxVolume
	}
	if o.Projected != nil {
		toSerialize["projected"] = o.Projected
	}
	if o.Quobyte != nil {
		toSerialize["quobyte"] = o.Quobyte
	}
	if o.Rbd != nil {
		toSerialize["rbd"] = o.Rbd
	}
	if o.ScaleIO != nil {
		toSerialize["scaleIO"] = o.ScaleIO
	}
	if o.Secret != nil {
		toSerialize["secret"] = o.Secret
	}
	if o.Storageos != nil {
		toSerialize["storageos"] = o.Storageos
	}
	if o.VsphereVolume != nil {
		toSerialize["vsphereVolume"] = o.VsphereVolume
	}
	return json.Marshal(toSerialize)
}

type NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource struct {
	value *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource
	isSet bool
}

func (v NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) Get() *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource {
	return v.value
}

func (v *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) Set(val *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) {
	v.value = val
	v.isSet = true
}

func (v NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) IsSet() bool {
	return v.isSet
}

func (v *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource(val *GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource {
	return &NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource{value: val, isSet: true}
}

func (v NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


