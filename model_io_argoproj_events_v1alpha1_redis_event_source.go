/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IoArgoprojEventsV1alpha1RedisEventSource struct for IoArgoprojEventsV1alpha1RedisEventSource
type IoArgoprojEventsV1alpha1RedisEventSource struct {
	Channels *[]string `json:"channels,omitempty"`
	Db *int32 `json:"db,omitempty"`
	HostAddress *string `json:"hostAddress,omitempty"`
	Metadata *map[string]string `json:"metadata,omitempty"`
	Namespace *string `json:"namespace,omitempty"`
	Password *IoK8sApiCoreV1SecretKeySelector `json:"password,omitempty"`
	Tls *IoArgoprojEventsV1alpha1TLSConfig `json:"tls,omitempty"`
}

// NewIoArgoprojEventsV1alpha1RedisEventSource instantiates a new IoArgoprojEventsV1alpha1RedisEventSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoArgoprojEventsV1alpha1RedisEventSource() *IoArgoprojEventsV1alpha1RedisEventSource {
	this := IoArgoprojEventsV1alpha1RedisEventSource{}
	return &this
}

// NewIoArgoprojEventsV1alpha1RedisEventSourceWithDefaults instantiates a new IoArgoprojEventsV1alpha1RedisEventSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoArgoprojEventsV1alpha1RedisEventSourceWithDefaults() *IoArgoprojEventsV1alpha1RedisEventSource {
	this := IoArgoprojEventsV1alpha1RedisEventSource{}
	return &this
}

// GetChannels returns the Channels field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1RedisEventSource) GetChannels() []string {
	if o == nil || o.Channels == nil {
		var ret []string
		return ret
	}
	return *o.Channels
}

// GetChannelsOk returns a tuple with the Channels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1RedisEventSource) GetChannelsOk() (*[]string, bool) {
	if o == nil || o.Channels == nil {
		return nil, false
	}
	return o.Channels, true
}

// HasChannels returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1RedisEventSource) HasChannels() bool {
	if o != nil && o.Channels != nil {
		return true
	}

	return false
}

// SetChannels gets a reference to the given []string and assigns it to the Channels field.
func (o *IoArgoprojEventsV1alpha1RedisEventSource) SetChannels(v []string) {
	o.Channels = &v
}

// GetDb returns the Db field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1RedisEventSource) GetDb() int32 {
	if o == nil || o.Db == nil {
		var ret int32
		return ret
	}
	return *o.Db
}

// GetDbOk returns a tuple with the Db field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1RedisEventSource) GetDbOk() (*int32, bool) {
	if o == nil || o.Db == nil {
		return nil, false
	}
	return o.Db, true
}

// HasDb returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1RedisEventSource) HasDb() bool {
	if o != nil && o.Db != nil {
		return true
	}

	return false
}

// SetDb gets a reference to the given int32 and assigns it to the Db field.
func (o *IoArgoprojEventsV1alpha1RedisEventSource) SetDb(v int32) {
	o.Db = &v
}

// GetHostAddress returns the HostAddress field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1RedisEventSource) GetHostAddress() string {
	if o == nil || o.HostAddress == nil {
		var ret string
		return ret
	}
	return *o.HostAddress
}

// GetHostAddressOk returns a tuple with the HostAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1RedisEventSource) GetHostAddressOk() (*string, bool) {
	if o == nil || o.HostAddress == nil {
		return nil, false
	}
	return o.HostAddress, true
}

// HasHostAddress returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1RedisEventSource) HasHostAddress() bool {
	if o != nil && o.HostAddress != nil {
		return true
	}

	return false
}

// SetHostAddress gets a reference to the given string and assigns it to the HostAddress field.
func (o *IoArgoprojEventsV1alpha1RedisEventSource) SetHostAddress(v string) {
	o.HostAddress = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1RedisEventSource) GetMetadata() map[string]string {
	if o == nil || o.Metadata == nil {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1RedisEventSource) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1RedisEventSource) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *IoArgoprojEventsV1alpha1RedisEventSource) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1RedisEventSource) GetNamespace() string {
	if o == nil || o.Namespace == nil {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1RedisEventSource) GetNamespaceOk() (*string, bool) {
	if o == nil || o.Namespace == nil {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1RedisEventSource) HasNamespace() bool {
	if o != nil && o.Namespace != nil {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *IoArgoprojEventsV1alpha1RedisEventSource) SetNamespace(v string) {
	o.Namespace = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1RedisEventSource) GetPassword() IoK8sApiCoreV1SecretKeySelector {
	if o == nil || o.Password == nil {
		var ret IoK8sApiCoreV1SecretKeySelector
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1RedisEventSource) GetPasswordOk() (*IoK8sApiCoreV1SecretKeySelector, bool) {
	if o == nil || o.Password == nil {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1RedisEventSource) HasPassword() bool {
	if o != nil && o.Password != nil {
		return true
	}

	return false
}

// SetPassword gets a reference to the given IoK8sApiCoreV1SecretKeySelector and assigns it to the Password field.
func (o *IoArgoprojEventsV1alpha1RedisEventSource) SetPassword(v IoK8sApiCoreV1SecretKeySelector) {
	o.Password = &v
}

// GetTls returns the Tls field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1RedisEventSource) GetTls() IoArgoprojEventsV1alpha1TLSConfig {
	if o == nil || o.Tls == nil {
		var ret IoArgoprojEventsV1alpha1TLSConfig
		return ret
	}
	return *o.Tls
}

// GetTlsOk returns a tuple with the Tls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1RedisEventSource) GetTlsOk() (*IoArgoprojEventsV1alpha1TLSConfig, bool) {
	if o == nil || o.Tls == nil {
		return nil, false
	}
	return o.Tls, true
}

// HasTls returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1RedisEventSource) HasTls() bool {
	if o != nil && o.Tls != nil {
		return true
	}

	return false
}

// SetTls gets a reference to the given IoArgoprojEventsV1alpha1TLSConfig and assigns it to the Tls field.
func (o *IoArgoprojEventsV1alpha1RedisEventSource) SetTls(v IoArgoprojEventsV1alpha1TLSConfig) {
	o.Tls = &v
}

func (o IoArgoprojEventsV1alpha1RedisEventSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Channels != nil {
		toSerialize["channels"] = o.Channels
	}
	if o.Db != nil {
		toSerialize["db"] = o.Db
	}
	if o.HostAddress != nil {
		toSerialize["hostAddress"] = o.HostAddress
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Namespace != nil {
		toSerialize["namespace"] = o.Namespace
	}
	if o.Password != nil {
		toSerialize["password"] = o.Password
	}
	if o.Tls != nil {
		toSerialize["tls"] = o.Tls
	}
	return json.Marshal(toSerialize)
}

type NullableIoArgoprojEventsV1alpha1RedisEventSource struct {
	value *IoArgoprojEventsV1alpha1RedisEventSource
	isSet bool
}

func (v NullableIoArgoprojEventsV1alpha1RedisEventSource) Get() *IoArgoprojEventsV1alpha1RedisEventSource {
	return v.value
}

func (v *NullableIoArgoprojEventsV1alpha1RedisEventSource) Set(val *IoArgoprojEventsV1alpha1RedisEventSource) {
	v.value = val
	v.isSet = true
}

func (v NullableIoArgoprojEventsV1alpha1RedisEventSource) IsSet() bool {
	return v.isSet
}

func (v *NullableIoArgoprojEventsV1alpha1RedisEventSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoArgoprojEventsV1alpha1RedisEventSource(val *IoArgoprojEventsV1alpha1RedisEventSource) *NullableIoArgoprojEventsV1alpha1RedisEventSource {
	return &NullableIoArgoprojEventsV1alpha1RedisEventSource{value: val, isSet: true}
}

func (v NullableIoArgoprojEventsV1alpha1RedisEventSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoArgoprojEventsV1alpha1RedisEventSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


