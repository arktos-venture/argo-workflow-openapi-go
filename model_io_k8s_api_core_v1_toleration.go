/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IoK8sApiCoreV1Toleration The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type IoK8sApiCoreV1Toleration struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect *string `json:"effect,omitempty"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key *string `json:"key,omitempty"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator *string `json:"operator,omitempty"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds *int32 `json:"tolerationSeconds,omitempty"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value *string `json:"value,omitempty"`
}

// NewIoK8sApiCoreV1Toleration instantiates a new IoK8sApiCoreV1Toleration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoK8sApiCoreV1Toleration() *IoK8sApiCoreV1Toleration {
	this := IoK8sApiCoreV1Toleration{}
	return &this
}

// NewIoK8sApiCoreV1TolerationWithDefaults instantiates a new IoK8sApiCoreV1Toleration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoK8sApiCoreV1TolerationWithDefaults() *IoK8sApiCoreV1Toleration {
	this := IoK8sApiCoreV1Toleration{}
	return &this
}

// GetEffect returns the Effect field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1Toleration) GetEffect() string {
	if o == nil || o.Effect == nil {
		var ret string
		return ret
	}
	return *o.Effect
}

// GetEffectOk returns a tuple with the Effect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1Toleration) GetEffectOk() (*string, bool) {
	if o == nil || o.Effect == nil {
		return nil, false
	}
	return o.Effect, true
}

// HasEffect returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1Toleration) HasEffect() bool {
	if o != nil && o.Effect != nil {
		return true
	}

	return false
}

// SetEffect gets a reference to the given string and assigns it to the Effect field.
func (o *IoK8sApiCoreV1Toleration) SetEffect(v string) {
	o.Effect = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1Toleration) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1Toleration) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1Toleration) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *IoK8sApiCoreV1Toleration) SetKey(v string) {
	o.Key = &v
}

// GetOperator returns the Operator field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1Toleration) GetOperator() string {
	if o == nil || o.Operator == nil {
		var ret string
		return ret
	}
	return *o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1Toleration) GetOperatorOk() (*string, bool) {
	if o == nil || o.Operator == nil {
		return nil, false
	}
	return o.Operator, true
}

// HasOperator returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1Toleration) HasOperator() bool {
	if o != nil && o.Operator != nil {
		return true
	}

	return false
}

// SetOperator gets a reference to the given string and assigns it to the Operator field.
func (o *IoK8sApiCoreV1Toleration) SetOperator(v string) {
	o.Operator = &v
}

// GetTolerationSeconds returns the TolerationSeconds field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1Toleration) GetTolerationSeconds() int32 {
	if o == nil || o.TolerationSeconds == nil {
		var ret int32
		return ret
	}
	return *o.TolerationSeconds
}

// GetTolerationSecondsOk returns a tuple with the TolerationSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1Toleration) GetTolerationSecondsOk() (*int32, bool) {
	if o == nil || o.TolerationSeconds == nil {
		return nil, false
	}
	return o.TolerationSeconds, true
}

// HasTolerationSeconds returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1Toleration) HasTolerationSeconds() bool {
	if o != nil && o.TolerationSeconds != nil {
		return true
	}

	return false
}

// SetTolerationSeconds gets a reference to the given int32 and assigns it to the TolerationSeconds field.
func (o *IoK8sApiCoreV1Toleration) SetTolerationSeconds(v int32) {
	o.TolerationSeconds = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1Toleration) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1Toleration) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1Toleration) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *IoK8sApiCoreV1Toleration) SetValue(v string) {
	o.Value = &v
}

func (o IoK8sApiCoreV1Toleration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Effect != nil {
		toSerialize["effect"] = o.Effect
	}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Operator != nil {
		toSerialize["operator"] = o.Operator
	}
	if o.TolerationSeconds != nil {
		toSerialize["tolerationSeconds"] = o.TolerationSeconds
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableIoK8sApiCoreV1Toleration struct {
	value *IoK8sApiCoreV1Toleration
	isSet bool
}

func (v NullableIoK8sApiCoreV1Toleration) Get() *IoK8sApiCoreV1Toleration {
	return v.value
}

func (v *NullableIoK8sApiCoreV1Toleration) Set(val *IoK8sApiCoreV1Toleration) {
	v.value = val
	v.isSet = true
}

func (v NullableIoK8sApiCoreV1Toleration) IsSet() bool {
	return v.isSet
}

func (v *NullableIoK8sApiCoreV1Toleration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoK8sApiCoreV1Toleration(val *IoK8sApiCoreV1Toleration) *NullableIoK8sApiCoreV1Toleration {
	return &NullableIoK8sApiCoreV1Toleration{value: val, isSet: true}
}

func (v NullableIoK8sApiCoreV1Toleration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoK8sApiCoreV1Toleration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


