/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IoArgoprojWorkflowV1alpha1NodeSynchronizationStatus NodeSynchronizationStatus stores the status of a node
type IoArgoprojWorkflowV1alpha1NodeSynchronizationStatus struct {
	// Waiting is the name of the lock that this node is waiting for
	Waiting *string `json:"waiting,omitempty"`
}

// NewIoArgoprojWorkflowV1alpha1NodeSynchronizationStatus instantiates a new IoArgoprojWorkflowV1alpha1NodeSynchronizationStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoArgoprojWorkflowV1alpha1NodeSynchronizationStatus() *IoArgoprojWorkflowV1alpha1NodeSynchronizationStatus {
	this := IoArgoprojWorkflowV1alpha1NodeSynchronizationStatus{}
	return &this
}

// NewIoArgoprojWorkflowV1alpha1NodeSynchronizationStatusWithDefaults instantiates a new IoArgoprojWorkflowV1alpha1NodeSynchronizationStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoArgoprojWorkflowV1alpha1NodeSynchronizationStatusWithDefaults() *IoArgoprojWorkflowV1alpha1NodeSynchronizationStatus {
	this := IoArgoprojWorkflowV1alpha1NodeSynchronizationStatus{}
	return &this
}

// GetWaiting returns the Waiting field value if set, zero value otherwise.
func (o *IoArgoprojWorkflowV1alpha1NodeSynchronizationStatus) GetWaiting() string {
	if o == nil || o.Waiting == nil {
		var ret string
		return ret
	}
	return *o.Waiting
}

// GetWaitingOk returns a tuple with the Waiting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojWorkflowV1alpha1NodeSynchronizationStatus) GetWaitingOk() (*string, bool) {
	if o == nil || o.Waiting == nil {
		return nil, false
	}
	return o.Waiting, true
}

// HasWaiting returns a boolean if a field has been set.
func (o *IoArgoprojWorkflowV1alpha1NodeSynchronizationStatus) HasWaiting() bool {
	if o != nil && o.Waiting != nil {
		return true
	}

	return false
}

// SetWaiting gets a reference to the given string and assigns it to the Waiting field.
func (o *IoArgoprojWorkflowV1alpha1NodeSynchronizationStatus) SetWaiting(v string) {
	o.Waiting = &v
}

func (o IoArgoprojWorkflowV1alpha1NodeSynchronizationStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Waiting != nil {
		toSerialize["waiting"] = o.Waiting
	}
	return json.Marshal(toSerialize)
}

type NullableIoArgoprojWorkflowV1alpha1NodeSynchronizationStatus struct {
	value *IoArgoprojWorkflowV1alpha1NodeSynchronizationStatus
	isSet bool
}

func (v NullableIoArgoprojWorkflowV1alpha1NodeSynchronizationStatus) Get() *IoArgoprojWorkflowV1alpha1NodeSynchronizationStatus {
	return v.value
}

func (v *NullableIoArgoprojWorkflowV1alpha1NodeSynchronizationStatus) Set(val *IoArgoprojWorkflowV1alpha1NodeSynchronizationStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableIoArgoprojWorkflowV1alpha1NodeSynchronizationStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableIoArgoprojWorkflowV1alpha1NodeSynchronizationStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoArgoprojWorkflowV1alpha1NodeSynchronizationStatus(val *IoArgoprojWorkflowV1alpha1NodeSynchronizationStatus) *NullableIoArgoprojWorkflowV1alpha1NodeSynchronizationStatus {
	return &NullableIoArgoprojWorkflowV1alpha1NodeSynchronizationStatus{value: val, isSet: true}
}

func (v NullableIoArgoprojWorkflowV1alpha1NodeSynchronizationStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoArgoprojWorkflowV1alpha1NodeSynchronizationStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


