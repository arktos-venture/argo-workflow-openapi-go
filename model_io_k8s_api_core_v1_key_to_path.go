/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IoK8sApiCoreV1KeyToPath Maps a string key to a path within a volume.
type IoK8sApiCoreV1KeyToPath struct {
	// The key to project.
	Key string `json:"key"`
	// Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode *int32 `json:"mode,omitempty"`
	// The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path string `json:"path"`
}

// NewIoK8sApiCoreV1KeyToPath instantiates a new IoK8sApiCoreV1KeyToPath object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoK8sApiCoreV1KeyToPath(key string, path string) *IoK8sApiCoreV1KeyToPath {
	this := IoK8sApiCoreV1KeyToPath{}
	this.Key = key
	this.Path = path
	return &this
}

// NewIoK8sApiCoreV1KeyToPathWithDefaults instantiates a new IoK8sApiCoreV1KeyToPath object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoK8sApiCoreV1KeyToPathWithDefaults() *IoK8sApiCoreV1KeyToPath {
	this := IoK8sApiCoreV1KeyToPath{}
	return &this
}

// GetKey returns the Key field value
func (o *IoK8sApiCoreV1KeyToPath) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1KeyToPath) GetKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *IoK8sApiCoreV1KeyToPath) SetKey(v string) {
	o.Key = v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1KeyToPath) GetMode() int32 {
	if o == nil || o.Mode == nil {
		var ret int32
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1KeyToPath) GetModeOk() (*int32, bool) {
	if o == nil || o.Mode == nil {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1KeyToPath) HasMode() bool {
	if o != nil && o.Mode != nil {
		return true
	}

	return false
}

// SetMode gets a reference to the given int32 and assigns it to the Mode field.
func (o *IoK8sApiCoreV1KeyToPath) SetMode(v int32) {
	o.Mode = &v
}

// GetPath returns the Path field value
func (o *IoK8sApiCoreV1KeyToPath) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1KeyToPath) GetPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *IoK8sApiCoreV1KeyToPath) SetPath(v string) {
	o.Path = v
}

func (o IoK8sApiCoreV1KeyToPath) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["key"] = o.Key
	}
	if o.Mode != nil {
		toSerialize["mode"] = o.Mode
	}
	if true {
		toSerialize["path"] = o.Path
	}
	return json.Marshal(toSerialize)
}

type NullableIoK8sApiCoreV1KeyToPath struct {
	value *IoK8sApiCoreV1KeyToPath
	isSet bool
}

func (v NullableIoK8sApiCoreV1KeyToPath) Get() *IoK8sApiCoreV1KeyToPath {
	return v.value
}

func (v *NullableIoK8sApiCoreV1KeyToPath) Set(val *IoK8sApiCoreV1KeyToPath) {
	v.value = val
	v.isSet = true
}

func (v NullableIoK8sApiCoreV1KeyToPath) IsSet() bool {
	return v.isSet
}

func (v *NullableIoK8sApiCoreV1KeyToPath) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoK8sApiCoreV1KeyToPath(val *IoK8sApiCoreV1KeyToPath) *NullableIoK8sApiCoreV1KeyToPath {
	return &NullableIoK8sApiCoreV1KeyToPath{value: val, isSet: true}
}

func (v NullableIoK8sApiCoreV1KeyToPath) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoK8sApiCoreV1KeyToPath) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


