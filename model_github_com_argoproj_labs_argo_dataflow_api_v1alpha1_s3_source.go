/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source struct for GithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source
type GithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source struct {
	Concurrency *int32 `json:"concurrency,omitempty"`
	PollPeriod *IoK8sApimachineryPkgApisMetaV1Duration `json:"pollPeriod,omitempty"`
	S3 *GithubComArgoprojLabsArgoDataflowApiV1alpha1S3 `json:"s3,omitempty"`
}

// NewGithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source instantiates a new GithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source() *GithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source {
	this := GithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source{}
	return &this
}

// NewGithubComArgoprojLabsArgoDataflowApiV1alpha1S3SourceWithDefaults instantiates a new GithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGithubComArgoprojLabsArgoDataflowApiV1alpha1S3SourceWithDefaults() *GithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source {
	this := GithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source{}
	return &this
}

// GetConcurrency returns the Concurrency field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source) GetConcurrency() int32 {
	if o == nil || o.Concurrency == nil {
		var ret int32
		return ret
	}
	return *o.Concurrency
}

// GetConcurrencyOk returns a tuple with the Concurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source) GetConcurrencyOk() (*int32, bool) {
	if o == nil || o.Concurrency == nil {
		return nil, false
	}
	return o.Concurrency, true
}

// HasConcurrency returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source) HasConcurrency() bool {
	if o != nil && o.Concurrency != nil {
		return true
	}

	return false
}

// SetConcurrency gets a reference to the given int32 and assigns it to the Concurrency field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source) SetConcurrency(v int32) {
	o.Concurrency = &v
}

// GetPollPeriod returns the PollPeriod field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source) GetPollPeriod() IoK8sApimachineryPkgApisMetaV1Duration {
	if o == nil || o.PollPeriod == nil {
		var ret IoK8sApimachineryPkgApisMetaV1Duration
		return ret
	}
	return *o.PollPeriod
}

// GetPollPeriodOk returns a tuple with the PollPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source) GetPollPeriodOk() (*IoK8sApimachineryPkgApisMetaV1Duration, bool) {
	if o == nil || o.PollPeriod == nil {
		return nil, false
	}
	return o.PollPeriod, true
}

// HasPollPeriod returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source) HasPollPeriod() bool {
	if o != nil && o.PollPeriod != nil {
		return true
	}

	return false
}

// SetPollPeriod gets a reference to the given IoK8sApimachineryPkgApisMetaV1Duration and assigns it to the PollPeriod field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source) SetPollPeriod(v IoK8sApimachineryPkgApisMetaV1Duration) {
	o.PollPeriod = &v
}

// GetS3 returns the S3 field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source) GetS3() GithubComArgoprojLabsArgoDataflowApiV1alpha1S3 {
	if o == nil || o.S3 == nil {
		var ret GithubComArgoprojLabsArgoDataflowApiV1alpha1S3
		return ret
	}
	return *o.S3
}

// GetS3Ok returns a tuple with the S3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source) GetS3Ok() (*GithubComArgoprojLabsArgoDataflowApiV1alpha1S3, bool) {
	if o == nil || o.S3 == nil {
		return nil, false
	}
	return o.S3, true
}

// HasS3 returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source) HasS3() bool {
	if o != nil && o.S3 != nil {
		return true
	}

	return false
}

// SetS3 gets a reference to the given GithubComArgoprojLabsArgoDataflowApiV1alpha1S3 and assigns it to the S3 field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source) SetS3(v GithubComArgoprojLabsArgoDataflowApiV1alpha1S3) {
	o.S3 = &v
}

func (o GithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Concurrency != nil {
		toSerialize["concurrency"] = o.Concurrency
	}
	if o.PollPeriod != nil {
		toSerialize["pollPeriod"] = o.PollPeriod
	}
	if o.S3 != nil {
		toSerialize["s3"] = o.S3
	}
	return json.Marshal(toSerialize)
}

type NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source struct {
	value *GithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source
	isSet bool
}

func (v NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source) Get() *GithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source {
	return v.value
}

func (v *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source) Set(val *GithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source) {
	v.value = val
	v.isSet = true
}

func (v NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source) IsSet() bool {
	return v.isSet
}

func (v *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source(val *GithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source) *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source {
	return &NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source{value: val, isSet: true}
}

func (v NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


