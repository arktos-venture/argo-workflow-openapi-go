/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IoArgoprojEventsV1alpha1CalendarEventSource struct for IoArgoprojEventsV1alpha1CalendarEventSource
type IoArgoprojEventsV1alpha1CalendarEventSource struct {
	ExclusionDates *[]string `json:"exclusionDates,omitempty"`
	// Interval is a string that describes an interval duration, e.g. 1s, 30m, 2h...
	Interval *string `json:"interval,omitempty"`
	Metadata *map[string]string `json:"metadata,omitempty"`
	Persistence *IoArgoprojEventsV1alpha1EventPersistence `json:"persistence,omitempty"`
	Schedule *string `json:"schedule,omitempty"`
	Timezone *string `json:"timezone,omitempty"`
	// UserPayload will be sent to sensor as extra data once the event is triggered +optional Deprecated: will be removed in v1.5. Please use Metadata instead.
	UserPayload *string `json:"userPayload,omitempty"`
}

// NewIoArgoprojEventsV1alpha1CalendarEventSource instantiates a new IoArgoprojEventsV1alpha1CalendarEventSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoArgoprojEventsV1alpha1CalendarEventSource() *IoArgoprojEventsV1alpha1CalendarEventSource {
	this := IoArgoprojEventsV1alpha1CalendarEventSource{}
	return &this
}

// NewIoArgoprojEventsV1alpha1CalendarEventSourceWithDefaults instantiates a new IoArgoprojEventsV1alpha1CalendarEventSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoArgoprojEventsV1alpha1CalendarEventSourceWithDefaults() *IoArgoprojEventsV1alpha1CalendarEventSource {
	this := IoArgoprojEventsV1alpha1CalendarEventSource{}
	return &this
}

// GetExclusionDates returns the ExclusionDates field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1CalendarEventSource) GetExclusionDates() []string {
	if o == nil || o.ExclusionDates == nil {
		var ret []string
		return ret
	}
	return *o.ExclusionDates
}

// GetExclusionDatesOk returns a tuple with the ExclusionDates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1CalendarEventSource) GetExclusionDatesOk() (*[]string, bool) {
	if o == nil || o.ExclusionDates == nil {
		return nil, false
	}
	return o.ExclusionDates, true
}

// HasExclusionDates returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1CalendarEventSource) HasExclusionDates() bool {
	if o != nil && o.ExclusionDates != nil {
		return true
	}

	return false
}

// SetExclusionDates gets a reference to the given []string and assigns it to the ExclusionDates field.
func (o *IoArgoprojEventsV1alpha1CalendarEventSource) SetExclusionDates(v []string) {
	o.ExclusionDates = &v
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1CalendarEventSource) GetInterval() string {
	if o == nil || o.Interval == nil {
		var ret string
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1CalendarEventSource) GetIntervalOk() (*string, bool) {
	if o == nil || o.Interval == nil {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1CalendarEventSource) HasInterval() bool {
	if o != nil && o.Interval != nil {
		return true
	}

	return false
}

// SetInterval gets a reference to the given string and assigns it to the Interval field.
func (o *IoArgoprojEventsV1alpha1CalendarEventSource) SetInterval(v string) {
	o.Interval = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1CalendarEventSource) GetMetadata() map[string]string {
	if o == nil || o.Metadata == nil {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1CalendarEventSource) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1CalendarEventSource) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *IoArgoprojEventsV1alpha1CalendarEventSource) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

// GetPersistence returns the Persistence field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1CalendarEventSource) GetPersistence() IoArgoprojEventsV1alpha1EventPersistence {
	if o == nil || o.Persistence == nil {
		var ret IoArgoprojEventsV1alpha1EventPersistence
		return ret
	}
	return *o.Persistence
}

// GetPersistenceOk returns a tuple with the Persistence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1CalendarEventSource) GetPersistenceOk() (*IoArgoprojEventsV1alpha1EventPersistence, bool) {
	if o == nil || o.Persistence == nil {
		return nil, false
	}
	return o.Persistence, true
}

// HasPersistence returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1CalendarEventSource) HasPersistence() bool {
	if o != nil && o.Persistence != nil {
		return true
	}

	return false
}

// SetPersistence gets a reference to the given IoArgoprojEventsV1alpha1EventPersistence and assigns it to the Persistence field.
func (o *IoArgoprojEventsV1alpha1CalendarEventSource) SetPersistence(v IoArgoprojEventsV1alpha1EventPersistence) {
	o.Persistence = &v
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1CalendarEventSource) GetSchedule() string {
	if o == nil || o.Schedule == nil {
		var ret string
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1CalendarEventSource) GetScheduleOk() (*string, bool) {
	if o == nil || o.Schedule == nil {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1CalendarEventSource) HasSchedule() bool {
	if o != nil && o.Schedule != nil {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given string and assigns it to the Schedule field.
func (o *IoArgoprojEventsV1alpha1CalendarEventSource) SetSchedule(v string) {
	o.Schedule = &v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1CalendarEventSource) GetTimezone() string {
	if o == nil || o.Timezone == nil {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1CalendarEventSource) GetTimezoneOk() (*string, bool) {
	if o == nil || o.Timezone == nil {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1CalendarEventSource) HasTimezone() bool {
	if o != nil && o.Timezone != nil {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *IoArgoprojEventsV1alpha1CalendarEventSource) SetTimezone(v string) {
	o.Timezone = &v
}

// GetUserPayload returns the UserPayload field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1CalendarEventSource) GetUserPayload() string {
	if o == nil || o.UserPayload == nil {
		var ret string
		return ret
	}
	return *o.UserPayload
}

// GetUserPayloadOk returns a tuple with the UserPayload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1CalendarEventSource) GetUserPayloadOk() (*string, bool) {
	if o == nil || o.UserPayload == nil {
		return nil, false
	}
	return o.UserPayload, true
}

// HasUserPayload returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1CalendarEventSource) HasUserPayload() bool {
	if o != nil && o.UserPayload != nil {
		return true
	}

	return false
}

// SetUserPayload gets a reference to the given string and assigns it to the UserPayload field.
func (o *IoArgoprojEventsV1alpha1CalendarEventSource) SetUserPayload(v string) {
	o.UserPayload = &v
}

func (o IoArgoprojEventsV1alpha1CalendarEventSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ExclusionDates != nil {
		toSerialize["exclusionDates"] = o.ExclusionDates
	}
	if o.Interval != nil {
		toSerialize["interval"] = o.Interval
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Persistence != nil {
		toSerialize["persistence"] = o.Persistence
	}
	if o.Schedule != nil {
		toSerialize["schedule"] = o.Schedule
	}
	if o.Timezone != nil {
		toSerialize["timezone"] = o.Timezone
	}
	if o.UserPayload != nil {
		toSerialize["userPayload"] = o.UserPayload
	}
	return json.Marshal(toSerialize)
}

type NullableIoArgoprojEventsV1alpha1CalendarEventSource struct {
	value *IoArgoprojEventsV1alpha1CalendarEventSource
	isSet bool
}

func (v NullableIoArgoprojEventsV1alpha1CalendarEventSource) Get() *IoArgoprojEventsV1alpha1CalendarEventSource {
	return v.value
}

func (v *NullableIoArgoprojEventsV1alpha1CalendarEventSource) Set(val *IoArgoprojEventsV1alpha1CalendarEventSource) {
	v.value = val
	v.isSet = true
}

func (v NullableIoArgoprojEventsV1alpha1CalendarEventSource) IsSet() bool {
	return v.isSet
}

func (v *NullableIoArgoprojEventsV1alpha1CalendarEventSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoArgoprojEventsV1alpha1CalendarEventSource(val *IoArgoprojEventsV1alpha1CalendarEventSource) *NullableIoArgoprojEventsV1alpha1CalendarEventSource {
	return &NullableIoArgoprojEventsV1alpha1CalendarEventSource{value: val, isSet: true}
}

func (v NullableIoArgoprojEventsV1alpha1CalendarEventSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoArgoprojEventsV1alpha1CalendarEventSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


