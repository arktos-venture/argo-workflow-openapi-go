/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IoK8sApiCoreV1CinderVolumeSource Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
type IoK8sApiCoreV1CinderVolumeSource struct {
	// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	FsType *string `json:"fsType,omitempty"`
	// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	ReadOnly *bool `json:"readOnly,omitempty"`
	SecretRef *IoK8sApiCoreV1LocalObjectReference `json:"secretRef,omitempty"`
	// volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	VolumeID string `json:"volumeID"`
}

// NewIoK8sApiCoreV1CinderVolumeSource instantiates a new IoK8sApiCoreV1CinderVolumeSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoK8sApiCoreV1CinderVolumeSource(volumeID string) *IoK8sApiCoreV1CinderVolumeSource {
	this := IoK8sApiCoreV1CinderVolumeSource{}
	this.VolumeID = volumeID
	return &this
}

// NewIoK8sApiCoreV1CinderVolumeSourceWithDefaults instantiates a new IoK8sApiCoreV1CinderVolumeSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoK8sApiCoreV1CinderVolumeSourceWithDefaults() *IoK8sApiCoreV1CinderVolumeSource {
	this := IoK8sApiCoreV1CinderVolumeSource{}
	return &this
}

// GetFsType returns the FsType field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1CinderVolumeSource) GetFsType() string {
	if o == nil || o.FsType == nil {
		var ret string
		return ret
	}
	return *o.FsType
}

// GetFsTypeOk returns a tuple with the FsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1CinderVolumeSource) GetFsTypeOk() (*string, bool) {
	if o == nil || o.FsType == nil {
		return nil, false
	}
	return o.FsType, true
}

// HasFsType returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1CinderVolumeSource) HasFsType() bool {
	if o != nil && o.FsType != nil {
		return true
	}

	return false
}

// SetFsType gets a reference to the given string and assigns it to the FsType field.
func (o *IoK8sApiCoreV1CinderVolumeSource) SetFsType(v string) {
	o.FsType = &v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1CinderVolumeSource) GetReadOnly() bool {
	if o == nil || o.ReadOnly == nil {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1CinderVolumeSource) GetReadOnlyOk() (*bool, bool) {
	if o == nil || o.ReadOnly == nil {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1CinderVolumeSource) HasReadOnly() bool {
	if o != nil && o.ReadOnly != nil {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *IoK8sApiCoreV1CinderVolumeSource) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

// GetSecretRef returns the SecretRef field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1CinderVolumeSource) GetSecretRef() IoK8sApiCoreV1LocalObjectReference {
	if o == nil || o.SecretRef == nil {
		var ret IoK8sApiCoreV1LocalObjectReference
		return ret
	}
	return *o.SecretRef
}

// GetSecretRefOk returns a tuple with the SecretRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1CinderVolumeSource) GetSecretRefOk() (*IoK8sApiCoreV1LocalObjectReference, bool) {
	if o == nil || o.SecretRef == nil {
		return nil, false
	}
	return o.SecretRef, true
}

// HasSecretRef returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1CinderVolumeSource) HasSecretRef() bool {
	if o != nil && o.SecretRef != nil {
		return true
	}

	return false
}

// SetSecretRef gets a reference to the given IoK8sApiCoreV1LocalObjectReference and assigns it to the SecretRef field.
func (o *IoK8sApiCoreV1CinderVolumeSource) SetSecretRef(v IoK8sApiCoreV1LocalObjectReference) {
	o.SecretRef = &v
}

// GetVolumeID returns the VolumeID field value
func (o *IoK8sApiCoreV1CinderVolumeSource) GetVolumeID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VolumeID
}

// GetVolumeIDOk returns a tuple with the VolumeID field value
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1CinderVolumeSource) GetVolumeIDOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.VolumeID, true
}

// SetVolumeID sets field value
func (o *IoK8sApiCoreV1CinderVolumeSource) SetVolumeID(v string) {
	o.VolumeID = v
}

func (o IoK8sApiCoreV1CinderVolumeSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FsType != nil {
		toSerialize["fsType"] = o.FsType
	}
	if o.ReadOnly != nil {
		toSerialize["readOnly"] = o.ReadOnly
	}
	if o.SecretRef != nil {
		toSerialize["secretRef"] = o.SecretRef
	}
	if true {
		toSerialize["volumeID"] = o.VolumeID
	}
	return json.Marshal(toSerialize)
}

type NullableIoK8sApiCoreV1CinderVolumeSource struct {
	value *IoK8sApiCoreV1CinderVolumeSource
	isSet bool
}

func (v NullableIoK8sApiCoreV1CinderVolumeSource) Get() *IoK8sApiCoreV1CinderVolumeSource {
	return v.value
}

func (v *NullableIoK8sApiCoreV1CinderVolumeSource) Set(val *IoK8sApiCoreV1CinderVolumeSource) {
	v.value = val
	v.isSet = true
}

func (v NullableIoK8sApiCoreV1CinderVolumeSource) IsSet() bool {
	return v.isSet
}

func (v *NullableIoK8sApiCoreV1CinderVolumeSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoK8sApiCoreV1CinderVolumeSource(val *IoK8sApiCoreV1CinderVolumeSource) *NullableIoK8sApiCoreV1CinderVolumeSource {
	return &NullableIoK8sApiCoreV1CinderVolumeSource{value: val, isSet: true}
}

func (v NullableIoK8sApiCoreV1CinderVolumeSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoK8sApiCoreV1CinderVolumeSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


