/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSink struct for GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSink
type GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSink struct {
	Async *bool `json:"async,omitempty"`
	Kafka *GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka `json:"kafka,omitempty"`
}

// NewGithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSink instantiates a new GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSink object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSink() *GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSink {
	this := GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSink{}
	return &this
}

// NewGithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSinkWithDefaults instantiates a new GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSink object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSinkWithDefaults() *GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSink {
	this := GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSink{}
	return &this
}

// GetAsync returns the Async field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSink) GetAsync() bool {
	if o == nil || o.Async == nil {
		var ret bool
		return ret
	}
	return *o.Async
}

// GetAsyncOk returns a tuple with the Async field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSink) GetAsyncOk() (*bool, bool) {
	if o == nil || o.Async == nil {
		return nil, false
	}
	return o.Async, true
}

// HasAsync returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSink) HasAsync() bool {
	if o != nil && o.Async != nil {
		return true
	}

	return false
}

// SetAsync gets a reference to the given bool and assigns it to the Async field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSink) SetAsync(v bool) {
	o.Async = &v
}

// GetKafka returns the Kafka field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSink) GetKafka() GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka {
	if o == nil || o.Kafka == nil {
		var ret GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka
		return ret
	}
	return *o.Kafka
}

// GetKafkaOk returns a tuple with the Kafka field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSink) GetKafkaOk() (*GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka, bool) {
	if o == nil || o.Kafka == nil {
		return nil, false
	}
	return o.Kafka, true
}

// HasKafka returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSink) HasKafka() bool {
	if o != nil && o.Kafka != nil {
		return true
	}

	return false
}

// SetKafka gets a reference to the given GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka and assigns it to the Kafka field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSink) SetKafka(v GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka) {
	o.Kafka = &v
}

func (o GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSink) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Async != nil {
		toSerialize["async"] = o.Async
	}
	if o.Kafka != nil {
		toSerialize["kafka"] = o.Kafka
	}
	return json.Marshal(toSerialize)
}

type NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSink struct {
	value *GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSink
	isSet bool
}

func (v NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSink) Get() *GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSink {
	return v.value
}

func (v *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSink) Set(val *GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSink) {
	v.value = val
	v.isSet = true
}

func (v NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSink) IsSet() bool {
	return v.isSet
}

func (v *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSink) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSink(val *GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSink) *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSink {
	return &NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSink{value: val, isSet: true}
}

func (v NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSink) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSink) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


