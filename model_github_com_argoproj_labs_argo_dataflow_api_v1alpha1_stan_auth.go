/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GithubComArgoprojLabsArgoDataflowApiV1alpha1STANAuth struct for GithubComArgoprojLabsArgoDataflowApiV1alpha1STANAuth
type GithubComArgoprojLabsArgoDataflowApiV1alpha1STANAuth struct {
	Token *IoK8sApiCoreV1SecretKeySelector `json:"token,omitempty"`
}

// NewGithubComArgoprojLabsArgoDataflowApiV1alpha1STANAuth instantiates a new GithubComArgoprojLabsArgoDataflowApiV1alpha1STANAuth object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGithubComArgoprojLabsArgoDataflowApiV1alpha1STANAuth() *GithubComArgoprojLabsArgoDataflowApiV1alpha1STANAuth {
	this := GithubComArgoprojLabsArgoDataflowApiV1alpha1STANAuth{}
	return &this
}

// NewGithubComArgoprojLabsArgoDataflowApiV1alpha1STANAuthWithDefaults instantiates a new GithubComArgoprojLabsArgoDataflowApiV1alpha1STANAuth object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGithubComArgoprojLabsArgoDataflowApiV1alpha1STANAuthWithDefaults() *GithubComArgoprojLabsArgoDataflowApiV1alpha1STANAuth {
	this := GithubComArgoprojLabsArgoDataflowApiV1alpha1STANAuth{}
	return &this
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1STANAuth) GetToken() IoK8sApiCoreV1SecretKeySelector {
	if o == nil || o.Token == nil {
		var ret IoK8sApiCoreV1SecretKeySelector
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1STANAuth) GetTokenOk() (*IoK8sApiCoreV1SecretKeySelector, bool) {
	if o == nil || o.Token == nil {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1STANAuth) HasToken() bool {
	if o != nil && o.Token != nil {
		return true
	}

	return false
}

// SetToken gets a reference to the given IoK8sApiCoreV1SecretKeySelector and assigns it to the Token field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1STANAuth) SetToken(v IoK8sApiCoreV1SecretKeySelector) {
	o.Token = &v
}

func (o GithubComArgoprojLabsArgoDataflowApiV1alpha1STANAuth) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Token != nil {
		toSerialize["token"] = o.Token
	}
	return json.Marshal(toSerialize)
}

type NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1STANAuth struct {
	value *GithubComArgoprojLabsArgoDataflowApiV1alpha1STANAuth
	isSet bool
}

func (v NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1STANAuth) Get() *GithubComArgoprojLabsArgoDataflowApiV1alpha1STANAuth {
	return v.value
}

func (v *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1STANAuth) Set(val *GithubComArgoprojLabsArgoDataflowApiV1alpha1STANAuth) {
	v.value = val
	v.isSet = true
}

func (v NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1STANAuth) IsSet() bool {
	return v.isSet
}

func (v *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1STANAuth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGithubComArgoprojLabsArgoDataflowApiV1alpha1STANAuth(val *GithubComArgoprojLabsArgoDataflowApiV1alpha1STANAuth) *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1STANAuth {
	return &NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1STANAuth{value: val, isSet: true}
}

func (v NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1STANAuth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1STANAuth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


