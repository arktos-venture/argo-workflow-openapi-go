/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IoK8sApiCoreV1SecurityContext SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
type IoK8sApiCoreV1SecurityContext struct {
	// AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
	AllowPrivilegeEscalation *bool `json:"allowPrivilegeEscalation,omitempty"`
	Capabilities *IoK8sApiCoreV1Capabilities `json:"capabilities,omitempty"`
	// Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
	Privileged *bool `json:"privileged,omitempty"`
	// procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.
	ProcMount *string `json:"procMount,omitempty"`
	// Whether this container has a read-only root filesystem. Default is false.
	ReadOnlyRootFilesystem *bool `json:"readOnlyRootFilesystem,omitempty"`
	// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsGroup *int32 `json:"runAsGroup,omitempty"`
	// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsNonRoot *bool `json:"runAsNonRoot,omitempty"`
	// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsUser *int32 `json:"runAsUser,omitempty"`
	SeLinuxOptions *IoK8sApiCoreV1SELinuxOptions `json:"seLinuxOptions,omitempty"`
	WindowsOptions *IoK8sApiCoreV1WindowsSecurityContextOptions `json:"windowsOptions,omitempty"`
}

// NewIoK8sApiCoreV1SecurityContext instantiates a new IoK8sApiCoreV1SecurityContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoK8sApiCoreV1SecurityContext() *IoK8sApiCoreV1SecurityContext {
	this := IoK8sApiCoreV1SecurityContext{}
	return &this
}

// NewIoK8sApiCoreV1SecurityContextWithDefaults instantiates a new IoK8sApiCoreV1SecurityContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoK8sApiCoreV1SecurityContextWithDefaults() *IoK8sApiCoreV1SecurityContext {
	this := IoK8sApiCoreV1SecurityContext{}
	return &this
}

// GetAllowPrivilegeEscalation returns the AllowPrivilegeEscalation field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1SecurityContext) GetAllowPrivilegeEscalation() bool {
	if o == nil || o.AllowPrivilegeEscalation == nil {
		var ret bool
		return ret
	}
	return *o.AllowPrivilegeEscalation
}

// GetAllowPrivilegeEscalationOk returns a tuple with the AllowPrivilegeEscalation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1SecurityContext) GetAllowPrivilegeEscalationOk() (*bool, bool) {
	if o == nil || o.AllowPrivilegeEscalation == nil {
		return nil, false
	}
	return o.AllowPrivilegeEscalation, true
}

// HasAllowPrivilegeEscalation returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1SecurityContext) HasAllowPrivilegeEscalation() bool {
	if o != nil && o.AllowPrivilegeEscalation != nil {
		return true
	}

	return false
}

// SetAllowPrivilegeEscalation gets a reference to the given bool and assigns it to the AllowPrivilegeEscalation field.
func (o *IoK8sApiCoreV1SecurityContext) SetAllowPrivilegeEscalation(v bool) {
	o.AllowPrivilegeEscalation = &v
}

// GetCapabilities returns the Capabilities field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1SecurityContext) GetCapabilities() IoK8sApiCoreV1Capabilities {
	if o == nil || o.Capabilities == nil {
		var ret IoK8sApiCoreV1Capabilities
		return ret
	}
	return *o.Capabilities
}

// GetCapabilitiesOk returns a tuple with the Capabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1SecurityContext) GetCapabilitiesOk() (*IoK8sApiCoreV1Capabilities, bool) {
	if o == nil || o.Capabilities == nil {
		return nil, false
	}
	return o.Capabilities, true
}

// HasCapabilities returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1SecurityContext) HasCapabilities() bool {
	if o != nil && o.Capabilities != nil {
		return true
	}

	return false
}

// SetCapabilities gets a reference to the given IoK8sApiCoreV1Capabilities and assigns it to the Capabilities field.
func (o *IoK8sApiCoreV1SecurityContext) SetCapabilities(v IoK8sApiCoreV1Capabilities) {
	o.Capabilities = &v
}

// GetPrivileged returns the Privileged field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1SecurityContext) GetPrivileged() bool {
	if o == nil || o.Privileged == nil {
		var ret bool
		return ret
	}
	return *o.Privileged
}

// GetPrivilegedOk returns a tuple with the Privileged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1SecurityContext) GetPrivilegedOk() (*bool, bool) {
	if o == nil || o.Privileged == nil {
		return nil, false
	}
	return o.Privileged, true
}

// HasPrivileged returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1SecurityContext) HasPrivileged() bool {
	if o != nil && o.Privileged != nil {
		return true
	}

	return false
}

// SetPrivileged gets a reference to the given bool and assigns it to the Privileged field.
func (o *IoK8sApiCoreV1SecurityContext) SetPrivileged(v bool) {
	o.Privileged = &v
}

// GetProcMount returns the ProcMount field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1SecurityContext) GetProcMount() string {
	if o == nil || o.ProcMount == nil {
		var ret string
		return ret
	}
	return *o.ProcMount
}

// GetProcMountOk returns a tuple with the ProcMount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1SecurityContext) GetProcMountOk() (*string, bool) {
	if o == nil || o.ProcMount == nil {
		return nil, false
	}
	return o.ProcMount, true
}

// HasProcMount returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1SecurityContext) HasProcMount() bool {
	if o != nil && o.ProcMount != nil {
		return true
	}

	return false
}

// SetProcMount gets a reference to the given string and assigns it to the ProcMount field.
func (o *IoK8sApiCoreV1SecurityContext) SetProcMount(v string) {
	o.ProcMount = &v
}

// GetReadOnlyRootFilesystem returns the ReadOnlyRootFilesystem field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1SecurityContext) GetReadOnlyRootFilesystem() bool {
	if o == nil || o.ReadOnlyRootFilesystem == nil {
		var ret bool
		return ret
	}
	return *o.ReadOnlyRootFilesystem
}

// GetReadOnlyRootFilesystemOk returns a tuple with the ReadOnlyRootFilesystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1SecurityContext) GetReadOnlyRootFilesystemOk() (*bool, bool) {
	if o == nil || o.ReadOnlyRootFilesystem == nil {
		return nil, false
	}
	return o.ReadOnlyRootFilesystem, true
}

// HasReadOnlyRootFilesystem returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1SecurityContext) HasReadOnlyRootFilesystem() bool {
	if o != nil && o.ReadOnlyRootFilesystem != nil {
		return true
	}

	return false
}

// SetReadOnlyRootFilesystem gets a reference to the given bool and assigns it to the ReadOnlyRootFilesystem field.
func (o *IoK8sApiCoreV1SecurityContext) SetReadOnlyRootFilesystem(v bool) {
	o.ReadOnlyRootFilesystem = &v
}

// GetRunAsGroup returns the RunAsGroup field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1SecurityContext) GetRunAsGroup() int32 {
	if o == nil || o.RunAsGroup == nil {
		var ret int32
		return ret
	}
	return *o.RunAsGroup
}

// GetRunAsGroupOk returns a tuple with the RunAsGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1SecurityContext) GetRunAsGroupOk() (*int32, bool) {
	if o == nil || o.RunAsGroup == nil {
		return nil, false
	}
	return o.RunAsGroup, true
}

// HasRunAsGroup returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1SecurityContext) HasRunAsGroup() bool {
	if o != nil && o.RunAsGroup != nil {
		return true
	}

	return false
}

// SetRunAsGroup gets a reference to the given int32 and assigns it to the RunAsGroup field.
func (o *IoK8sApiCoreV1SecurityContext) SetRunAsGroup(v int32) {
	o.RunAsGroup = &v
}

// GetRunAsNonRoot returns the RunAsNonRoot field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1SecurityContext) GetRunAsNonRoot() bool {
	if o == nil || o.RunAsNonRoot == nil {
		var ret bool
		return ret
	}
	return *o.RunAsNonRoot
}

// GetRunAsNonRootOk returns a tuple with the RunAsNonRoot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1SecurityContext) GetRunAsNonRootOk() (*bool, bool) {
	if o == nil || o.RunAsNonRoot == nil {
		return nil, false
	}
	return o.RunAsNonRoot, true
}

// HasRunAsNonRoot returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1SecurityContext) HasRunAsNonRoot() bool {
	if o != nil && o.RunAsNonRoot != nil {
		return true
	}

	return false
}

// SetRunAsNonRoot gets a reference to the given bool and assigns it to the RunAsNonRoot field.
func (o *IoK8sApiCoreV1SecurityContext) SetRunAsNonRoot(v bool) {
	o.RunAsNonRoot = &v
}

// GetRunAsUser returns the RunAsUser field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1SecurityContext) GetRunAsUser() int32 {
	if o == nil || o.RunAsUser == nil {
		var ret int32
		return ret
	}
	return *o.RunAsUser
}

// GetRunAsUserOk returns a tuple with the RunAsUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1SecurityContext) GetRunAsUserOk() (*int32, bool) {
	if o == nil || o.RunAsUser == nil {
		return nil, false
	}
	return o.RunAsUser, true
}

// HasRunAsUser returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1SecurityContext) HasRunAsUser() bool {
	if o != nil && o.RunAsUser != nil {
		return true
	}

	return false
}

// SetRunAsUser gets a reference to the given int32 and assigns it to the RunAsUser field.
func (o *IoK8sApiCoreV1SecurityContext) SetRunAsUser(v int32) {
	o.RunAsUser = &v
}

// GetSeLinuxOptions returns the SeLinuxOptions field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1SecurityContext) GetSeLinuxOptions() IoK8sApiCoreV1SELinuxOptions {
	if o == nil || o.SeLinuxOptions == nil {
		var ret IoK8sApiCoreV1SELinuxOptions
		return ret
	}
	return *o.SeLinuxOptions
}

// GetSeLinuxOptionsOk returns a tuple with the SeLinuxOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1SecurityContext) GetSeLinuxOptionsOk() (*IoK8sApiCoreV1SELinuxOptions, bool) {
	if o == nil || o.SeLinuxOptions == nil {
		return nil, false
	}
	return o.SeLinuxOptions, true
}

// HasSeLinuxOptions returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1SecurityContext) HasSeLinuxOptions() bool {
	if o != nil && o.SeLinuxOptions != nil {
		return true
	}

	return false
}

// SetSeLinuxOptions gets a reference to the given IoK8sApiCoreV1SELinuxOptions and assigns it to the SeLinuxOptions field.
func (o *IoK8sApiCoreV1SecurityContext) SetSeLinuxOptions(v IoK8sApiCoreV1SELinuxOptions) {
	o.SeLinuxOptions = &v
}

// GetWindowsOptions returns the WindowsOptions field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1SecurityContext) GetWindowsOptions() IoK8sApiCoreV1WindowsSecurityContextOptions {
	if o == nil || o.WindowsOptions == nil {
		var ret IoK8sApiCoreV1WindowsSecurityContextOptions
		return ret
	}
	return *o.WindowsOptions
}

// GetWindowsOptionsOk returns a tuple with the WindowsOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1SecurityContext) GetWindowsOptionsOk() (*IoK8sApiCoreV1WindowsSecurityContextOptions, bool) {
	if o == nil || o.WindowsOptions == nil {
		return nil, false
	}
	return o.WindowsOptions, true
}

// HasWindowsOptions returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1SecurityContext) HasWindowsOptions() bool {
	if o != nil && o.WindowsOptions != nil {
		return true
	}

	return false
}

// SetWindowsOptions gets a reference to the given IoK8sApiCoreV1WindowsSecurityContextOptions and assigns it to the WindowsOptions field.
func (o *IoK8sApiCoreV1SecurityContext) SetWindowsOptions(v IoK8sApiCoreV1WindowsSecurityContextOptions) {
	o.WindowsOptions = &v
}

func (o IoK8sApiCoreV1SecurityContext) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowPrivilegeEscalation != nil {
		toSerialize["allowPrivilegeEscalation"] = o.AllowPrivilegeEscalation
	}
	if o.Capabilities != nil {
		toSerialize["capabilities"] = o.Capabilities
	}
	if o.Privileged != nil {
		toSerialize["privileged"] = o.Privileged
	}
	if o.ProcMount != nil {
		toSerialize["procMount"] = o.ProcMount
	}
	if o.ReadOnlyRootFilesystem != nil {
		toSerialize["readOnlyRootFilesystem"] = o.ReadOnlyRootFilesystem
	}
	if o.RunAsGroup != nil {
		toSerialize["runAsGroup"] = o.RunAsGroup
	}
	if o.RunAsNonRoot != nil {
		toSerialize["runAsNonRoot"] = o.RunAsNonRoot
	}
	if o.RunAsUser != nil {
		toSerialize["runAsUser"] = o.RunAsUser
	}
	if o.SeLinuxOptions != nil {
		toSerialize["seLinuxOptions"] = o.SeLinuxOptions
	}
	if o.WindowsOptions != nil {
		toSerialize["windowsOptions"] = o.WindowsOptions
	}
	return json.Marshal(toSerialize)
}

type NullableIoK8sApiCoreV1SecurityContext struct {
	value *IoK8sApiCoreV1SecurityContext
	isSet bool
}

func (v NullableIoK8sApiCoreV1SecurityContext) Get() *IoK8sApiCoreV1SecurityContext {
	return v.value
}

func (v *NullableIoK8sApiCoreV1SecurityContext) Set(val *IoK8sApiCoreV1SecurityContext) {
	v.value = val
	v.isSet = true
}

func (v NullableIoK8sApiCoreV1SecurityContext) IsSet() bool {
	return v.isSet
}

func (v *NullableIoK8sApiCoreV1SecurityContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoK8sApiCoreV1SecurityContext(val *IoK8sApiCoreV1SecurityContext) *NullableIoK8sApiCoreV1SecurityContext {
	return &NullableIoK8sApiCoreV1SecurityContext{value: val, isSet: true}
}

func (v NullableIoK8sApiCoreV1SecurityContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoK8sApiCoreV1SecurityContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


