/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IoArgoprojEventsV1alpha1OpenWhiskTrigger OpenWhiskTrigger refers to the specification of the OpenWhisk trigger.
type IoArgoprojEventsV1alpha1OpenWhiskTrigger struct {
	// Name of the action/function.
	ActionName *string `json:"actionName,omitempty"`
	AuthToken *IoK8sApiCoreV1SecretKeySelector `json:"authToken,omitempty"`
	// Host URL of the OpenWhisk.
	Host *string `json:"host,omitempty"`
	// Namespace for the action. Defaults to \"_\". +optional.
	Namespace *string `json:"namespace,omitempty"`
	Parameters *[]IoArgoprojEventsV1alpha1TriggerParameter `json:"parameters,omitempty"`
	// Payload is the list of key-value extracted from an event payload to construct the request payload.
	Payload *[]IoArgoprojEventsV1alpha1TriggerParameter `json:"payload,omitempty"`
	Version *string `json:"version,omitempty"`
}

// NewIoArgoprojEventsV1alpha1OpenWhiskTrigger instantiates a new IoArgoprojEventsV1alpha1OpenWhiskTrigger object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoArgoprojEventsV1alpha1OpenWhiskTrigger() *IoArgoprojEventsV1alpha1OpenWhiskTrigger {
	this := IoArgoprojEventsV1alpha1OpenWhiskTrigger{}
	return &this
}

// NewIoArgoprojEventsV1alpha1OpenWhiskTriggerWithDefaults instantiates a new IoArgoprojEventsV1alpha1OpenWhiskTrigger object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoArgoprojEventsV1alpha1OpenWhiskTriggerWithDefaults() *IoArgoprojEventsV1alpha1OpenWhiskTrigger {
	this := IoArgoprojEventsV1alpha1OpenWhiskTrigger{}
	return &this
}

// GetActionName returns the ActionName field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1OpenWhiskTrigger) GetActionName() string {
	if o == nil || o.ActionName == nil {
		var ret string
		return ret
	}
	return *o.ActionName
}

// GetActionNameOk returns a tuple with the ActionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1OpenWhiskTrigger) GetActionNameOk() (*string, bool) {
	if o == nil || o.ActionName == nil {
		return nil, false
	}
	return o.ActionName, true
}

// HasActionName returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1OpenWhiskTrigger) HasActionName() bool {
	if o != nil && o.ActionName != nil {
		return true
	}

	return false
}

// SetActionName gets a reference to the given string and assigns it to the ActionName field.
func (o *IoArgoprojEventsV1alpha1OpenWhiskTrigger) SetActionName(v string) {
	o.ActionName = &v
}

// GetAuthToken returns the AuthToken field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1OpenWhiskTrigger) GetAuthToken() IoK8sApiCoreV1SecretKeySelector {
	if o == nil || o.AuthToken == nil {
		var ret IoK8sApiCoreV1SecretKeySelector
		return ret
	}
	return *o.AuthToken
}

// GetAuthTokenOk returns a tuple with the AuthToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1OpenWhiskTrigger) GetAuthTokenOk() (*IoK8sApiCoreV1SecretKeySelector, bool) {
	if o == nil || o.AuthToken == nil {
		return nil, false
	}
	return o.AuthToken, true
}

// HasAuthToken returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1OpenWhiskTrigger) HasAuthToken() bool {
	if o != nil && o.AuthToken != nil {
		return true
	}

	return false
}

// SetAuthToken gets a reference to the given IoK8sApiCoreV1SecretKeySelector and assigns it to the AuthToken field.
func (o *IoArgoprojEventsV1alpha1OpenWhiskTrigger) SetAuthToken(v IoK8sApiCoreV1SecretKeySelector) {
	o.AuthToken = &v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1OpenWhiskTrigger) GetHost() string {
	if o == nil || o.Host == nil {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1OpenWhiskTrigger) GetHostOk() (*string, bool) {
	if o == nil || o.Host == nil {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1OpenWhiskTrigger) HasHost() bool {
	if o != nil && o.Host != nil {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *IoArgoprojEventsV1alpha1OpenWhiskTrigger) SetHost(v string) {
	o.Host = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1OpenWhiskTrigger) GetNamespace() string {
	if o == nil || o.Namespace == nil {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1OpenWhiskTrigger) GetNamespaceOk() (*string, bool) {
	if o == nil || o.Namespace == nil {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1OpenWhiskTrigger) HasNamespace() bool {
	if o != nil && o.Namespace != nil {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *IoArgoprojEventsV1alpha1OpenWhiskTrigger) SetNamespace(v string) {
	o.Namespace = &v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1OpenWhiskTrigger) GetParameters() []IoArgoprojEventsV1alpha1TriggerParameter {
	if o == nil || o.Parameters == nil {
		var ret []IoArgoprojEventsV1alpha1TriggerParameter
		return ret
	}
	return *o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1OpenWhiskTrigger) GetParametersOk() (*[]IoArgoprojEventsV1alpha1TriggerParameter, bool) {
	if o == nil || o.Parameters == nil {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1OpenWhiskTrigger) HasParameters() bool {
	if o != nil && o.Parameters != nil {
		return true
	}

	return false
}

// SetParameters gets a reference to the given []IoArgoprojEventsV1alpha1TriggerParameter and assigns it to the Parameters field.
func (o *IoArgoprojEventsV1alpha1OpenWhiskTrigger) SetParameters(v []IoArgoprojEventsV1alpha1TriggerParameter) {
	o.Parameters = &v
}

// GetPayload returns the Payload field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1OpenWhiskTrigger) GetPayload() []IoArgoprojEventsV1alpha1TriggerParameter {
	if o == nil || o.Payload == nil {
		var ret []IoArgoprojEventsV1alpha1TriggerParameter
		return ret
	}
	return *o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1OpenWhiskTrigger) GetPayloadOk() (*[]IoArgoprojEventsV1alpha1TriggerParameter, bool) {
	if o == nil || o.Payload == nil {
		return nil, false
	}
	return o.Payload, true
}

// HasPayload returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1OpenWhiskTrigger) HasPayload() bool {
	if o != nil && o.Payload != nil {
		return true
	}

	return false
}

// SetPayload gets a reference to the given []IoArgoprojEventsV1alpha1TriggerParameter and assigns it to the Payload field.
func (o *IoArgoprojEventsV1alpha1OpenWhiskTrigger) SetPayload(v []IoArgoprojEventsV1alpha1TriggerParameter) {
	o.Payload = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *IoArgoprojEventsV1alpha1OpenWhiskTrigger) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojEventsV1alpha1OpenWhiskTrigger) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *IoArgoprojEventsV1alpha1OpenWhiskTrigger) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *IoArgoprojEventsV1alpha1OpenWhiskTrigger) SetVersion(v string) {
	o.Version = &v
}

func (o IoArgoprojEventsV1alpha1OpenWhiskTrigger) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ActionName != nil {
		toSerialize["actionName"] = o.ActionName
	}
	if o.AuthToken != nil {
		toSerialize["authToken"] = o.AuthToken
	}
	if o.Host != nil {
		toSerialize["host"] = o.Host
	}
	if o.Namespace != nil {
		toSerialize["namespace"] = o.Namespace
	}
	if o.Parameters != nil {
		toSerialize["parameters"] = o.Parameters
	}
	if o.Payload != nil {
		toSerialize["payload"] = o.Payload
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableIoArgoprojEventsV1alpha1OpenWhiskTrigger struct {
	value *IoArgoprojEventsV1alpha1OpenWhiskTrigger
	isSet bool
}

func (v NullableIoArgoprojEventsV1alpha1OpenWhiskTrigger) Get() *IoArgoprojEventsV1alpha1OpenWhiskTrigger {
	return v.value
}

func (v *NullableIoArgoprojEventsV1alpha1OpenWhiskTrigger) Set(val *IoArgoprojEventsV1alpha1OpenWhiskTrigger) {
	v.value = val
	v.isSet = true
}

func (v NullableIoArgoprojEventsV1alpha1OpenWhiskTrigger) IsSet() bool {
	return v.isSet
}

func (v *NullableIoArgoprojEventsV1alpha1OpenWhiskTrigger) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoArgoprojEventsV1alpha1OpenWhiskTrigger(val *IoArgoprojEventsV1alpha1OpenWhiskTrigger) *NullableIoArgoprojEventsV1alpha1OpenWhiskTrigger {
	return &NullableIoArgoprojEventsV1alpha1OpenWhiskTrigger{value: val, isSet: true}
}

func (v NullableIoArgoprojEventsV1alpha1OpenWhiskTrigger) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoArgoprojEventsV1alpha1OpenWhiskTrigger) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


