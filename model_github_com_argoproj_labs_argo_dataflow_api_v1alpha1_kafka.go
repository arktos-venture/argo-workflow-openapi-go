/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka struct for GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka
type GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka struct {
	KafkaConfig *GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaConfig `json:"kafkaConfig,omitempty"`
	Name *string `json:"name,omitempty"`
	Topic *string `json:"topic,omitempty"`
}

// NewGithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka instantiates a new GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka() *GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka {
	this := GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka{}
	return &this
}

// NewGithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaWithDefaults instantiates a new GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaWithDefaults() *GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka {
	this := GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka{}
	return &this
}

// GetKafkaConfig returns the KafkaConfig field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka) GetKafkaConfig() GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaConfig {
	if o == nil || o.KafkaConfig == nil {
		var ret GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaConfig
		return ret
	}
	return *o.KafkaConfig
}

// GetKafkaConfigOk returns a tuple with the KafkaConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka) GetKafkaConfigOk() (*GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaConfig, bool) {
	if o == nil || o.KafkaConfig == nil {
		return nil, false
	}
	return o.KafkaConfig, true
}

// HasKafkaConfig returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka) HasKafkaConfig() bool {
	if o != nil && o.KafkaConfig != nil {
		return true
	}

	return false
}

// SetKafkaConfig gets a reference to the given GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaConfig and assigns it to the KafkaConfig field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka) SetKafkaConfig(v GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaConfig) {
	o.KafkaConfig = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka) SetName(v string) {
	o.Name = &v
}

// GetTopic returns the Topic field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka) GetTopic() string {
	if o == nil || o.Topic == nil {
		var ret string
		return ret
	}
	return *o.Topic
}

// GetTopicOk returns a tuple with the Topic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka) GetTopicOk() (*string, bool) {
	if o == nil || o.Topic == nil {
		return nil, false
	}
	return o.Topic, true
}

// HasTopic returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka) HasTopic() bool {
	if o != nil && o.Topic != nil {
		return true
	}

	return false
}

// SetTopic gets a reference to the given string and assigns it to the Topic field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka) SetTopic(v string) {
	o.Topic = &v
}

func (o GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.KafkaConfig != nil {
		toSerialize["kafkaConfig"] = o.KafkaConfig
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Topic != nil {
		toSerialize["topic"] = o.Topic
	}
	return json.Marshal(toSerialize)
}

type NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka struct {
	value *GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka
	isSet bool
}

func (v NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka) Get() *GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka {
	return v.value
}

func (v *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka) Set(val *GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka) {
	v.value = val
	v.isSet = true
}

func (v NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka) IsSet() bool {
	return v.isSet
}

func (v *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka(val *GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka) *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka {
	return &NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka{value: val, isSet: true}
}

func (v NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


