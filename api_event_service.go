/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// EventServiceApiService EventServiceApi service
type EventServiceApiService service

type ApiEventServiceListWorkflowEventBindingsRequest struct {
	ctx _context.Context
	ApiService *EventServiceApiService
	namespace string
	listOptionsLabelSelector *string
	listOptionsFieldSelector *string
	listOptionsWatch *bool
	listOptionsAllowWatchBookmarks *bool
	listOptionsResourceVersion *string
	listOptionsResourceVersionMatch *string
	listOptionsTimeoutSeconds *string
	listOptionsLimit *string
	listOptionsContinue *string
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
func (r ApiEventServiceListWorkflowEventBindingsRequest) ListOptionsLabelSelector(listOptionsLabelSelector string) ApiEventServiceListWorkflowEventBindingsRequest {
	r.listOptionsLabelSelector = &listOptionsLabelSelector
	return r
}
// A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
func (r ApiEventServiceListWorkflowEventBindingsRequest) ListOptionsFieldSelector(listOptionsFieldSelector string) ApiEventServiceListWorkflowEventBindingsRequest {
	r.listOptionsFieldSelector = &listOptionsFieldSelector
	return r
}
// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
func (r ApiEventServiceListWorkflowEventBindingsRequest) ListOptionsWatch(listOptionsWatch bool) ApiEventServiceListWorkflowEventBindingsRequest {
	r.listOptionsWatch = &listOptionsWatch
	return r
}
// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored. +optional.
func (r ApiEventServiceListWorkflowEventBindingsRequest) ListOptionsAllowWatchBookmarks(listOptionsAllowWatchBookmarks bool) ApiEventServiceListWorkflowEventBindingsRequest {
	r.listOptionsAllowWatchBookmarks = &listOptionsAllowWatchBookmarks
	return r
}
// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
func (r ApiEventServiceListWorkflowEventBindingsRequest) ListOptionsResourceVersion(listOptionsResourceVersion string) ApiEventServiceListWorkflowEventBindingsRequest {
	r.listOptionsResourceVersion = &listOptionsResourceVersion
	return r
}
// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
func (r ApiEventServiceListWorkflowEventBindingsRequest) ListOptionsResourceVersionMatch(listOptionsResourceVersionMatch string) ApiEventServiceListWorkflowEventBindingsRequest {
	r.listOptionsResourceVersionMatch = &listOptionsResourceVersionMatch
	return r
}
// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
func (r ApiEventServiceListWorkflowEventBindingsRequest) ListOptionsTimeoutSeconds(listOptionsTimeoutSeconds string) ApiEventServiceListWorkflowEventBindingsRequest {
	r.listOptionsTimeoutSeconds = &listOptionsTimeoutSeconds
	return r
}
// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiEventServiceListWorkflowEventBindingsRequest) ListOptionsLimit(listOptionsLimit string) ApiEventServiceListWorkflowEventBindingsRequest {
	r.listOptionsLimit = &listOptionsLimit
	return r
}
// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiEventServiceListWorkflowEventBindingsRequest) ListOptionsContinue(listOptionsContinue string) ApiEventServiceListWorkflowEventBindingsRequest {
	r.listOptionsContinue = &listOptionsContinue
	return r
}

func (r ApiEventServiceListWorkflowEventBindingsRequest) Execute() (IoArgoprojWorkflowV1alpha1WorkflowEventBindingList, *_nethttp.Response, error) {
	return r.ApiService.EventServiceListWorkflowEventBindingsExecute(r)
}

/*
EventServiceListWorkflowEventBindings Method for EventServiceListWorkflowEventBindings

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace
 @return ApiEventServiceListWorkflowEventBindingsRequest
*/
func (a *EventServiceApiService) EventServiceListWorkflowEventBindings(ctx _context.Context, namespace string) ApiEventServiceListWorkflowEventBindingsRequest {
	return ApiEventServiceListWorkflowEventBindingsRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return IoArgoprojWorkflowV1alpha1WorkflowEventBindingList
func (a *EventServiceApiService) EventServiceListWorkflowEventBindingsExecute(r ApiEventServiceListWorkflowEventBindingsRequest) (IoArgoprojWorkflowV1alpha1WorkflowEventBindingList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  IoArgoprojWorkflowV1alpha1WorkflowEventBindingList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventServiceApiService.EventServiceListWorkflowEventBindings")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workflow/argo/api/v1/workflow-event-bindings/{namespace}"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", _neturl.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.listOptionsLabelSelector != nil {
		localVarQueryParams.Add("listOptions.labelSelector", parameterToString(*r.listOptionsLabelSelector, ""))
	}
	if r.listOptionsFieldSelector != nil {
		localVarQueryParams.Add("listOptions.fieldSelector", parameterToString(*r.listOptionsFieldSelector, ""))
	}
	if r.listOptionsWatch != nil {
		localVarQueryParams.Add("listOptions.watch", parameterToString(*r.listOptionsWatch, ""))
	}
	if r.listOptionsAllowWatchBookmarks != nil {
		localVarQueryParams.Add("listOptions.allowWatchBookmarks", parameterToString(*r.listOptionsAllowWatchBookmarks, ""))
	}
	if r.listOptionsResourceVersion != nil {
		localVarQueryParams.Add("listOptions.resourceVersion", parameterToString(*r.listOptionsResourceVersion, ""))
	}
	if r.listOptionsResourceVersionMatch != nil {
		localVarQueryParams.Add("listOptions.resourceVersionMatch", parameterToString(*r.listOptionsResourceVersionMatch, ""))
	}
	if r.listOptionsTimeoutSeconds != nil {
		localVarQueryParams.Add("listOptions.timeoutSeconds", parameterToString(*r.listOptionsTimeoutSeconds, ""))
	}
	if r.listOptionsLimit != nil {
		localVarQueryParams.Add("listOptions.limit", parameterToString(*r.listOptionsLimit, ""))
	}
	if r.listOptionsContinue != nil {
		localVarQueryParams.Add("listOptions.continue", parameterToString(*r.listOptionsContinue, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GrpcGatewayRuntimeError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEventServiceReceiveEventRequest struct {
	ctx _context.Context
	ApiService *EventServiceApiService
	namespace string
	discriminator string
	body *map[string]interface{}
}

// The event itself can be any data.
func (r ApiEventServiceReceiveEventRequest) Body(body map[string]interface{}) ApiEventServiceReceiveEventRequest {
	r.body = &body
	return r
}

func (r ApiEventServiceReceiveEventRequest) Execute() (map[string]interface{}, *_nethttp.Response, error) {
	return r.ApiService.EventServiceReceiveEventExecute(r)
}

/*
EventServiceReceiveEvent Method for EventServiceReceiveEvent

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace The namespace for the io.argoproj.workflow.v1alpha1. This can be empty if the client has cluster scoped permissions. If empty, then the event is \"broadcast\" to workflow event binding in all namespaces.
 @param discriminator Optional discriminator for the io.argoproj.workflow.v1alpha1. This should almost always be empty. Used for edge-cases where the event payload alone is not provide enough information to discriminate the event. This MUST NOT be used as security mechanism, e.g. to allow two clients to use the same access token, or to support webhooks on unsecured server. Instead, use access tokens. This is made available as `discriminator` in the event binding selector (`/spec/event/selector)`
 @return ApiEventServiceReceiveEventRequest
*/
func (a *EventServiceApiService) EventServiceReceiveEvent(ctx _context.Context, namespace string, discriminator string) ApiEventServiceReceiveEventRequest {
	return ApiEventServiceReceiveEventRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
		discriminator: discriminator,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *EventServiceApiService) EventServiceReceiveEventExecute(r ApiEventServiceReceiveEventRequest) (map[string]interface{}, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventServiceApiService.EventServiceReceiveEvent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workflow/argo/api/v1/events/{namespace}/{discriminator}"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", _neturl.PathEscape(parameterToString(r.namespace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"discriminator"+"}", _neturl.PathEscape(parameterToString(r.discriminator, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GrpcGatewayRuntimeError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
