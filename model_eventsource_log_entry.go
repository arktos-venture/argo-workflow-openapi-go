/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// EventsourceLogEntry struct for EventsourceLogEntry
type EventsourceLogEntry struct {
	EventName *string `json:"eventName,omitempty"`
	EventSourceName *string `json:"eventSourceName,omitempty"`
	EventSourceType *string `json:"eventSourceType,omitempty"`
	Level *string `json:"level,omitempty"`
	Msg *string `json:"msg,omitempty"`
	Namespace *string `json:"namespace,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	Time *time.Time `json:"time,omitempty"`
}

// NewEventsourceLogEntry instantiates a new EventsourceLogEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventsourceLogEntry() *EventsourceLogEntry {
	this := EventsourceLogEntry{}
	return &this
}

// NewEventsourceLogEntryWithDefaults instantiates a new EventsourceLogEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventsourceLogEntryWithDefaults() *EventsourceLogEntry {
	this := EventsourceLogEntry{}
	return &this
}

// GetEventName returns the EventName field value if set, zero value otherwise.
func (o *EventsourceLogEntry) GetEventName() string {
	if o == nil || o.EventName == nil {
		var ret string
		return ret
	}
	return *o.EventName
}

// GetEventNameOk returns a tuple with the EventName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsourceLogEntry) GetEventNameOk() (*string, bool) {
	if o == nil || o.EventName == nil {
		return nil, false
	}
	return o.EventName, true
}

// HasEventName returns a boolean if a field has been set.
func (o *EventsourceLogEntry) HasEventName() bool {
	if o != nil && o.EventName != nil {
		return true
	}

	return false
}

// SetEventName gets a reference to the given string and assigns it to the EventName field.
func (o *EventsourceLogEntry) SetEventName(v string) {
	o.EventName = &v
}

// GetEventSourceName returns the EventSourceName field value if set, zero value otherwise.
func (o *EventsourceLogEntry) GetEventSourceName() string {
	if o == nil || o.EventSourceName == nil {
		var ret string
		return ret
	}
	return *o.EventSourceName
}

// GetEventSourceNameOk returns a tuple with the EventSourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsourceLogEntry) GetEventSourceNameOk() (*string, bool) {
	if o == nil || o.EventSourceName == nil {
		return nil, false
	}
	return o.EventSourceName, true
}

// HasEventSourceName returns a boolean if a field has been set.
func (o *EventsourceLogEntry) HasEventSourceName() bool {
	if o != nil && o.EventSourceName != nil {
		return true
	}

	return false
}

// SetEventSourceName gets a reference to the given string and assigns it to the EventSourceName field.
func (o *EventsourceLogEntry) SetEventSourceName(v string) {
	o.EventSourceName = &v
}

// GetEventSourceType returns the EventSourceType field value if set, zero value otherwise.
func (o *EventsourceLogEntry) GetEventSourceType() string {
	if o == nil || o.EventSourceType == nil {
		var ret string
		return ret
	}
	return *o.EventSourceType
}

// GetEventSourceTypeOk returns a tuple with the EventSourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsourceLogEntry) GetEventSourceTypeOk() (*string, bool) {
	if o == nil || o.EventSourceType == nil {
		return nil, false
	}
	return o.EventSourceType, true
}

// HasEventSourceType returns a boolean if a field has been set.
func (o *EventsourceLogEntry) HasEventSourceType() bool {
	if o != nil && o.EventSourceType != nil {
		return true
	}

	return false
}

// SetEventSourceType gets a reference to the given string and assigns it to the EventSourceType field.
func (o *EventsourceLogEntry) SetEventSourceType(v string) {
	o.EventSourceType = &v
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *EventsourceLogEntry) GetLevel() string {
	if o == nil || o.Level == nil {
		var ret string
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsourceLogEntry) GetLevelOk() (*string, bool) {
	if o == nil || o.Level == nil {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *EventsourceLogEntry) HasLevel() bool {
	if o != nil && o.Level != nil {
		return true
	}

	return false
}

// SetLevel gets a reference to the given string and assigns it to the Level field.
func (o *EventsourceLogEntry) SetLevel(v string) {
	o.Level = &v
}

// GetMsg returns the Msg field value if set, zero value otherwise.
func (o *EventsourceLogEntry) GetMsg() string {
	if o == nil || o.Msg == nil {
		var ret string
		return ret
	}
	return *o.Msg
}

// GetMsgOk returns a tuple with the Msg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsourceLogEntry) GetMsgOk() (*string, bool) {
	if o == nil || o.Msg == nil {
		return nil, false
	}
	return o.Msg, true
}

// HasMsg returns a boolean if a field has been set.
func (o *EventsourceLogEntry) HasMsg() bool {
	if o != nil && o.Msg != nil {
		return true
	}

	return false
}

// SetMsg gets a reference to the given string and assigns it to the Msg field.
func (o *EventsourceLogEntry) SetMsg(v string) {
	o.Msg = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *EventsourceLogEntry) GetNamespace() string {
	if o == nil || o.Namespace == nil {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsourceLogEntry) GetNamespaceOk() (*string, bool) {
	if o == nil || o.Namespace == nil {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *EventsourceLogEntry) HasNamespace() bool {
	if o != nil && o.Namespace != nil {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *EventsourceLogEntry) SetNamespace(v string) {
	o.Namespace = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *EventsourceLogEntry) GetTime() time.Time {
	if o == nil || o.Time == nil {
		var ret time.Time
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsourceLogEntry) GetTimeOk() (*time.Time, bool) {
	if o == nil || o.Time == nil {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *EventsourceLogEntry) HasTime() bool {
	if o != nil && o.Time != nil {
		return true
	}

	return false
}

// SetTime gets a reference to the given time.Time and assigns it to the Time field.
func (o *EventsourceLogEntry) SetTime(v time.Time) {
	o.Time = &v
}

func (o EventsourceLogEntry) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EventName != nil {
		toSerialize["eventName"] = o.EventName
	}
	if o.EventSourceName != nil {
		toSerialize["eventSourceName"] = o.EventSourceName
	}
	if o.EventSourceType != nil {
		toSerialize["eventSourceType"] = o.EventSourceType
	}
	if o.Level != nil {
		toSerialize["level"] = o.Level
	}
	if o.Msg != nil {
		toSerialize["msg"] = o.Msg
	}
	if o.Namespace != nil {
		toSerialize["namespace"] = o.Namespace
	}
	if o.Time != nil {
		toSerialize["time"] = o.Time
	}
	return json.Marshal(toSerialize)
}

type NullableEventsourceLogEntry struct {
	value *EventsourceLogEntry
	isSet bool
}

func (v NullableEventsourceLogEntry) Get() *EventsourceLogEntry {
	return v.value
}

func (v *NullableEventsourceLogEntry) Set(val *EventsourceLogEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableEventsourceLogEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableEventsourceLogEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventsourceLogEntry(val *EventsourceLogEntry) *NullableEventsourceLogEntry {
	return &NullableEventsourceLogEntry{value: val, isSet: true}
}

func (v NullableEventsourceLogEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventsourceLogEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


