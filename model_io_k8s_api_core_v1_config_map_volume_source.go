/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IoK8sApiCoreV1ConfigMapVolumeSource Adapts a ConfigMap into a volume.  The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.
type IoK8sApiCoreV1ConfigMapVolumeSource struct {
	// Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode *int32 `json:"defaultMode,omitempty"`
	// If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items *[]IoK8sApiCoreV1KeyToPath `json:"items,omitempty"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `json:"name,omitempty"`
	// Specify whether the ConfigMap or its keys must be defined
	Optional *bool `json:"optional,omitempty"`
}

// NewIoK8sApiCoreV1ConfigMapVolumeSource instantiates a new IoK8sApiCoreV1ConfigMapVolumeSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoK8sApiCoreV1ConfigMapVolumeSource() *IoK8sApiCoreV1ConfigMapVolumeSource {
	this := IoK8sApiCoreV1ConfigMapVolumeSource{}
	return &this
}

// NewIoK8sApiCoreV1ConfigMapVolumeSourceWithDefaults instantiates a new IoK8sApiCoreV1ConfigMapVolumeSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoK8sApiCoreV1ConfigMapVolumeSourceWithDefaults() *IoK8sApiCoreV1ConfigMapVolumeSource {
	this := IoK8sApiCoreV1ConfigMapVolumeSource{}
	return &this
}

// GetDefaultMode returns the DefaultMode field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1ConfigMapVolumeSource) GetDefaultMode() int32 {
	if o == nil || o.DefaultMode == nil {
		var ret int32
		return ret
	}
	return *o.DefaultMode
}

// GetDefaultModeOk returns a tuple with the DefaultMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1ConfigMapVolumeSource) GetDefaultModeOk() (*int32, bool) {
	if o == nil || o.DefaultMode == nil {
		return nil, false
	}
	return o.DefaultMode, true
}

// HasDefaultMode returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1ConfigMapVolumeSource) HasDefaultMode() bool {
	if o != nil && o.DefaultMode != nil {
		return true
	}

	return false
}

// SetDefaultMode gets a reference to the given int32 and assigns it to the DefaultMode field.
func (o *IoK8sApiCoreV1ConfigMapVolumeSource) SetDefaultMode(v int32) {
	o.DefaultMode = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1ConfigMapVolumeSource) GetItems() []IoK8sApiCoreV1KeyToPath {
	if o == nil || o.Items == nil {
		var ret []IoK8sApiCoreV1KeyToPath
		return ret
	}
	return *o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1ConfigMapVolumeSource) GetItemsOk() (*[]IoK8sApiCoreV1KeyToPath, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1ConfigMapVolumeSource) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []IoK8sApiCoreV1KeyToPath and assigns it to the Items field.
func (o *IoK8sApiCoreV1ConfigMapVolumeSource) SetItems(v []IoK8sApiCoreV1KeyToPath) {
	o.Items = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1ConfigMapVolumeSource) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1ConfigMapVolumeSource) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1ConfigMapVolumeSource) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IoK8sApiCoreV1ConfigMapVolumeSource) SetName(v string) {
	o.Name = &v
}

// GetOptional returns the Optional field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1ConfigMapVolumeSource) GetOptional() bool {
	if o == nil || o.Optional == nil {
		var ret bool
		return ret
	}
	return *o.Optional
}

// GetOptionalOk returns a tuple with the Optional field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1ConfigMapVolumeSource) GetOptionalOk() (*bool, bool) {
	if o == nil || o.Optional == nil {
		return nil, false
	}
	return o.Optional, true
}

// HasOptional returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1ConfigMapVolumeSource) HasOptional() bool {
	if o != nil && o.Optional != nil {
		return true
	}

	return false
}

// SetOptional gets a reference to the given bool and assigns it to the Optional field.
func (o *IoK8sApiCoreV1ConfigMapVolumeSource) SetOptional(v bool) {
	o.Optional = &v
}

func (o IoK8sApiCoreV1ConfigMapVolumeSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DefaultMode != nil {
		toSerialize["defaultMode"] = o.DefaultMode
	}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Optional != nil {
		toSerialize["optional"] = o.Optional
	}
	return json.Marshal(toSerialize)
}

type NullableIoK8sApiCoreV1ConfigMapVolumeSource struct {
	value *IoK8sApiCoreV1ConfigMapVolumeSource
	isSet bool
}

func (v NullableIoK8sApiCoreV1ConfigMapVolumeSource) Get() *IoK8sApiCoreV1ConfigMapVolumeSource {
	return v.value
}

func (v *NullableIoK8sApiCoreV1ConfigMapVolumeSource) Set(val *IoK8sApiCoreV1ConfigMapVolumeSource) {
	v.value = val
	v.isSet = true
}

func (v NullableIoK8sApiCoreV1ConfigMapVolumeSource) IsSet() bool {
	return v.isSet
}

func (v *NullableIoK8sApiCoreV1ConfigMapVolumeSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoK8sApiCoreV1ConfigMapVolumeSource(val *IoK8sApiCoreV1ConfigMapVolumeSource) *NullableIoK8sApiCoreV1ConfigMapVolumeSource {
	return &NullableIoK8sApiCoreV1ConfigMapVolumeSource{value: val, isSet: true}
}

func (v NullableIoK8sApiCoreV1ConfigMapVolumeSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoK8sApiCoreV1ConfigMapVolumeSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


