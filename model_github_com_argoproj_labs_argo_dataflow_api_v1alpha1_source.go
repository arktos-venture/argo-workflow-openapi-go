/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GithubComArgoprojLabsArgoDataflowApiV1alpha1Source struct for GithubComArgoprojLabsArgoDataflowApiV1alpha1Source
type GithubComArgoprojLabsArgoDataflowApiV1alpha1Source struct {
	Cron *GithubComArgoprojLabsArgoDataflowApiV1alpha1Cron `json:"cron,omitempty"`
	Db *GithubComArgoprojLabsArgoDataflowApiV1alpha1DBSource `json:"db,omitempty"`
	Http *GithubComArgoprojLabsArgoDataflowApiV1alpha1HTTPSource `json:"http,omitempty"`
	Kafka *GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSource `json:"kafka,omitempty"`
	Name *string `json:"name,omitempty"`
	Retry *GithubComArgoprojLabsArgoDataflowApiV1alpha1Backoff `json:"retry,omitempty"`
	S3 *GithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source `json:"s3,omitempty"`
	Stan *GithubComArgoprojLabsArgoDataflowApiV1alpha1STAN `json:"stan,omitempty"`
	Volume *GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource `json:"volume,omitempty"`
}

// NewGithubComArgoprojLabsArgoDataflowApiV1alpha1Source instantiates a new GithubComArgoprojLabsArgoDataflowApiV1alpha1Source object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGithubComArgoprojLabsArgoDataflowApiV1alpha1Source() *GithubComArgoprojLabsArgoDataflowApiV1alpha1Source {
	this := GithubComArgoprojLabsArgoDataflowApiV1alpha1Source{}
	return &this
}

// NewGithubComArgoprojLabsArgoDataflowApiV1alpha1SourceWithDefaults instantiates a new GithubComArgoprojLabsArgoDataflowApiV1alpha1Source object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGithubComArgoprojLabsArgoDataflowApiV1alpha1SourceWithDefaults() *GithubComArgoprojLabsArgoDataflowApiV1alpha1Source {
	this := GithubComArgoprojLabsArgoDataflowApiV1alpha1Source{}
	return &this
}

// GetCron returns the Cron field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Source) GetCron() GithubComArgoprojLabsArgoDataflowApiV1alpha1Cron {
	if o == nil || o.Cron == nil {
		var ret GithubComArgoprojLabsArgoDataflowApiV1alpha1Cron
		return ret
	}
	return *o.Cron
}

// GetCronOk returns a tuple with the Cron field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Source) GetCronOk() (*GithubComArgoprojLabsArgoDataflowApiV1alpha1Cron, bool) {
	if o == nil || o.Cron == nil {
		return nil, false
	}
	return o.Cron, true
}

// HasCron returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Source) HasCron() bool {
	if o != nil && o.Cron != nil {
		return true
	}

	return false
}

// SetCron gets a reference to the given GithubComArgoprojLabsArgoDataflowApiV1alpha1Cron and assigns it to the Cron field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Source) SetCron(v GithubComArgoprojLabsArgoDataflowApiV1alpha1Cron) {
	o.Cron = &v
}

// GetDb returns the Db field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Source) GetDb() GithubComArgoprojLabsArgoDataflowApiV1alpha1DBSource {
	if o == nil || o.Db == nil {
		var ret GithubComArgoprojLabsArgoDataflowApiV1alpha1DBSource
		return ret
	}
	return *o.Db
}

// GetDbOk returns a tuple with the Db field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Source) GetDbOk() (*GithubComArgoprojLabsArgoDataflowApiV1alpha1DBSource, bool) {
	if o == nil || o.Db == nil {
		return nil, false
	}
	return o.Db, true
}

// HasDb returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Source) HasDb() bool {
	if o != nil && o.Db != nil {
		return true
	}

	return false
}

// SetDb gets a reference to the given GithubComArgoprojLabsArgoDataflowApiV1alpha1DBSource and assigns it to the Db field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Source) SetDb(v GithubComArgoprojLabsArgoDataflowApiV1alpha1DBSource) {
	o.Db = &v
}

// GetHttp returns the Http field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Source) GetHttp() GithubComArgoprojLabsArgoDataflowApiV1alpha1HTTPSource {
	if o == nil || o.Http == nil {
		var ret GithubComArgoprojLabsArgoDataflowApiV1alpha1HTTPSource
		return ret
	}
	return *o.Http
}

// GetHttpOk returns a tuple with the Http field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Source) GetHttpOk() (*GithubComArgoprojLabsArgoDataflowApiV1alpha1HTTPSource, bool) {
	if o == nil || o.Http == nil {
		return nil, false
	}
	return o.Http, true
}

// HasHttp returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Source) HasHttp() bool {
	if o != nil && o.Http != nil {
		return true
	}

	return false
}

// SetHttp gets a reference to the given GithubComArgoprojLabsArgoDataflowApiV1alpha1HTTPSource and assigns it to the Http field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Source) SetHttp(v GithubComArgoprojLabsArgoDataflowApiV1alpha1HTTPSource) {
	o.Http = &v
}

// GetKafka returns the Kafka field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Source) GetKafka() GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSource {
	if o == nil || o.Kafka == nil {
		var ret GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSource
		return ret
	}
	return *o.Kafka
}

// GetKafkaOk returns a tuple with the Kafka field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Source) GetKafkaOk() (*GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSource, bool) {
	if o == nil || o.Kafka == nil {
		return nil, false
	}
	return o.Kafka, true
}

// HasKafka returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Source) HasKafka() bool {
	if o != nil && o.Kafka != nil {
		return true
	}

	return false
}

// SetKafka gets a reference to the given GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSource and assigns it to the Kafka field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Source) SetKafka(v GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSource) {
	o.Kafka = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Source) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Source) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Source) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Source) SetName(v string) {
	o.Name = &v
}

// GetRetry returns the Retry field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Source) GetRetry() GithubComArgoprojLabsArgoDataflowApiV1alpha1Backoff {
	if o == nil || o.Retry == nil {
		var ret GithubComArgoprojLabsArgoDataflowApiV1alpha1Backoff
		return ret
	}
	return *o.Retry
}

// GetRetryOk returns a tuple with the Retry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Source) GetRetryOk() (*GithubComArgoprojLabsArgoDataflowApiV1alpha1Backoff, bool) {
	if o == nil || o.Retry == nil {
		return nil, false
	}
	return o.Retry, true
}

// HasRetry returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Source) HasRetry() bool {
	if o != nil && o.Retry != nil {
		return true
	}

	return false
}

// SetRetry gets a reference to the given GithubComArgoprojLabsArgoDataflowApiV1alpha1Backoff and assigns it to the Retry field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Source) SetRetry(v GithubComArgoprojLabsArgoDataflowApiV1alpha1Backoff) {
	o.Retry = &v
}

// GetS3 returns the S3 field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Source) GetS3() GithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source {
	if o == nil || o.S3 == nil {
		var ret GithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source
		return ret
	}
	return *o.S3
}

// GetS3Ok returns a tuple with the S3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Source) GetS3Ok() (*GithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source, bool) {
	if o == nil || o.S3 == nil {
		return nil, false
	}
	return o.S3, true
}

// HasS3 returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Source) HasS3() bool {
	if o != nil && o.S3 != nil {
		return true
	}

	return false
}

// SetS3 gets a reference to the given GithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source and assigns it to the S3 field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Source) SetS3(v GithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source) {
	o.S3 = &v
}

// GetStan returns the Stan field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Source) GetStan() GithubComArgoprojLabsArgoDataflowApiV1alpha1STAN {
	if o == nil || o.Stan == nil {
		var ret GithubComArgoprojLabsArgoDataflowApiV1alpha1STAN
		return ret
	}
	return *o.Stan
}

// GetStanOk returns a tuple with the Stan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Source) GetStanOk() (*GithubComArgoprojLabsArgoDataflowApiV1alpha1STAN, bool) {
	if o == nil || o.Stan == nil {
		return nil, false
	}
	return o.Stan, true
}

// HasStan returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Source) HasStan() bool {
	if o != nil && o.Stan != nil {
		return true
	}

	return false
}

// SetStan gets a reference to the given GithubComArgoprojLabsArgoDataflowApiV1alpha1STAN and assigns it to the Stan field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Source) SetStan(v GithubComArgoprojLabsArgoDataflowApiV1alpha1STAN) {
	o.Stan = &v
}

// GetVolume returns the Volume field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Source) GetVolume() GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource {
	if o == nil || o.Volume == nil {
		var ret GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource
		return ret
	}
	return *o.Volume
}

// GetVolumeOk returns a tuple with the Volume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Source) GetVolumeOk() (*GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource, bool) {
	if o == nil || o.Volume == nil {
		return nil, false
	}
	return o.Volume, true
}

// HasVolume returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Source) HasVolume() bool {
	if o != nil && o.Volume != nil {
		return true
	}

	return false
}

// SetVolume gets a reference to the given GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource and assigns it to the Volume field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Source) SetVolume(v GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource) {
	o.Volume = &v
}

func (o GithubComArgoprojLabsArgoDataflowApiV1alpha1Source) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Cron != nil {
		toSerialize["cron"] = o.Cron
	}
	if o.Db != nil {
		toSerialize["db"] = o.Db
	}
	if o.Http != nil {
		toSerialize["http"] = o.Http
	}
	if o.Kafka != nil {
		toSerialize["kafka"] = o.Kafka
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Retry != nil {
		toSerialize["retry"] = o.Retry
	}
	if o.S3 != nil {
		toSerialize["s3"] = o.S3
	}
	if o.Stan != nil {
		toSerialize["stan"] = o.Stan
	}
	if o.Volume != nil {
		toSerialize["volume"] = o.Volume
	}
	return json.Marshal(toSerialize)
}

type NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1Source struct {
	value *GithubComArgoprojLabsArgoDataflowApiV1alpha1Source
	isSet bool
}

func (v NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1Source) Get() *GithubComArgoprojLabsArgoDataflowApiV1alpha1Source {
	return v.value
}

func (v *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1Source) Set(val *GithubComArgoprojLabsArgoDataflowApiV1alpha1Source) {
	v.value = val
	v.isSet = true
}

func (v NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1Source) IsSet() bool {
	return v.isSet
}

func (v *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1Source) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGithubComArgoprojLabsArgoDataflowApiV1alpha1Source(val *GithubComArgoprojLabsArgoDataflowApiV1alpha1Source) *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1Source {
	return &NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1Source{value: val, isSet: true}
}

func (v NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1Source) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1Source) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


