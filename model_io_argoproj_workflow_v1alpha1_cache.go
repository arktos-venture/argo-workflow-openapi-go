/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IoArgoprojWorkflowV1alpha1Cache Cache is the configuration for the type of cache to be used
type IoArgoprojWorkflowV1alpha1Cache struct {
	ConfigMap IoK8sApiCoreV1ConfigMapKeySelector `json:"configMap"`
}

// NewIoArgoprojWorkflowV1alpha1Cache instantiates a new IoArgoprojWorkflowV1alpha1Cache object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoArgoprojWorkflowV1alpha1Cache(configMap IoK8sApiCoreV1ConfigMapKeySelector) *IoArgoprojWorkflowV1alpha1Cache {
	this := IoArgoprojWorkflowV1alpha1Cache{}
	this.ConfigMap = configMap
	return &this
}

// NewIoArgoprojWorkflowV1alpha1CacheWithDefaults instantiates a new IoArgoprojWorkflowV1alpha1Cache object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoArgoprojWorkflowV1alpha1CacheWithDefaults() *IoArgoprojWorkflowV1alpha1Cache {
	this := IoArgoprojWorkflowV1alpha1Cache{}
	return &this
}

// GetConfigMap returns the ConfigMap field value
func (o *IoArgoprojWorkflowV1alpha1Cache) GetConfigMap() IoK8sApiCoreV1ConfigMapKeySelector {
	if o == nil {
		var ret IoK8sApiCoreV1ConfigMapKeySelector
		return ret
	}

	return o.ConfigMap
}

// GetConfigMapOk returns a tuple with the ConfigMap field value
// and a boolean to check if the value has been set.
func (o *IoArgoprojWorkflowV1alpha1Cache) GetConfigMapOk() (*IoK8sApiCoreV1ConfigMapKeySelector, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ConfigMap, true
}

// SetConfigMap sets field value
func (o *IoArgoprojWorkflowV1alpha1Cache) SetConfigMap(v IoK8sApiCoreV1ConfigMapKeySelector) {
	o.ConfigMap = v
}

func (o IoArgoprojWorkflowV1alpha1Cache) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["configMap"] = o.ConfigMap
	}
	return json.Marshal(toSerialize)
}

type NullableIoArgoprojWorkflowV1alpha1Cache struct {
	value *IoArgoprojWorkflowV1alpha1Cache
	isSet bool
}

func (v NullableIoArgoprojWorkflowV1alpha1Cache) Get() *IoArgoprojWorkflowV1alpha1Cache {
	return v.value
}

func (v *NullableIoArgoprojWorkflowV1alpha1Cache) Set(val *IoArgoprojWorkflowV1alpha1Cache) {
	v.value = val
	v.isSet = true
}

func (v NullableIoArgoprojWorkflowV1alpha1Cache) IsSet() bool {
	return v.isSet
}

func (v *NullableIoArgoprojWorkflowV1alpha1Cache) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoArgoprojWorkflowV1alpha1Cache(val *IoArgoprojWorkflowV1alpha1Cache) *NullableIoArgoprojWorkflowV1alpha1Cache {
	return &NullableIoArgoprojWorkflowV1alpha1Cache{value: val, isSet: true}
}

func (v NullableIoArgoprojWorkflowV1alpha1Cache) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoArgoprojWorkflowV1alpha1Cache) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


