/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IoArgoprojWorkflowV1alpha1TarStrategy TarStrategy will tar and gzip the file or directory when saving
type IoArgoprojWorkflowV1alpha1TarStrategy struct {
	// CompressionLevel specifies the gzip compression level to use for the artifact. Defaults to gzip.DefaultCompression.
	CompressionLevel *int32 `json:"compressionLevel,omitempty"`
}

// NewIoArgoprojWorkflowV1alpha1TarStrategy instantiates a new IoArgoprojWorkflowV1alpha1TarStrategy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoArgoprojWorkflowV1alpha1TarStrategy() *IoArgoprojWorkflowV1alpha1TarStrategy {
	this := IoArgoprojWorkflowV1alpha1TarStrategy{}
	return &this
}

// NewIoArgoprojWorkflowV1alpha1TarStrategyWithDefaults instantiates a new IoArgoprojWorkflowV1alpha1TarStrategy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoArgoprojWorkflowV1alpha1TarStrategyWithDefaults() *IoArgoprojWorkflowV1alpha1TarStrategy {
	this := IoArgoprojWorkflowV1alpha1TarStrategy{}
	return &this
}

// GetCompressionLevel returns the CompressionLevel field value if set, zero value otherwise.
func (o *IoArgoprojWorkflowV1alpha1TarStrategy) GetCompressionLevel() int32 {
	if o == nil || o.CompressionLevel == nil {
		var ret int32
		return ret
	}
	return *o.CompressionLevel
}

// GetCompressionLevelOk returns a tuple with the CompressionLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoArgoprojWorkflowV1alpha1TarStrategy) GetCompressionLevelOk() (*int32, bool) {
	if o == nil || o.CompressionLevel == nil {
		return nil, false
	}
	return o.CompressionLevel, true
}

// HasCompressionLevel returns a boolean if a field has been set.
func (o *IoArgoprojWorkflowV1alpha1TarStrategy) HasCompressionLevel() bool {
	if o != nil && o.CompressionLevel != nil {
		return true
	}

	return false
}

// SetCompressionLevel gets a reference to the given int32 and assigns it to the CompressionLevel field.
func (o *IoArgoprojWorkflowV1alpha1TarStrategy) SetCompressionLevel(v int32) {
	o.CompressionLevel = &v
}

func (o IoArgoprojWorkflowV1alpha1TarStrategy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CompressionLevel != nil {
		toSerialize["compressionLevel"] = o.CompressionLevel
	}
	return json.Marshal(toSerialize)
}

type NullableIoArgoprojWorkflowV1alpha1TarStrategy struct {
	value *IoArgoprojWorkflowV1alpha1TarStrategy
	isSet bool
}

func (v NullableIoArgoprojWorkflowV1alpha1TarStrategy) Get() *IoArgoprojWorkflowV1alpha1TarStrategy {
	return v.value
}

func (v *NullableIoArgoprojWorkflowV1alpha1TarStrategy) Set(val *IoArgoprojWorkflowV1alpha1TarStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableIoArgoprojWorkflowV1alpha1TarStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableIoArgoprojWorkflowV1alpha1TarStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoArgoprojWorkflowV1alpha1TarStrategy(val *IoArgoprojWorkflowV1alpha1TarStrategy) *NullableIoArgoprojWorkflowV1alpha1TarStrategy {
	return &NullableIoArgoprojWorkflowV1alpha1TarStrategy{value: val, isSet: true}
}

func (v NullableIoArgoprojWorkflowV1alpha1TarStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoArgoprojWorkflowV1alpha1TarStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


