/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IoK8sApiCoreV1VsphereVirtualDiskVolumeSource Represents a vSphere volume resource.
type IoK8sApiCoreV1VsphereVirtualDiskVolumeSource struct {
	// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.
	FsType *string `json:"fsType,omitempty"`
	// Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
	StoragePolicyID *string `json:"storagePolicyID,omitempty"`
	// Storage Policy Based Management (SPBM) profile name.
	StoragePolicyName *string `json:"storagePolicyName,omitempty"`
	// Path that identifies vSphere volume vmdk
	VolumePath string `json:"volumePath"`
}

// NewIoK8sApiCoreV1VsphereVirtualDiskVolumeSource instantiates a new IoK8sApiCoreV1VsphereVirtualDiskVolumeSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoK8sApiCoreV1VsphereVirtualDiskVolumeSource(volumePath string) *IoK8sApiCoreV1VsphereVirtualDiskVolumeSource {
	this := IoK8sApiCoreV1VsphereVirtualDiskVolumeSource{}
	this.VolumePath = volumePath
	return &this
}

// NewIoK8sApiCoreV1VsphereVirtualDiskVolumeSourceWithDefaults instantiates a new IoK8sApiCoreV1VsphereVirtualDiskVolumeSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoK8sApiCoreV1VsphereVirtualDiskVolumeSourceWithDefaults() *IoK8sApiCoreV1VsphereVirtualDiskVolumeSource {
	this := IoK8sApiCoreV1VsphereVirtualDiskVolumeSource{}
	return &this
}

// GetFsType returns the FsType field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1VsphereVirtualDiskVolumeSource) GetFsType() string {
	if o == nil || o.FsType == nil {
		var ret string
		return ret
	}
	return *o.FsType
}

// GetFsTypeOk returns a tuple with the FsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1VsphereVirtualDiskVolumeSource) GetFsTypeOk() (*string, bool) {
	if o == nil || o.FsType == nil {
		return nil, false
	}
	return o.FsType, true
}

// HasFsType returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1VsphereVirtualDiskVolumeSource) HasFsType() bool {
	if o != nil && o.FsType != nil {
		return true
	}

	return false
}

// SetFsType gets a reference to the given string and assigns it to the FsType field.
func (o *IoK8sApiCoreV1VsphereVirtualDiskVolumeSource) SetFsType(v string) {
	o.FsType = &v
}

// GetStoragePolicyID returns the StoragePolicyID field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1VsphereVirtualDiskVolumeSource) GetStoragePolicyID() string {
	if o == nil || o.StoragePolicyID == nil {
		var ret string
		return ret
	}
	return *o.StoragePolicyID
}

// GetStoragePolicyIDOk returns a tuple with the StoragePolicyID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1VsphereVirtualDiskVolumeSource) GetStoragePolicyIDOk() (*string, bool) {
	if o == nil || o.StoragePolicyID == nil {
		return nil, false
	}
	return o.StoragePolicyID, true
}

// HasStoragePolicyID returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1VsphereVirtualDiskVolumeSource) HasStoragePolicyID() bool {
	if o != nil && o.StoragePolicyID != nil {
		return true
	}

	return false
}

// SetStoragePolicyID gets a reference to the given string and assigns it to the StoragePolicyID field.
func (o *IoK8sApiCoreV1VsphereVirtualDiskVolumeSource) SetStoragePolicyID(v string) {
	o.StoragePolicyID = &v
}

// GetStoragePolicyName returns the StoragePolicyName field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1VsphereVirtualDiskVolumeSource) GetStoragePolicyName() string {
	if o == nil || o.StoragePolicyName == nil {
		var ret string
		return ret
	}
	return *o.StoragePolicyName
}

// GetStoragePolicyNameOk returns a tuple with the StoragePolicyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1VsphereVirtualDiskVolumeSource) GetStoragePolicyNameOk() (*string, bool) {
	if o == nil || o.StoragePolicyName == nil {
		return nil, false
	}
	return o.StoragePolicyName, true
}

// HasStoragePolicyName returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1VsphereVirtualDiskVolumeSource) HasStoragePolicyName() bool {
	if o != nil && o.StoragePolicyName != nil {
		return true
	}

	return false
}

// SetStoragePolicyName gets a reference to the given string and assigns it to the StoragePolicyName field.
func (o *IoK8sApiCoreV1VsphereVirtualDiskVolumeSource) SetStoragePolicyName(v string) {
	o.StoragePolicyName = &v
}

// GetVolumePath returns the VolumePath field value
func (o *IoK8sApiCoreV1VsphereVirtualDiskVolumeSource) GetVolumePath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VolumePath
}

// GetVolumePathOk returns a tuple with the VolumePath field value
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1VsphereVirtualDiskVolumeSource) GetVolumePathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.VolumePath, true
}

// SetVolumePath sets field value
func (o *IoK8sApiCoreV1VsphereVirtualDiskVolumeSource) SetVolumePath(v string) {
	o.VolumePath = v
}

func (o IoK8sApiCoreV1VsphereVirtualDiskVolumeSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FsType != nil {
		toSerialize["fsType"] = o.FsType
	}
	if o.StoragePolicyID != nil {
		toSerialize["storagePolicyID"] = o.StoragePolicyID
	}
	if o.StoragePolicyName != nil {
		toSerialize["storagePolicyName"] = o.StoragePolicyName
	}
	if true {
		toSerialize["volumePath"] = o.VolumePath
	}
	return json.Marshal(toSerialize)
}

type NullableIoK8sApiCoreV1VsphereVirtualDiskVolumeSource struct {
	value *IoK8sApiCoreV1VsphereVirtualDiskVolumeSource
	isSet bool
}

func (v NullableIoK8sApiCoreV1VsphereVirtualDiskVolumeSource) Get() *IoK8sApiCoreV1VsphereVirtualDiskVolumeSource {
	return v.value
}

func (v *NullableIoK8sApiCoreV1VsphereVirtualDiskVolumeSource) Set(val *IoK8sApiCoreV1VsphereVirtualDiskVolumeSource) {
	v.value = val
	v.isSet = true
}

func (v NullableIoK8sApiCoreV1VsphereVirtualDiskVolumeSource) IsSet() bool {
	return v.isSet
}

func (v *NullableIoK8sApiCoreV1VsphereVirtualDiskVolumeSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoK8sApiCoreV1VsphereVirtualDiskVolumeSource(val *IoK8sApiCoreV1VsphereVirtualDiskVolumeSource) *NullableIoK8sApiCoreV1VsphereVirtualDiskVolumeSource {
	return &NullableIoK8sApiCoreV1VsphereVirtualDiskVolumeSource{value: val, isSet: true}
}

func (v NullableIoK8sApiCoreV1VsphereVirtualDiskVolumeSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoK8sApiCoreV1VsphereVirtualDiskVolumeSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


