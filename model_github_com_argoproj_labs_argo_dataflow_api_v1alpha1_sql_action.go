/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction struct for GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction
type GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction struct {
	OnError *GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement `json:"onError,omitempty"`
	OnRecordNotFound *GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement `json:"onRecordNotFound,omitempty"`
	Statement *GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement `json:"statement,omitempty"`
}

// NewGithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction instantiates a new GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction() *GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction {
	this := GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction{}
	return &this
}

// NewGithubComArgoprojLabsArgoDataflowApiV1alpha1SQLActionWithDefaults instantiates a new GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGithubComArgoprojLabsArgoDataflowApiV1alpha1SQLActionWithDefaults() *GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction {
	this := GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction{}
	return &this
}

// GetOnError returns the OnError field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction) GetOnError() GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement {
	if o == nil || o.OnError == nil {
		var ret GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement
		return ret
	}
	return *o.OnError
}

// GetOnErrorOk returns a tuple with the OnError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction) GetOnErrorOk() (*GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement, bool) {
	if o == nil || o.OnError == nil {
		return nil, false
	}
	return o.OnError, true
}

// HasOnError returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction) HasOnError() bool {
	if o != nil && o.OnError != nil {
		return true
	}

	return false
}

// SetOnError gets a reference to the given GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement and assigns it to the OnError field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction) SetOnError(v GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement) {
	o.OnError = &v
}

// GetOnRecordNotFound returns the OnRecordNotFound field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction) GetOnRecordNotFound() GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement {
	if o == nil || o.OnRecordNotFound == nil {
		var ret GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement
		return ret
	}
	return *o.OnRecordNotFound
}

// GetOnRecordNotFoundOk returns a tuple with the OnRecordNotFound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction) GetOnRecordNotFoundOk() (*GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement, bool) {
	if o == nil || o.OnRecordNotFound == nil {
		return nil, false
	}
	return o.OnRecordNotFound, true
}

// HasOnRecordNotFound returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction) HasOnRecordNotFound() bool {
	if o != nil && o.OnRecordNotFound != nil {
		return true
	}

	return false
}

// SetOnRecordNotFound gets a reference to the given GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement and assigns it to the OnRecordNotFound field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction) SetOnRecordNotFound(v GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement) {
	o.OnRecordNotFound = &v
}

// GetStatement returns the Statement field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction) GetStatement() GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement {
	if o == nil || o.Statement == nil {
		var ret GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement
		return ret
	}
	return *o.Statement
}

// GetStatementOk returns a tuple with the Statement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction) GetStatementOk() (*GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement, bool) {
	if o == nil || o.Statement == nil {
		return nil, false
	}
	return o.Statement, true
}

// HasStatement returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction) HasStatement() bool {
	if o != nil && o.Statement != nil {
		return true
	}

	return false
}

// SetStatement gets a reference to the given GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement and assigns it to the Statement field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction) SetStatement(v GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement) {
	o.Statement = &v
}

func (o GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.OnError != nil {
		toSerialize["onError"] = o.OnError
	}
	if o.OnRecordNotFound != nil {
		toSerialize["onRecordNotFound"] = o.OnRecordNotFound
	}
	if o.Statement != nil {
		toSerialize["statement"] = o.Statement
	}
	return json.Marshal(toSerialize)
}

type NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction struct {
	value *GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction
	isSet bool
}

func (v NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction) Get() *GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction {
	return v.value
}

func (v *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction) Set(val *GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction) {
	v.value = val
	v.isSet = true
}

func (v NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction) IsSet() bool {
	return v.isSet
}

func (v *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction(val *GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction) *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction {
	return &NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction{value: val, isSet: true}
}

func (v NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


