/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// IoK8sApiCoreV1EventSeries EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.
type IoK8sApiCoreV1EventSeries struct {
	// Number of occurrences in this series up to the last heartbeat time
	Count *int32 `json:"count,omitempty"`
	// MicroTime is version of Time with microsecond level precision.
	LastObservedTime *time.Time `json:"lastObservedTime,omitempty"`
	// State of this Series: Ongoing or Finished Deprecated. Planned removal for 1.18
	State *string `json:"state,omitempty"`
}

// NewIoK8sApiCoreV1EventSeries instantiates a new IoK8sApiCoreV1EventSeries object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoK8sApiCoreV1EventSeries() *IoK8sApiCoreV1EventSeries {
	this := IoK8sApiCoreV1EventSeries{}
	return &this
}

// NewIoK8sApiCoreV1EventSeriesWithDefaults instantiates a new IoK8sApiCoreV1EventSeries object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoK8sApiCoreV1EventSeriesWithDefaults() *IoK8sApiCoreV1EventSeries {
	this := IoK8sApiCoreV1EventSeries{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1EventSeries) GetCount() int32 {
	if o == nil || o.Count == nil {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1EventSeries) GetCountOk() (*int32, bool) {
	if o == nil || o.Count == nil {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1EventSeries) HasCount() bool {
	if o != nil && o.Count != nil {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *IoK8sApiCoreV1EventSeries) SetCount(v int32) {
	o.Count = &v
}

// GetLastObservedTime returns the LastObservedTime field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1EventSeries) GetLastObservedTime() time.Time {
	if o == nil || o.LastObservedTime == nil {
		var ret time.Time
		return ret
	}
	return *o.LastObservedTime
}

// GetLastObservedTimeOk returns a tuple with the LastObservedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1EventSeries) GetLastObservedTimeOk() (*time.Time, bool) {
	if o == nil || o.LastObservedTime == nil {
		return nil, false
	}
	return o.LastObservedTime, true
}

// HasLastObservedTime returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1EventSeries) HasLastObservedTime() bool {
	if o != nil && o.LastObservedTime != nil {
		return true
	}

	return false
}

// SetLastObservedTime gets a reference to the given time.Time and assigns it to the LastObservedTime field.
func (o *IoK8sApiCoreV1EventSeries) SetLastObservedTime(v time.Time) {
	o.LastObservedTime = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1EventSeries) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1EventSeries) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1EventSeries) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *IoK8sApiCoreV1EventSeries) SetState(v string) {
	o.State = &v
}

func (o IoK8sApiCoreV1EventSeries) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Count != nil {
		toSerialize["count"] = o.Count
	}
	if o.LastObservedTime != nil {
		toSerialize["lastObservedTime"] = o.LastObservedTime
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	return json.Marshal(toSerialize)
}

type NullableIoK8sApiCoreV1EventSeries struct {
	value *IoK8sApiCoreV1EventSeries
	isSet bool
}

func (v NullableIoK8sApiCoreV1EventSeries) Get() *IoK8sApiCoreV1EventSeries {
	return v.value
}

func (v *NullableIoK8sApiCoreV1EventSeries) Set(val *IoK8sApiCoreV1EventSeries) {
	v.value = val
	v.isSet = true
}

func (v NullableIoK8sApiCoreV1EventSeries) IsSet() bool {
	return v.isSet
}

func (v *NullableIoK8sApiCoreV1EventSeries) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoK8sApiCoreV1EventSeries(val *IoK8sApiCoreV1EventSeries) *NullableIoK8sApiCoreV1EventSeries {
	return &NullableIoK8sApiCoreV1EventSeries{value: val, isSet: true}
}

func (v NullableIoK8sApiCoreV1EventSeries) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoK8sApiCoreV1EventSeries) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


