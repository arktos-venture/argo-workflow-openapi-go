/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IoK8sApiCoreV1Handler Handler defines a specific action that should be taken
type IoK8sApiCoreV1Handler struct {
	Exec *IoK8sApiCoreV1ExecAction `json:"exec,omitempty"`
	HttpGet *IoK8sApiCoreV1HTTPGetAction `json:"httpGet,omitempty"`
	TcpSocket *IoK8sApiCoreV1TCPSocketAction `json:"tcpSocket,omitempty"`
}

// NewIoK8sApiCoreV1Handler instantiates a new IoK8sApiCoreV1Handler object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoK8sApiCoreV1Handler() *IoK8sApiCoreV1Handler {
	this := IoK8sApiCoreV1Handler{}
	return &this
}

// NewIoK8sApiCoreV1HandlerWithDefaults instantiates a new IoK8sApiCoreV1Handler object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoK8sApiCoreV1HandlerWithDefaults() *IoK8sApiCoreV1Handler {
	this := IoK8sApiCoreV1Handler{}
	return &this
}

// GetExec returns the Exec field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1Handler) GetExec() IoK8sApiCoreV1ExecAction {
	if o == nil || o.Exec == nil {
		var ret IoK8sApiCoreV1ExecAction
		return ret
	}
	return *o.Exec
}

// GetExecOk returns a tuple with the Exec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1Handler) GetExecOk() (*IoK8sApiCoreV1ExecAction, bool) {
	if o == nil || o.Exec == nil {
		return nil, false
	}
	return o.Exec, true
}

// HasExec returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1Handler) HasExec() bool {
	if o != nil && o.Exec != nil {
		return true
	}

	return false
}

// SetExec gets a reference to the given IoK8sApiCoreV1ExecAction and assigns it to the Exec field.
func (o *IoK8sApiCoreV1Handler) SetExec(v IoK8sApiCoreV1ExecAction) {
	o.Exec = &v
}

// GetHttpGet returns the HttpGet field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1Handler) GetHttpGet() IoK8sApiCoreV1HTTPGetAction {
	if o == nil || o.HttpGet == nil {
		var ret IoK8sApiCoreV1HTTPGetAction
		return ret
	}
	return *o.HttpGet
}

// GetHttpGetOk returns a tuple with the HttpGet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1Handler) GetHttpGetOk() (*IoK8sApiCoreV1HTTPGetAction, bool) {
	if o == nil || o.HttpGet == nil {
		return nil, false
	}
	return o.HttpGet, true
}

// HasHttpGet returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1Handler) HasHttpGet() bool {
	if o != nil && o.HttpGet != nil {
		return true
	}

	return false
}

// SetHttpGet gets a reference to the given IoK8sApiCoreV1HTTPGetAction and assigns it to the HttpGet field.
func (o *IoK8sApiCoreV1Handler) SetHttpGet(v IoK8sApiCoreV1HTTPGetAction) {
	o.HttpGet = &v
}

// GetTcpSocket returns the TcpSocket field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1Handler) GetTcpSocket() IoK8sApiCoreV1TCPSocketAction {
	if o == nil || o.TcpSocket == nil {
		var ret IoK8sApiCoreV1TCPSocketAction
		return ret
	}
	return *o.TcpSocket
}

// GetTcpSocketOk returns a tuple with the TcpSocket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1Handler) GetTcpSocketOk() (*IoK8sApiCoreV1TCPSocketAction, bool) {
	if o == nil || o.TcpSocket == nil {
		return nil, false
	}
	return o.TcpSocket, true
}

// HasTcpSocket returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1Handler) HasTcpSocket() bool {
	if o != nil && o.TcpSocket != nil {
		return true
	}

	return false
}

// SetTcpSocket gets a reference to the given IoK8sApiCoreV1TCPSocketAction and assigns it to the TcpSocket field.
func (o *IoK8sApiCoreV1Handler) SetTcpSocket(v IoK8sApiCoreV1TCPSocketAction) {
	o.TcpSocket = &v
}

func (o IoK8sApiCoreV1Handler) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Exec != nil {
		toSerialize["exec"] = o.Exec
	}
	if o.HttpGet != nil {
		toSerialize["httpGet"] = o.HttpGet
	}
	if o.TcpSocket != nil {
		toSerialize["tcpSocket"] = o.TcpSocket
	}
	return json.Marshal(toSerialize)
}

type NullableIoK8sApiCoreV1Handler struct {
	value *IoK8sApiCoreV1Handler
	isSet bool
}

func (v NullableIoK8sApiCoreV1Handler) Get() *IoK8sApiCoreV1Handler {
	return v.value
}

func (v *NullableIoK8sApiCoreV1Handler) Set(val *IoK8sApiCoreV1Handler) {
	v.value = val
	v.isSet = true
}

func (v NullableIoK8sApiCoreV1Handler) IsSet() bool {
	return v.isSet
}

func (v *NullableIoK8sApiCoreV1Handler) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoK8sApiCoreV1Handler(val *IoK8sApiCoreV1Handler) *NullableIoK8sApiCoreV1Handler {
	return &NullableIoK8sApiCoreV1Handler{value: val, isSet: true}
}

func (v NullableIoK8sApiCoreV1Handler) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoK8sApiCoreV1Handler) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


