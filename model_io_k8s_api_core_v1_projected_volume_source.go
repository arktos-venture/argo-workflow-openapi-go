/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IoK8sApiCoreV1ProjectedVolumeSource Represents a projected volume source
type IoK8sApiCoreV1ProjectedVolumeSource struct {
	// Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode *int32 `json:"defaultMode,omitempty"`
	// list of volume projections
	Sources []IoK8sApiCoreV1VolumeProjection `json:"sources"`
}

// NewIoK8sApiCoreV1ProjectedVolumeSource instantiates a new IoK8sApiCoreV1ProjectedVolumeSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoK8sApiCoreV1ProjectedVolumeSource(sources []IoK8sApiCoreV1VolumeProjection) *IoK8sApiCoreV1ProjectedVolumeSource {
	this := IoK8sApiCoreV1ProjectedVolumeSource{}
	this.Sources = sources
	return &this
}

// NewIoK8sApiCoreV1ProjectedVolumeSourceWithDefaults instantiates a new IoK8sApiCoreV1ProjectedVolumeSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoK8sApiCoreV1ProjectedVolumeSourceWithDefaults() *IoK8sApiCoreV1ProjectedVolumeSource {
	this := IoK8sApiCoreV1ProjectedVolumeSource{}
	return &this
}

// GetDefaultMode returns the DefaultMode field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1ProjectedVolumeSource) GetDefaultMode() int32 {
	if o == nil || o.DefaultMode == nil {
		var ret int32
		return ret
	}
	return *o.DefaultMode
}

// GetDefaultModeOk returns a tuple with the DefaultMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1ProjectedVolumeSource) GetDefaultModeOk() (*int32, bool) {
	if o == nil || o.DefaultMode == nil {
		return nil, false
	}
	return o.DefaultMode, true
}

// HasDefaultMode returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1ProjectedVolumeSource) HasDefaultMode() bool {
	if o != nil && o.DefaultMode != nil {
		return true
	}

	return false
}

// SetDefaultMode gets a reference to the given int32 and assigns it to the DefaultMode field.
func (o *IoK8sApiCoreV1ProjectedVolumeSource) SetDefaultMode(v int32) {
	o.DefaultMode = &v
}

// GetSources returns the Sources field value
func (o *IoK8sApiCoreV1ProjectedVolumeSource) GetSources() []IoK8sApiCoreV1VolumeProjection {
	if o == nil {
		var ret []IoK8sApiCoreV1VolumeProjection
		return ret
	}

	return o.Sources
}

// GetSourcesOk returns a tuple with the Sources field value
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1ProjectedVolumeSource) GetSourcesOk() (*[]IoK8sApiCoreV1VolumeProjection, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Sources, true
}

// SetSources sets field value
func (o *IoK8sApiCoreV1ProjectedVolumeSource) SetSources(v []IoK8sApiCoreV1VolumeProjection) {
	o.Sources = v
}

func (o IoK8sApiCoreV1ProjectedVolumeSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DefaultMode != nil {
		toSerialize["defaultMode"] = o.DefaultMode
	}
	if true {
		toSerialize["sources"] = o.Sources
	}
	return json.Marshal(toSerialize)
}

type NullableIoK8sApiCoreV1ProjectedVolumeSource struct {
	value *IoK8sApiCoreV1ProjectedVolumeSource
	isSet bool
}

func (v NullableIoK8sApiCoreV1ProjectedVolumeSource) Get() *IoK8sApiCoreV1ProjectedVolumeSource {
	return v.value
}

func (v *NullableIoK8sApiCoreV1ProjectedVolumeSource) Set(val *IoK8sApiCoreV1ProjectedVolumeSource) {
	v.value = val
	v.isSet = true
}

func (v NullableIoK8sApiCoreV1ProjectedVolumeSource) IsSet() bool {
	return v.isSet
}

func (v *NullableIoK8sApiCoreV1ProjectedVolumeSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoK8sApiCoreV1ProjectedVolumeSource(val *IoK8sApiCoreV1ProjectedVolumeSource) *NullableIoK8sApiCoreV1ProjectedVolumeSource {
	return &NullableIoK8sApiCoreV1ProjectedVolumeSource{value: val, isSet: true}
}

func (v NullableIoK8sApiCoreV1ProjectedVolumeSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoK8sApiCoreV1ProjectedVolumeSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


