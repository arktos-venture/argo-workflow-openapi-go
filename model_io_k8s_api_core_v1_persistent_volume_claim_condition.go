/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// IoK8sApiCoreV1PersistentVolumeClaimCondition PersistentVolumeClaimCondition contails details about state of pvc
type IoK8sApiCoreV1PersistentVolumeClaimCondition struct {
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastProbeTime *time.Time `json:"lastProbeTime,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	LastTransitionTime *time.Time `json:"lastTransitionTime,omitempty"`
	// Human-readable message indicating details about last transition.
	Message *string `json:"message,omitempty"`
	// Unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports \"ResizeStarted\" that means the underlying persistent volume is being resized.
	Reason *string `json:"reason,omitempty"`
	Status string `json:"status"`
	Type string `json:"type"`
}

// NewIoK8sApiCoreV1PersistentVolumeClaimCondition instantiates a new IoK8sApiCoreV1PersistentVolumeClaimCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoK8sApiCoreV1PersistentVolumeClaimCondition(status string, type_ string) *IoK8sApiCoreV1PersistentVolumeClaimCondition {
	this := IoK8sApiCoreV1PersistentVolumeClaimCondition{}
	this.Status = status
	this.Type = type_
	return &this
}

// NewIoK8sApiCoreV1PersistentVolumeClaimConditionWithDefaults instantiates a new IoK8sApiCoreV1PersistentVolumeClaimCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoK8sApiCoreV1PersistentVolumeClaimConditionWithDefaults() *IoK8sApiCoreV1PersistentVolumeClaimCondition {
	this := IoK8sApiCoreV1PersistentVolumeClaimCondition{}
	return &this
}

// GetLastProbeTime returns the LastProbeTime field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1PersistentVolumeClaimCondition) GetLastProbeTime() time.Time {
	if o == nil || o.LastProbeTime == nil {
		var ret time.Time
		return ret
	}
	return *o.LastProbeTime
}

// GetLastProbeTimeOk returns a tuple with the LastProbeTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1PersistentVolumeClaimCondition) GetLastProbeTimeOk() (*time.Time, bool) {
	if o == nil || o.LastProbeTime == nil {
		return nil, false
	}
	return o.LastProbeTime, true
}

// HasLastProbeTime returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1PersistentVolumeClaimCondition) HasLastProbeTime() bool {
	if o != nil && o.LastProbeTime != nil {
		return true
	}

	return false
}

// SetLastProbeTime gets a reference to the given time.Time and assigns it to the LastProbeTime field.
func (o *IoK8sApiCoreV1PersistentVolumeClaimCondition) SetLastProbeTime(v time.Time) {
	o.LastProbeTime = &v
}

// GetLastTransitionTime returns the LastTransitionTime field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1PersistentVolumeClaimCondition) GetLastTransitionTime() time.Time {
	if o == nil || o.LastTransitionTime == nil {
		var ret time.Time
		return ret
	}
	return *o.LastTransitionTime
}

// GetLastTransitionTimeOk returns a tuple with the LastTransitionTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1PersistentVolumeClaimCondition) GetLastTransitionTimeOk() (*time.Time, bool) {
	if o == nil || o.LastTransitionTime == nil {
		return nil, false
	}
	return o.LastTransitionTime, true
}

// HasLastTransitionTime returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1PersistentVolumeClaimCondition) HasLastTransitionTime() bool {
	if o != nil && o.LastTransitionTime != nil {
		return true
	}

	return false
}

// SetLastTransitionTime gets a reference to the given time.Time and assigns it to the LastTransitionTime field.
func (o *IoK8sApiCoreV1PersistentVolumeClaimCondition) SetLastTransitionTime(v time.Time) {
	o.LastTransitionTime = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1PersistentVolumeClaimCondition) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1PersistentVolumeClaimCondition) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1PersistentVolumeClaimCondition) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *IoK8sApiCoreV1PersistentVolumeClaimCondition) SetMessage(v string) {
	o.Message = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1PersistentVolumeClaimCondition) GetReason() string {
	if o == nil || o.Reason == nil {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1PersistentVolumeClaimCondition) GetReasonOk() (*string, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1PersistentVolumeClaimCondition) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *IoK8sApiCoreV1PersistentVolumeClaimCondition) SetReason(v string) {
	o.Reason = &v
}

// GetStatus returns the Status field value
func (o *IoK8sApiCoreV1PersistentVolumeClaimCondition) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1PersistentVolumeClaimCondition) GetStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *IoK8sApiCoreV1PersistentVolumeClaimCondition) SetStatus(v string) {
	o.Status = v
}

// GetType returns the Type field value
func (o *IoK8sApiCoreV1PersistentVolumeClaimCondition) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1PersistentVolumeClaimCondition) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *IoK8sApiCoreV1PersistentVolumeClaimCondition) SetType(v string) {
	o.Type = v
}

func (o IoK8sApiCoreV1PersistentVolumeClaimCondition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LastProbeTime != nil {
		toSerialize["lastProbeTime"] = o.LastProbeTime
	}
	if o.LastTransitionTime != nil {
		toSerialize["lastTransitionTime"] = o.LastTransitionTime
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.Reason != nil {
		toSerialize["reason"] = o.Reason
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableIoK8sApiCoreV1PersistentVolumeClaimCondition struct {
	value *IoK8sApiCoreV1PersistentVolumeClaimCondition
	isSet bool
}

func (v NullableIoK8sApiCoreV1PersistentVolumeClaimCondition) Get() *IoK8sApiCoreV1PersistentVolumeClaimCondition {
	return v.value
}

func (v *NullableIoK8sApiCoreV1PersistentVolumeClaimCondition) Set(val *IoK8sApiCoreV1PersistentVolumeClaimCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableIoK8sApiCoreV1PersistentVolumeClaimCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableIoK8sApiCoreV1PersistentVolumeClaimCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoK8sApiCoreV1PersistentVolumeClaimCondition(val *IoK8sApiCoreV1PersistentVolumeClaimCondition) *NullableIoK8sApiCoreV1PersistentVolumeClaimCondition {
	return &NullableIoK8sApiCoreV1PersistentVolumeClaimCondition{value: val, isSet: true}
}

func (v NullableIoK8sApiCoreV1PersistentVolumeClaimCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoK8sApiCoreV1PersistentVolumeClaimCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


