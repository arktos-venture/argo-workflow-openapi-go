/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GithubComArgoprojLabsArgoDataflowApiV1alpha1Database struct for GithubComArgoprojLabsArgoDataflowApiV1alpha1Database
type GithubComArgoprojLabsArgoDataflowApiV1alpha1Database struct {
	DataSource *GithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSource `json:"dataSource,omitempty"`
	Driver *string `json:"driver,omitempty"`
}

// NewGithubComArgoprojLabsArgoDataflowApiV1alpha1Database instantiates a new GithubComArgoprojLabsArgoDataflowApiV1alpha1Database object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGithubComArgoprojLabsArgoDataflowApiV1alpha1Database() *GithubComArgoprojLabsArgoDataflowApiV1alpha1Database {
	this := GithubComArgoprojLabsArgoDataflowApiV1alpha1Database{}
	return &this
}

// NewGithubComArgoprojLabsArgoDataflowApiV1alpha1DatabaseWithDefaults instantiates a new GithubComArgoprojLabsArgoDataflowApiV1alpha1Database object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGithubComArgoprojLabsArgoDataflowApiV1alpha1DatabaseWithDefaults() *GithubComArgoprojLabsArgoDataflowApiV1alpha1Database {
	this := GithubComArgoprojLabsArgoDataflowApiV1alpha1Database{}
	return &this
}

// GetDataSource returns the DataSource field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Database) GetDataSource() GithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSource {
	if o == nil || o.DataSource == nil {
		var ret GithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSource
		return ret
	}
	return *o.DataSource
}

// GetDataSourceOk returns a tuple with the DataSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Database) GetDataSourceOk() (*GithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSource, bool) {
	if o == nil || o.DataSource == nil {
		return nil, false
	}
	return o.DataSource, true
}

// HasDataSource returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Database) HasDataSource() bool {
	if o != nil && o.DataSource != nil {
		return true
	}

	return false
}

// SetDataSource gets a reference to the given GithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSource and assigns it to the DataSource field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Database) SetDataSource(v GithubComArgoprojLabsArgoDataflowApiV1alpha1DBDataSource) {
	o.DataSource = &v
}

// GetDriver returns the Driver field value if set, zero value otherwise.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Database) GetDriver() string {
	if o == nil || o.Driver == nil {
		var ret string
		return ret
	}
	return *o.Driver
}

// GetDriverOk returns a tuple with the Driver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Database) GetDriverOk() (*string, bool) {
	if o == nil || o.Driver == nil {
		return nil, false
	}
	return o.Driver, true
}

// HasDriver returns a boolean if a field has been set.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Database) HasDriver() bool {
	if o != nil && o.Driver != nil {
		return true
	}

	return false
}

// SetDriver gets a reference to the given string and assigns it to the Driver field.
func (o *GithubComArgoprojLabsArgoDataflowApiV1alpha1Database) SetDriver(v string) {
	o.Driver = &v
}

func (o GithubComArgoprojLabsArgoDataflowApiV1alpha1Database) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DataSource != nil {
		toSerialize["dataSource"] = o.DataSource
	}
	if o.Driver != nil {
		toSerialize["driver"] = o.Driver
	}
	return json.Marshal(toSerialize)
}

type NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1Database struct {
	value *GithubComArgoprojLabsArgoDataflowApiV1alpha1Database
	isSet bool
}

func (v NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1Database) Get() *GithubComArgoprojLabsArgoDataflowApiV1alpha1Database {
	return v.value
}

func (v *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1Database) Set(val *GithubComArgoprojLabsArgoDataflowApiV1alpha1Database) {
	v.value = val
	v.isSet = true
}

func (v NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1Database) IsSet() bool {
	return v.isSet
}

func (v *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1Database) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGithubComArgoprojLabsArgoDataflowApiV1alpha1Database(val *GithubComArgoprojLabsArgoDataflowApiV1alpha1Database) *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1Database {
	return &NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1Database{value: val, isSet: true}
}

func (v NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1Database) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGithubComArgoprojLabsArgoDataflowApiV1alpha1Database) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


