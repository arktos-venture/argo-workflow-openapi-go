/*
Argo Server API

You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`

API version: VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IoK8sApiCoreV1PersistentVolumeClaimSpec PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes
type IoK8sApiCoreV1PersistentVolumeClaimSpec struct {
	// AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes *[]string `json:"accessModes,omitempty"`
	DataSource *IoK8sApiCoreV1TypedLocalObjectReference `json:"dataSource,omitempty"`
	Resources *IoK8sApiCoreV1ResourceRequirements `json:"resources,omitempty"`
	Selector *IoK8sApimachineryPkgApisMetaV1LabelSelector `json:"selector,omitempty"`
	// Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
	StorageClassName *string `json:"storageClassName,omitempty"`
	// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature.
	VolumeMode *string `json:"volumeMode,omitempty"`
	// VolumeName is the binding reference to the PersistentVolume backing this claim.
	VolumeName *string `json:"volumeName,omitempty"`
}

// NewIoK8sApiCoreV1PersistentVolumeClaimSpec instantiates a new IoK8sApiCoreV1PersistentVolumeClaimSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIoK8sApiCoreV1PersistentVolumeClaimSpec() *IoK8sApiCoreV1PersistentVolumeClaimSpec {
	this := IoK8sApiCoreV1PersistentVolumeClaimSpec{}
	return &this
}

// NewIoK8sApiCoreV1PersistentVolumeClaimSpecWithDefaults instantiates a new IoK8sApiCoreV1PersistentVolumeClaimSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIoK8sApiCoreV1PersistentVolumeClaimSpecWithDefaults() *IoK8sApiCoreV1PersistentVolumeClaimSpec {
	this := IoK8sApiCoreV1PersistentVolumeClaimSpec{}
	return &this
}

// GetAccessModes returns the AccessModes field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1PersistentVolumeClaimSpec) GetAccessModes() []string {
	if o == nil || o.AccessModes == nil {
		var ret []string
		return ret
	}
	return *o.AccessModes
}

// GetAccessModesOk returns a tuple with the AccessModes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1PersistentVolumeClaimSpec) GetAccessModesOk() (*[]string, bool) {
	if o == nil || o.AccessModes == nil {
		return nil, false
	}
	return o.AccessModes, true
}

// HasAccessModes returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1PersistentVolumeClaimSpec) HasAccessModes() bool {
	if o != nil && o.AccessModes != nil {
		return true
	}

	return false
}

// SetAccessModes gets a reference to the given []string and assigns it to the AccessModes field.
func (o *IoK8sApiCoreV1PersistentVolumeClaimSpec) SetAccessModes(v []string) {
	o.AccessModes = &v
}

// GetDataSource returns the DataSource field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1PersistentVolumeClaimSpec) GetDataSource() IoK8sApiCoreV1TypedLocalObjectReference {
	if o == nil || o.DataSource == nil {
		var ret IoK8sApiCoreV1TypedLocalObjectReference
		return ret
	}
	return *o.DataSource
}

// GetDataSourceOk returns a tuple with the DataSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1PersistentVolumeClaimSpec) GetDataSourceOk() (*IoK8sApiCoreV1TypedLocalObjectReference, bool) {
	if o == nil || o.DataSource == nil {
		return nil, false
	}
	return o.DataSource, true
}

// HasDataSource returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1PersistentVolumeClaimSpec) HasDataSource() bool {
	if o != nil && o.DataSource != nil {
		return true
	}

	return false
}

// SetDataSource gets a reference to the given IoK8sApiCoreV1TypedLocalObjectReference and assigns it to the DataSource field.
func (o *IoK8sApiCoreV1PersistentVolumeClaimSpec) SetDataSource(v IoK8sApiCoreV1TypedLocalObjectReference) {
	o.DataSource = &v
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1PersistentVolumeClaimSpec) GetResources() IoK8sApiCoreV1ResourceRequirements {
	if o == nil || o.Resources == nil {
		var ret IoK8sApiCoreV1ResourceRequirements
		return ret
	}
	return *o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1PersistentVolumeClaimSpec) GetResourcesOk() (*IoK8sApiCoreV1ResourceRequirements, bool) {
	if o == nil || o.Resources == nil {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1PersistentVolumeClaimSpec) HasResources() bool {
	if o != nil && o.Resources != nil {
		return true
	}

	return false
}

// SetResources gets a reference to the given IoK8sApiCoreV1ResourceRequirements and assigns it to the Resources field.
func (o *IoK8sApiCoreV1PersistentVolumeClaimSpec) SetResources(v IoK8sApiCoreV1ResourceRequirements) {
	o.Resources = &v
}

// GetSelector returns the Selector field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1PersistentVolumeClaimSpec) GetSelector() IoK8sApimachineryPkgApisMetaV1LabelSelector {
	if o == nil || o.Selector == nil {
		var ret IoK8sApimachineryPkgApisMetaV1LabelSelector
		return ret
	}
	return *o.Selector
}

// GetSelectorOk returns a tuple with the Selector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1PersistentVolumeClaimSpec) GetSelectorOk() (*IoK8sApimachineryPkgApisMetaV1LabelSelector, bool) {
	if o == nil || o.Selector == nil {
		return nil, false
	}
	return o.Selector, true
}

// HasSelector returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1PersistentVolumeClaimSpec) HasSelector() bool {
	if o != nil && o.Selector != nil {
		return true
	}

	return false
}

// SetSelector gets a reference to the given IoK8sApimachineryPkgApisMetaV1LabelSelector and assigns it to the Selector field.
func (o *IoK8sApiCoreV1PersistentVolumeClaimSpec) SetSelector(v IoK8sApimachineryPkgApisMetaV1LabelSelector) {
	o.Selector = &v
}

// GetStorageClassName returns the StorageClassName field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1PersistentVolumeClaimSpec) GetStorageClassName() string {
	if o == nil || o.StorageClassName == nil {
		var ret string
		return ret
	}
	return *o.StorageClassName
}

// GetStorageClassNameOk returns a tuple with the StorageClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1PersistentVolumeClaimSpec) GetStorageClassNameOk() (*string, bool) {
	if o == nil || o.StorageClassName == nil {
		return nil, false
	}
	return o.StorageClassName, true
}

// HasStorageClassName returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1PersistentVolumeClaimSpec) HasStorageClassName() bool {
	if o != nil && o.StorageClassName != nil {
		return true
	}

	return false
}

// SetStorageClassName gets a reference to the given string and assigns it to the StorageClassName field.
func (o *IoK8sApiCoreV1PersistentVolumeClaimSpec) SetStorageClassName(v string) {
	o.StorageClassName = &v
}

// GetVolumeMode returns the VolumeMode field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1PersistentVolumeClaimSpec) GetVolumeMode() string {
	if o == nil || o.VolumeMode == nil {
		var ret string
		return ret
	}
	return *o.VolumeMode
}

// GetVolumeModeOk returns a tuple with the VolumeMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1PersistentVolumeClaimSpec) GetVolumeModeOk() (*string, bool) {
	if o == nil || o.VolumeMode == nil {
		return nil, false
	}
	return o.VolumeMode, true
}

// HasVolumeMode returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1PersistentVolumeClaimSpec) HasVolumeMode() bool {
	if o != nil && o.VolumeMode != nil {
		return true
	}

	return false
}

// SetVolumeMode gets a reference to the given string and assigns it to the VolumeMode field.
func (o *IoK8sApiCoreV1PersistentVolumeClaimSpec) SetVolumeMode(v string) {
	o.VolumeMode = &v
}

// GetVolumeName returns the VolumeName field value if set, zero value otherwise.
func (o *IoK8sApiCoreV1PersistentVolumeClaimSpec) GetVolumeName() string {
	if o == nil || o.VolumeName == nil {
		var ret string
		return ret
	}
	return *o.VolumeName
}

// GetVolumeNameOk returns a tuple with the VolumeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IoK8sApiCoreV1PersistentVolumeClaimSpec) GetVolumeNameOk() (*string, bool) {
	if o == nil || o.VolumeName == nil {
		return nil, false
	}
	return o.VolumeName, true
}

// HasVolumeName returns a boolean if a field has been set.
func (o *IoK8sApiCoreV1PersistentVolumeClaimSpec) HasVolumeName() bool {
	if o != nil && o.VolumeName != nil {
		return true
	}

	return false
}

// SetVolumeName gets a reference to the given string and assigns it to the VolumeName field.
func (o *IoK8sApiCoreV1PersistentVolumeClaimSpec) SetVolumeName(v string) {
	o.VolumeName = &v
}

func (o IoK8sApiCoreV1PersistentVolumeClaimSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccessModes != nil {
		toSerialize["accessModes"] = o.AccessModes
	}
	if o.DataSource != nil {
		toSerialize["dataSource"] = o.DataSource
	}
	if o.Resources != nil {
		toSerialize["resources"] = o.Resources
	}
	if o.Selector != nil {
		toSerialize["selector"] = o.Selector
	}
	if o.StorageClassName != nil {
		toSerialize["storageClassName"] = o.StorageClassName
	}
	if o.VolumeMode != nil {
		toSerialize["volumeMode"] = o.VolumeMode
	}
	if o.VolumeName != nil {
		toSerialize["volumeName"] = o.VolumeName
	}
	return json.Marshal(toSerialize)
}

type NullableIoK8sApiCoreV1PersistentVolumeClaimSpec struct {
	value *IoK8sApiCoreV1PersistentVolumeClaimSpec
	isSet bool
}

func (v NullableIoK8sApiCoreV1PersistentVolumeClaimSpec) Get() *IoK8sApiCoreV1PersistentVolumeClaimSpec {
	return v.value
}

func (v *NullableIoK8sApiCoreV1PersistentVolumeClaimSpec) Set(val *IoK8sApiCoreV1PersistentVolumeClaimSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableIoK8sApiCoreV1PersistentVolumeClaimSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableIoK8sApiCoreV1PersistentVolumeClaimSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIoK8sApiCoreV1PersistentVolumeClaimSpec(val *IoK8sApiCoreV1PersistentVolumeClaimSpec) *NullableIoK8sApiCoreV1PersistentVolumeClaimSpec {
	return &NullableIoK8sApiCoreV1PersistentVolumeClaimSpec{value: val, isSet: true}
}

func (v NullableIoK8sApiCoreV1PersistentVolumeClaimSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIoK8sApiCoreV1PersistentVolumeClaimSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


